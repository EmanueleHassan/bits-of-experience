<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience</title><link>https://marcohassan.github.io/bits-of-experience/</link><description>A readable view on my studying adventures.</description><atom:link href="https://marcohassan.github.io/bits-of-experience/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Sat, 13 Nov 2021 15:17:13 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python Virtual-Env Etc. Set Up</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-virtual-env-etc-set-up/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I quickly took time to fix the Python issue. I could first download
just the portable version of it due to security issues.
&lt;/p&gt;

&lt;p&gt;
But then it was just a pain to configure pip and to get all of the
proper configuration to work with virtualenvironments.
&lt;/p&gt;

&lt;p&gt;
I also did not want to live like a moroon and not work with virtual
environments knowing that it will come to hit me back at some
point. Plus when the transition to the cloud will be completed and a
more solid microservices approach will be in place it will be
essential to have virtual environments for having all of the needed
dependencies for each project and just load these into your docker
image/container.
&lt;/p&gt;

&lt;p&gt;
The same holds for these very heavy and ugly solutions such as conda
and friends.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-virtual-env-etc-set-up/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-virtual-env-etc-set-up/</guid><pubDate>Mon, 08 Nov 2021 16:01:22 GMT</pubDate></item><item><title>On Classical Architectures</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-classical-architectures/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;



&lt;p&gt;
I was told a story once.
&lt;/p&gt;

&lt;p&gt;
It is about the way Da Vinci used to draw. Well I will expose it in
this post and how it is related to architectural patterns.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-classical-architectures/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-classical-architectures/</guid><pubDate>Thu, 04 Nov 2021 10:37:41 GMT</pubDate></item><item><title>Spring</title><link>https://marcohassan.github.io/bits-of-experience/posts/spring/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So this is the next piece of the cake. As we transition to the cloud
it makes sense to have the spring-framework in your skillset.
&lt;/p&gt;

&lt;p&gt;
The notes are based on Spring in Action - 5th edition.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/spring/"&gt;Read more…&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/spring/</guid><pubDate>Mon, 01 Nov 2021 15:46:56 GMT</pubDate></item><item><title>On Enterprise Applications Architecture</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-enterprise-applications-architecture/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So having moved out of the field of PoC/MvP I must say that I am
starting to understand the difficulties around setting up virtuous
enterprise applications.
&lt;/p&gt;

&lt;p&gt;
You have complex processes and lots of possible solutions. You have to
be agile and nimble. This is the only way to manage the complexity and
still be able to steer your application in a smooth way, in order to
keep up with the technological progress.
&lt;/p&gt;

&lt;p&gt;
This is the ultimate challenge of the job. The complex business logic
calls for complex solutions. I.e. usually when you are under pressure
you make direct mappings of the required business logic into a
system. Without abstracting and without imposing meta-structure the
system gets heavy and looses that nimble and agile component.
&lt;/p&gt;

&lt;p&gt;
In order to deal with the issues above, I started to read &lt;a href="http://ce.sharif.edu/courses/97-98/2/ce418-1/resources/root/Books/Patterns%20of%20Enterprise%20Application%20Architecture%20-%20Martin%20Fowler.pdf"&gt;Patterns of
Enterprise Application Architecture&lt;/a&gt;, here some notes -mainly copy and
past - such that I will hopefully learn in a fast way to make the
right decisions when working on enterprise applications.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-enterprise-applications-architecture/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-enterprise-applications-architecture/</guid><pubDate>Mon, 01 Nov 2021 13:21:20 GMT</pubDate></item><item><title>On Fixed-Income Risk Models</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-fixed-income-risk-models/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So this is an interesting post. It treats some financial model for
fixed income instruments.
&lt;/p&gt;

&lt;p&gt;
At school, back in the days you simply treated the standard
duration/convexity and simpler refined models thinking in terms of
key-rate duration etc.
&lt;/p&gt;

&lt;p&gt;
I never specialized in fixed income instruments during my
studies. More on volatility models, general econometrics and
derivatives if any. So it makes sense that the models you checked at
in the more general non-specialized modules, were quite general.
&lt;/p&gt;

&lt;p&gt;
Now working in an insurance you understand well that fixed-income
instruments take the lion position.
&lt;/p&gt;

&lt;p&gt;
Hence, more specialized models are used in order to price the risk of
such fixed-income instruments.
&lt;/p&gt;

&lt;p&gt;
Here some notes to understand the things in this sense in a better
way. The general idea is to use fixed-income attribution models as in
the &lt;a href="https://en.wikipedia.org/wiki/Fixed-income_attribution"&gt;following entry&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-fixed-income-risk-models/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>finance</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-fixed-income-risk-models/</guid><pubDate>Thu, 28 Oct 2021 08:10:15 GMT</pubDate></item><item><title>Work Strategy - On Multi-Teaming and Multi-Threading</title><link>https://marcohassan.github.io/bits-of-experience/posts/work-strategy-on-multi-teaming-and-multi-threading/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Ok, so this is a post in line with the previous ones. You are starting
to understand your responsibilities and how the team operates.
&lt;/p&gt;

&lt;p&gt;
It is going to be a fun ride. Let's see how it will go in the long
run.
&lt;/p&gt;

&lt;p&gt;
Here are some notes that will be your northern star in your new
adventure. They should always be fresh in your mind as they will help
you to keep the right amount of serenity at work and to work in the
best possible way given your limited amount of time and mental
resources.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/work-strategy-on-multi-teaming-and-multi-threading/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Time Management and Mind-Set</category><guid>https://marcohassan.github.io/bits-of-experience/posts/work-strategy-on-multi-teaming-and-multi-threading/</guid><pubDate>Tue, 26 Oct 2021 12:14:51 GMT</pubDate></item><item><title>On Investment Management of a big Insurance</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-investment-management-of-a-big-insurance/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Wow.. things are starting to get interesting. The issue is that in the
new job, you do not simply have to tackle down a system that looks
challenging to tackle down, with lots of tech involved and, possibly,
a fair amount of math.
&lt;/p&gt;

&lt;p&gt;
You have as well to deal with a business machine that is equally
complex. The organization and the structure of the entire machine
is interesting.
&lt;/p&gt;

&lt;p&gt;
In order to well perform at the job a good understanding of both is
necessary. So I am taking a bit of time now to structure the
understing in this dimension and to understand how the investment
management machine works in bigger insurance companies.
&lt;/p&gt;

&lt;p&gt;
Note that I am keeping these notes very general and I am just writing
here publicly available information. These notes mainly derive on the
public document outling the structure of &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;ved=2ahUKEwjbpPqt5eXzAhVE_KQKHdhmA_YQFnoECAMQAQ&amp;amp;url=https%3A%2F%2Fwww.zurich.com%2F-%2Fmedia%2Fproject%2Fzurich%2Fdotcom%2Fsustainability%2Fdocs%2Finvestment-management-value-creation-2014.pdf%3Fla%3Den&amp;amp;usg=AOvVaw2m5DSA7AYGq9OfYan1QB7h"&gt;zurich insurance investment
management&lt;/a&gt;, which is very well in line with what I can observe in my
position.
&lt;/p&gt;

&lt;p&gt;
In order to expand your understanding in this sense, you can &lt;a href="https://www.oecd.org/investment/evolution-insurer-strategies-long-term-investing.pdf"&gt;read the
following document by oecd&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Note that such a general macro-view is necessary as through it you
will make better sense on the applicaiton of your market-risk system
and can better understand the stakeholder you will have to deal with. 
&lt;/p&gt;


&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-investment-management-of-a-big-insurance/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>investment management</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-investment-management-of-a-big-insurance/</guid><pubDate>Mon, 25 Oct 2021 14:11:36 GMT</pubDate></item><item><title>On the Full-Cycle Development Model</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-the-full-cycle-development-model/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
This is a brief reminder - &lt;a href="https://www.infoq.com/presentations/netflix-devops/"&gt;on being a full-cycle developer&lt;/a&gt; and the its
implications. 
&lt;/p&gt;</description><category>dev</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-the-full-cycle-development-model/</guid><pubDate>Fri, 22 Oct 2021 15:46:00 GMT</pubDate></item><item><title>Gradle</title><link>https://marcohassan.github.io/bits-of-experience/posts/gradle/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So in this post I will make some notes on Gradle.
&lt;/p&gt;

&lt;p&gt;
I could theoretically take it as a black box at work and do my work
with the current configuration.
&lt;/p&gt;

&lt;p&gt;
I prefer to invest some time to understand how it works under the
hood. This will allow me more flexibility in the future. Moreover, it
will allow me to streamline my workflow in emacs once I have a more
profund understanding of it.
&lt;/p&gt;

&lt;p&gt;
These notes are based on the book &lt;a href="https://www.amazon.com/Gradle-Action-Benjamin-Muschko/dp/1617291307"&gt;gradle in action&lt;/a&gt;. Interesting is
that this book works with Groovy, which is apparently a more flexible
Java that introduce some of the concepts of dynamic programming
languages. Look at the &lt;a href="https://www.bbvaapimarket.com/en/api-world/why-groovy-gaining-popularity-among-java-developers/"&gt;following entry&lt;/a&gt; in this sense. I must say that
I can well understand why Python is gaining so much traction over more
heavy languages as Java. It is not simply a thing about the learning
curve. I think that Java with its structured type-safe and OOP
appraoch is more solid than Python for larger system. I see the point
for using it at work. The only thing is that the developing experience
is slower. As you have to compile the entire code before running it,
you cannot develop on the fly and integrate the changes in the more
structured project as you used to do in interpreted languages.
&lt;/p&gt;

&lt;p&gt;
Anyways, back to the book. Note that the book is very exhaustive.
Through it you will manage to get a broad overview on the topic and
you will even get to the point of continous integration and continouos
deployment.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/gradle/"&gt;Read more…&lt;/a&gt; (26 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/gradle/</guid><pubDate>Wed, 20 Oct 2021 07:18:25 GMT</pubDate></item><item><title>Git-Flow</title><link>https://marcohassan.github.io/bits-of-experience/posts/git-flow/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So brief entry on git-flow. 
&lt;/p&gt;

&lt;p&gt;
I am still in the phase where I have to set up my workflow properly,
such that order will reign and that chaos will come to hunt me down in
a couple of months/years. That standard looks promising. It is nothing
too far to what you used to do before. However, it is a framework used
in many enterprises so that it is good to stick to it. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/git-flow/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://marcohassan.github.io/bits-of-experience/posts/git-flow/</guid><pubDate>Thu, 14 Oct 2021 15:19:38 GMT</pubDate></item></channel></rss>