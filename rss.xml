<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience</title><link>https://marcohassan.github.io/bits-of-experience/</link><description>A readable view on my studying adventures.</description><atom:link href="https://marcohassan.github.io/bits-of-experience/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Fri, 25 Jun 2021 14:24:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Refactoring - Ediffing and Merging</title><link>https://marcohassan.github.io/bits-of-experience/posts/refactoring-ediffing-and-merging/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So recently I had to do quite some big refactoring and merging for
some code base.
&lt;/p&gt;

&lt;p&gt;
I knew about emacs &lt;code&gt;ediffing&lt;/code&gt; packages that I used already a couple
of times in the past. It is just a little bit confusing at the
beginning as it is often the case with emacs, you might well be
overwhelmed at the beginning. Too many nice features and you might
quickly get lost in it.
&lt;/p&gt;

&lt;p&gt;
The below video should give you a quick introduction to ediffing in
emacs. It is just a very basic tutorial. Then to get more detailed
information you should check at the &lt;a href="https://www.gnu.org/software/emacs/manual/html_mono/ediff.html"&gt;official documentation&lt;/a&gt; (at the
quick help commands section) telling you about all of the different
commands that are quite a few.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/refactoring-ediffing-and-merging/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/refactoring-ediffing-and-merging/</guid><pubDate>Fri, 25 Jun 2021 13:48:17 GMT</pubDate></item><item><title>Flask Login vs Flask Auth</title><link>https://marcohassan.github.io/bits-of-experience/posts/flask-login-vs-flask-auth/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So again this is nothing but a quick lesson to keep this big
understanding of the IT systems landscape. That is once more not my
bread and butter. At least so far so also look around as you might
find better sources explaining such content.
&lt;/p&gt;

&lt;p&gt;
I am starting to cumulate quite some experience in flask. Ultimately I
had to do quite some project on the backend side for a project.
&lt;/p&gt;

&lt;p&gt;
The point came when I had to secure the a webapp I am working
on. As it is an experimental project with low budget I have to perform
multiple tasks. I.e. I developed the data solution and data model. I
implemented the database and have now to make it speak with the
front-end component. 
&lt;/p&gt;

&lt;p&gt;
There is an important difference to understand in the way you can
operate with flask and depending on the application type you should
use the one or the other method for securing your application.
&lt;/p&gt;

&lt;p&gt;
This is directly related to the &lt;a href="https://build.vsupalov.com/how-backend-and-frontend-communicate/"&gt;different types of web-architectures&lt;/a&gt;
you can use to structure your front-end. I will briefly go over these
next. It will make you to make sense of everything.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/flask-login-vs-flask-auth/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>flask</category><category>webapps</category><guid>https://marcohassan.github.io/bits-of-experience/posts/flask-login-vs-flask-auth/</guid><pubDate>Wed, 23 Jun 2021 14:27:50 GMT</pubDate></item><item><title>Defining Functions in Spark</title><link>https://marcohassan.github.io/bits-of-experience/posts/defining-functions-in-spark/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
One especially interesting feature that I already used before; but
unfortunately I did not make notes for, is the possibility of
specifying particular functions via the PySpark raw API and make them
available throughout your spark session when working via data-frames -
be it via SparkSQL or via pandas.
&lt;/p&gt;

&lt;p&gt;
Note that this notes are based on &lt;a href="https://jaceklaskowski.gitbooks.io/mastering-spark-sql/content/spark-sql-udfs.html"&gt;this source&lt;/a&gt;. Looks like a very
exhaustive source. So check at it again should this project really
start. There you might make sense of all of that. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/defining-functions-in-spark/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Spark</category><guid>https://marcohassan.github.io/bits-of-experience/posts/defining-functions-in-spark/</guid><pubDate>Thu, 03 Jun 2021 12:34:46 GMT</pubDate></item><item><title>Helm</title><link>https://marcohassan.github.io/bits-of-experience/posts/helm/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This are some notes on Helm.
&lt;/p&gt;

&lt;p&gt;
Recently I have downloaded a chart. I will have to change the
configurations of this.
&lt;/p&gt;

&lt;p&gt;
I will have to configure static IP for the internal application
running in kubernetes such that my service will be externally
accessible. 
&lt;/p&gt;

&lt;p&gt;
Here some notes based on that and some commands.
&lt;/p&gt;

&lt;p&gt;
I will expand on this in the future depending how much I will have to
work with it.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/helm/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Container Management</category><guid>https://marcohassan.github.io/bits-of-experience/posts/helm/</guid><pubDate>Thu, 27 May 2021 15:16:46 GMT</pubDate></item><item><title>General Notes on Data Lakes</title><link>https://marcohassan.github.io/bits-of-experience/posts/general-notes-on-data-lakes/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Some general notes on data lakes. Sum up a bit the general decisions
in the data world.
&lt;/p&gt;

&lt;p&gt;
More interesting is the Zaloni approach discussed later in the notes.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/general-notes-on-data-lakes/"&gt;Read more…&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Data</category><guid>https://marcohassan.github.io/bits-of-experience/posts/general-notes-on-data-lakes/</guid><pubDate>Thu, 27 May 2021 14:57:36 GMT</pubDate></item><item><title>Istio</title><link>https://marcohassan.github.io/bits-of-experience/posts/istio/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
A quick intro to Istio and what that is.
&lt;/p&gt;

&lt;p&gt;
Expand in the future in case of need.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/istio/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Microservices</category><guid>https://marcohassan.github.io/bits-of-experience/posts/istio/</guid><pubDate>Thu, 27 May 2021 14:50:16 GMT</pubDate></item><item><title>CI Pipeline</title><link>https://marcohassan.github.io/bits-of-experience/posts/ci-pipeline/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;
This entry contains some notes about setting up a CI pipeline. I will
explore especially the &lt;code&gt;Jenkins&lt;/code&gt; option and I will integrate it with
Python.
&lt;/p&gt;

&lt;p&gt;
After setting up the architecture for a project it is important now to
set up such processes such that we will work with the proper tooling
and will not loose too much time integrating versions over time.
&lt;/p&gt;

&lt;p&gt;
Please note that some of this material comes from &lt;a href="https://www.amazon.com/Python-Continuous-Integration-Delivery-Examples/dp/1484242807"&gt;Python Continuous
Integration and Delivery: A Concise Guide with Examples&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
You can refer to this book should you want a more in depth discussion
of the material covered here.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/ci-pipeline/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://marcohassan.github.io/bits-of-experience/posts/ci-pipeline/</guid><pubDate>Wed, 21 Apr 2021 07:46:02 GMT</pubDate></item><item><title>RDF Graphs - SPARQL - Turtle</title><link>https://marcohassan.github.io/bits-of-experience/posts/rdf-graphs-sparql-turtle/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Ok, it turns out I will have also quickly to dig into RDFs its syntax
and concepts.
&lt;/p&gt;

&lt;p&gt;
To be honest after I digged deeper into label-property graphs I do not
really see the point of using RDFs graphs and query such graphs via
SPARQL. I did not even start seriously with it and I already have
headache because of the complexity involved. In every little thing in
CS there are layers and layers of complexity and at least 10 ways to
do one thing. That does not help. w3c or whatever should improve on
this, cause it is not fun like this. 
&lt;/p&gt;

&lt;p&gt;
In any case, after this quick rant, the point of learning this is that
RDF is useful in itself cause on top of allowing the construction of
RDF graphs and the query via SPARQL it is a w3c standard to store
triples in itself.
&lt;/p&gt;

&lt;p&gt;
Standardizations are always good, and this is why such data syntax is
very much used across the world for a smooth data transfer. I.e. even
if you do not like the graph storage and query of such RDF data, it is
useful itself cause its large community endowment.
&lt;/p&gt;

&lt;p&gt;
This is why for the solution we will leverage existing RDF ontologies
as well as create our own data store following RDF standards and a
particular RDF ontology format used in Switzerland.
&lt;/p&gt;

&lt;p&gt;
At the lower data layer we will therefore work with these. The app
logic, store and retrieve will likely not be through RDFs graphs and SPARQL.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/rdf-graphs-sparql-turtle/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Data</category><guid>https://marcohassan.github.io/bits-of-experience/posts/rdf-graphs-sparql-turtle/</guid><pubDate>Wed, 31 Mar 2021 14:52:34 GMT</pubDate></item><item><title>A nice Reminder - The Gamification of Yourself</title><link>https://marcohassan.github.io/bits-of-experience/posts/a-nice-reminder-the-gamification-on-yourself/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This is just another quick note for myself. I also set it in my
org-agenda as a reminder. I believe in this piece of advice.
&lt;/p&gt;

&lt;p&gt;
This morning I was doing some research exploring the data science
consulting vs. in house data science world and what people usually
say in merit.
&lt;/p&gt;

&lt;p&gt;
One reddit leads to the other and at the end I quickly was off
track. I ended up on &lt;a href="https://www.reddit.com/r/datascience/comments/mc77r3/how_do_you_motivate_yourself_to_pursue_your_own/"&gt;this thread&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/a-nice-reminder-the-gamification-on-yourself/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>workflow</category><guid>https://marcohassan.github.io/bits-of-experience/posts/a-nice-reminder-the-gamification-on-yourself/</guid><pubDate>Sat, 27 Mar 2021 07:59:59 GMT</pubDate></item><item><title>Neo4j</title><link>https://marcohassan.github.io/bits-of-experience/posts/neo4j/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So new project new life. The one before did not take off due to
bureaucratic issues - a pity.
&lt;/p&gt;

&lt;p&gt;
Good is that on the new one I will work with Graph Databases. I love
graph structures and I deeply believe in them so I am very happy to
start this project.
&lt;/p&gt;

&lt;p&gt;
This posts summarizes my learning encounters when working with graph
databases and sets some mental structure for working with them.
&lt;/p&gt;

&lt;p&gt;
The notes are based on &lt;a href="https://neo4j.com/books/neo4j-in-action-book/"&gt;Neo4j in action&lt;/a&gt; and the &lt;a href="https://neo4j.com/docs/cypher-manual/current/clauses/match/"&gt;Official Documentation&lt;/a&gt;.
&lt;/p&gt;

&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/neo4j/"&gt;Read more…&lt;/a&gt; (34 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Data</category><guid>https://marcohassan.github.io/bits-of-experience/posts/neo4j/</guid><pubDate>Wed, 17 Mar 2021 14:27:09 GMT</pubDate></item></channel></rss>