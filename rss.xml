<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience</title><link>https://marcohassan.github.io/bits-of-experience/</link><description>A readable view on my studying adventures.</description><atom:link href="https://marcohassan.github.io/bits-of-experience/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Tue, 26 Oct 2021 14:05:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Work Strategy - On Multi-Teaming and Multi-Threading</title><link>https://marcohassan.github.io/bits-of-experience/posts/work-strategy-on-multi-teaming-and-multi-threading/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Ok, so this is a post in line with the previous ones. You are starting
to understand your responsibilities and how the team operates.
&lt;/p&gt;

&lt;p&gt;
It is going to be a fun ride. Let's see how it will go in the long
run.
&lt;/p&gt;

&lt;p&gt;
Here are some notes that will be your northern star in your new
adventure. They should always be fresh in your mind as they will help
you to keep the right amount of serenity at work and to work in the
best possible way given your limited amount of time and mental
resources.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/work-strategy-on-multi-teaming-and-multi-threading/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Time Management and Mind-Set</category><guid>https://marcohassan.github.io/bits-of-experience/posts/work-strategy-on-multi-teaming-and-multi-threading/</guid><pubDate>Tue, 26 Oct 2021 12:14:51 GMT</pubDate></item><item><title>On Investment Management of a big Insurance</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-investment-management-of-a-big-insurance/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Wow.. things are starting to get interesting. The issue is that in the
new job, you do not simply have to tackle down a system that looks
challenging to tackle down, with lots of tech involved and, possibly,
a fair amount of math.
&lt;/p&gt;

&lt;p&gt;
You have as well to deal with a business machine that is equally
complex. The organization and the structure of the entire machine
is interesting.
&lt;/p&gt;

&lt;p&gt;
In order to well perform at the job a good understanding of both is
necessary. So I am taking a bit of time now to structure the
understing in this dimension and to understand how the investment
management machine works in bigger insurance companies.
&lt;/p&gt;

&lt;p&gt;
Note that I am keeping these notes very general and I am just writing
here publicly available information. This notes mainly derive on the
public document outling the structure of &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;ved=2ahUKEwjbpPqt5eXzAhVE_KQKHdhmA_YQFnoECAMQAQ&amp;amp;url=https%3A%2F%2Fwww.zurich.com%2F-%2Fmedia%2Fproject%2Fzurich%2Fdotcom%2Fsustainability%2Fdocs%2Finvestment-management-value-creation-2014.pdf%3Fla%3Den&amp;amp;usg=AOvVaw2m5DSA7AYGq9OfYan1QB7h"&gt;zurich insurance investment
management&lt;/a&gt;, which is very well in line with what I can observe in my
position.
&lt;/p&gt;

&lt;p&gt;
In order to expand your understanding in this sense, you can &lt;a href="https://www.oecd.org/investment/evolution-insurer-strategies-long-term-investing.pdf"&gt;read the
following document by oecd&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Note that such a general macro-view is necessary as through it you
will make better sense on the applicaiton of your market-risk system
and can better understand the stakeholder you will have to deal with. 
&lt;/p&gt;


&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-investment-management-of-a-big-insurance/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>investment management</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-investment-management-of-a-big-insurance/</guid><pubDate>Mon, 25 Oct 2021 14:11:36 GMT</pubDate></item><item><title>On the Full-Cycle Development Model</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-the-full-cycle-development-model/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
This is a brief reminder - &lt;a href="https://www.infoq.com/presentations/netflix-devops/"&gt;on being a full-cycle developer&lt;/a&gt; and the its
implications. 
&lt;/p&gt;</description><category>dev</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-the-full-cycle-development-model/</guid><pubDate>Fri, 22 Oct 2021 15:46:00 GMT</pubDate></item><item><title>Gradle</title><link>https://marcohassan.github.io/bits-of-experience/posts/gradle/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So in this post I will make some notes on Gradle.
&lt;/p&gt;

&lt;p&gt;
I could theoretically take it as a black box at work and do my work
with the current configuration.
&lt;/p&gt;

&lt;p&gt;
I prefer to invest some time to understand how it works under the
hood. This will allow me more flexibility in the future. Moreover, it
will allow me to streamline my workflow in emacs once I have a more
profund understanding of it.
&lt;/p&gt;

&lt;p&gt;
These notes are based on the book &lt;a href="https://www.amazon.com/Gradle-Action-Benjamin-Muschko/dp/1617291307"&gt;gradle in action&lt;/a&gt;. Interesting is
that this book works with Groovy, which is apparently a more flexible
Java that introduce some of the concepts of dynamic programming
languages. Look at the &lt;a href="https://www.bbvaapimarket.com/en/api-world/why-groovy-gaining-popularity-among-java-developers/"&gt;following entry&lt;/a&gt; in this sense. I must say that
I can well understand why Python is gaining so much traction over more
heavy languages as Java. It is not simply a thing about the learning
curve. I think that Java with its structured type-safe and OOP
appraoch is more solid than Python for larger system. I see the point
for using it at work. The only thing is that the developing experience
is slower. As you have to compile the entire code before running it,
you cannot develop on the fly and integrate the changes in the more
structured project as you used to do in interpreted languages.
&lt;/p&gt;

&lt;p&gt;
Anyways, back to the book. Note that the book is very exhaustive.
Through it you will manage to get a broad overview on the topic and
you will even get to the point of continous integration and continouos
deployment.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/gradle/"&gt;Read more…&lt;/a&gt; (26 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/gradle/</guid><pubDate>Wed, 20 Oct 2021 07:18:25 GMT</pubDate></item><item><title>Git-Flow</title><link>https://marcohassan.github.io/bits-of-experience/posts/git-flow/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So brief entry on git-flow. 
&lt;/p&gt;

&lt;p&gt;
I am still in the phase where I have to set up my workflow properly,
such that order will reign and that chaos will come to hunt me down in
a couple of months/years. That standard looks promising. It is nothing
too far to what you used to do before. However, it is a framework used
in many enterprises so that it is good to stick to it. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/git-flow/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://marcohassan.github.io/bits-of-experience/posts/git-flow/</guid><pubDate>Thu, 14 Oct 2021 15:19:38 GMT</pubDate></item><item><title>To UML and Round-Trip-Engineering</title><link>https://marcohassan.github.io/bits-of-experience/posts/to-uml-and-round-trip-engineering/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
The more I work on this project, the more sure I get. You need a
proper way to document your code structure. To jump into the source
base is otherwise extremly hard for freshies like me. On the top of it
given the amount of packages we need to maintain and expand I highly
doubt that it is efficient to not have such documentation. The time it
costs to go back and understand the general structure of the project,
even for the lead developer of the project is simply to high.
&lt;/p&gt;

&lt;p&gt;
On the top of it, even a relative fresher into OOP as me, could find
some fundamental holes in the program logic here and there, in the
code base of a project. I must say that the developement of the
project is still ongoing, so I must check with the colleagues if they
are aware of such holes. In any case, I am pretty much sure that parts
of the fundamental holes result by a lack of high-level meta-overview
of the classes and interdependencies. Such holes may easily evolve in
such larger projects, that you touch across longer time horizons
without having the clear structure all of the time in your mind.
&lt;/p&gt;

&lt;p&gt;
If you are missing the macro at some point the micro will reign and
the micro is usually nasty. The macro should lead your way of project
understanding. The micro should be just a modular low-level
intervention dictated by the macro.
&lt;/p&gt;

&lt;p&gt;
Recall this. And work in such a way, otherwise things will come to
hunt back to you and your peace in future. 
&lt;/p&gt;

&lt;p&gt;
In this sense I started quickly to explore for a couple of hours some
UML tools and their integration with the eclipse IDE.
&lt;/p&gt;

&lt;p&gt;
Here some notes. I hope that in this sense I will have a proper
workflow in this dimension in the next couple of months.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/to-uml-and-round-trip-engineering/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>software-engineering</category><category>uml</category><guid>https://marcohassan.github.io/bits-of-experience/posts/to-uml-and-round-trip-engineering/</guid><pubDate>Thu, 14 Oct 2021 07:55:33 GMT</pubDate></item><item><title>Some Thoughts on Microservices</title><link>https://marcohassan.github.io/bits-of-experience/posts/some-thoughts-on-microservices/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So this post is about the gist of an idea; an important idea.
&lt;/p&gt;

&lt;p&gt;
So basically at IBM you got all of that theoretical education about
how to properly structure application, code, distribute etc.
&lt;/p&gt;

&lt;p&gt;
The issue there was that by just working in the new way of doing
things you were sometimes missing and not realizing the benefit of
doing things as they were prescribed. And a bit of dark side, is
necessary to put things into context and imporve your style. There,
when working in your projects you mostly had a green field and you
directly started implementing things in cloud-native way. Programming
via microservices and exposing all of the logic via rest-APIs.
&lt;/p&gt;

&lt;p&gt;
Now working on a big code base with quite some legacy code you can
even better appreciate the new paradigm shift in IT.
&lt;/p&gt;

&lt;p&gt;
I argue in this post, that the benefit of working through
microservices is not simply at the level of deployment, scalability,
availability and all of these dimensions. In contrast, I argue that
one of the biggest benefit an individual has to price in is the
benefit the modular structure of the approach imposes on the
developer.
&lt;/p&gt;

&lt;p&gt;
That said it is all about trade-offs and such a migration costs
time. For a team acting under pressure like ours that is not that
trivial. The overhead of system-management will be there as well
outlined in &lt;a href="https://luminousmen.com/post/thoughts-on-microservices"&gt;such a post&lt;/a&gt;. Maybe step by step…, when you write a new
application for some complete new business logic start to decouple it.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/some-thoughts-on-microservices/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Microservices</category><category>REST</category><guid>https://marcohassan.github.io/bits-of-experience/posts/some-thoughts-on-microservices/</guid><pubDate>Tue, 12 Oct 2021 08:08:26 GMT</pubDate></item><item><title>Nikola Port to Windows</title><link>https://marcohassan.github.io/bits-of-experience/posts/nikola%20port%20to%20windows/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Wow… everything is a fight on this new system.
&lt;/p&gt;

&lt;p&gt;
even with nikola there were some issues. first of all I was getting an
execute-error concerining some zipped-function defined in the markdown
file. the solution for it was to downgrade to a &lt;a href="https://forum.drawbot.com/topic/247/markdown-syntax-for-formattedstring"&gt;previous version of
markdown&lt;/a&gt;. Actually it turned out that was not that important in the
first place as the very root cause was not cause by some missing/malfunctioning
python packages but rather by the following.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/nikola%20port%20to%20windows/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://marcohassan.github.io/bits-of-experience/posts/nikola%20port%20to%20windows/</guid><pubDate>Thu, 07 Oct 2021 13:06:55 GMT</pubDate></item><item><title>Some Notes about UML and PlantUml</title><link>https://marcohassan.github.io/bits-of-experience/posts/some-notes-about-uml-and-plantuml/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
I already posted about the set-up of plantuml &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This is a very hand tool to manage complexity. In my new position
complexity is all around and over me.
&lt;/p&gt;

&lt;p&gt;
The system is big and you need to keep cold blood, strucutre and
overview. I think this will be the main challange. In this sense the
best way for me to operate will be to create good technical
documentation of the system that I can always refer to.
&lt;/p&gt;

&lt;p&gt;
Emacs is a very good friend in this sense. With all of the tags and
&lt;code&gt;TODO&lt;/code&gt;, &lt;code&gt;ISSUES&lt;/code&gt; workflow it will be possible for me to store the
general structure of the system and to keep a log and search across it
in order to manage such huge complexity.
&lt;/p&gt;

&lt;p&gt;
Such tagged documentation in combination with the possibility to
export my notes in very readable &lt;code&gt;html&lt;/code&gt; documents and the possibility
to write architectural diagrams via &lt;code&gt;plantuml&lt;/code&gt; will be my big ally in
this in new challenge.
&lt;/p&gt;

&lt;p&gt;
You can then store such &lt;code&gt;html&lt;/code&gt; in blob stores and make them available
across the team.
&lt;/p&gt;

&lt;p&gt;
Here some notes on resources you can refere to when writing your
architectural diagrams and general documentation for your projects.
&lt;/p&gt;

&lt;p&gt;
Find the official documentation &lt;a href="http://plantuml.com/en/guide"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/some-notes-about-uml-and-plantuml/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>IT Architecture</category><category>plantuml</category><category>uml</category><guid>https://marcohassan.github.io/bits-of-experience/posts/some-notes-about-uml-and-plantuml/</guid><pubDate>Fri, 01 Oct 2021 09:47:41 GMT</pubDate></item><item><title>Emacs as Java IDE via LSP</title><link>https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I will work quite a lot with Java in the next couple of years. So I
have to properly set up a strong IDE and workflow for working in it.
&lt;/p&gt;

&lt;p&gt;
I know that the majority of the people do not think much of emacs in
terms of IDE but since the language-server-protocol integrations I
believe they can be as strong as more mainstream IDEs such as Visual
Code out there. t.
&lt;/p&gt;

&lt;p&gt;
I even think that they can be better once you get into it
enough. After a bit of research I am quite sure about the fact.
&lt;/p&gt;

&lt;p&gt;
In fact this was my experience with Python and now the step is simply
to get ot that level of costumization with emacs. So here some notes
on my way of making emacs a top environment for java and improve my
productivity with it in the long-term.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/</guid><pubDate>Wed, 29 Sep 2021 16:03:15 GMT</pubDate></item></channel></rss>