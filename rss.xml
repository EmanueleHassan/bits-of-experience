<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience</title><link>https://marcohassan.github.io/bits-of-experience/</link><description>A readable view on my studying adventures.</description><atom:link href="https://marcohassan.github.io/bits-of-experience/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Wed, 18 May 2022 17:06:57 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>On Risk Valuation Methods</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-risk-valuation-methods/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;

img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So writing a quick notes about this as I see a lot of confusion in my
broader team around this topic and want to make sense in this space
and create a bit of order.
&lt;/p&gt;

&lt;p&gt;
So basically the topic is around &lt;i&gt;full revaluation methods vs. factor
based methods&lt;/i&gt;. This was a bit the topic of the talk of the morning.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Update:&lt;/i&gt; wow it works well the thing of checking where the pain
points are and exploring. Many questions suddenly open up. Many things
to verify and in general a better feeling of the thing. Time to take
off now. It's Tel-aviv time tomorrow.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-risk-valuation-methods/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>finance</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-risk-valuation-methods/</guid><pubDate>Wed, 18 May 2022 13:39:03 GMT</pubDate></item><item><title>what to migrate</title><link>https://marcohassan.github.io/bits-of-experience/posts/what-to-migrate/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So every day I am more close to a perfect set up on my local machine.
&lt;/p&gt;

&lt;p&gt;
The question is then how to make sure that you have a smooth
transition in case you change your laptop.
&lt;/p&gt;

&lt;p&gt;
Sooner or later this will happen and I do not want to loose too much
time setting everything up properly again.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/what-to-migrate/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bePrepared</category><category>organisation</category><guid>https://marcohassan.github.io/bits-of-experience/posts/what-to-migrate/</guid><pubDate>Fri, 13 May 2022 13:10:22 GMT</pubDate></item><item><title>Python Testing</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-testing/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So you already worked with python testing frameworks.
&lt;/p&gt;

&lt;p&gt;
The set up was already in place back then.
&lt;/p&gt;

&lt;p&gt;
Now it is more than a year that I do not touch the thing and
everything is solidly gone.
&lt;/p&gt;

&lt;p&gt;
Luckily I have a repo on my Github with some structure of it.
&lt;/p&gt;

&lt;p&gt;
Will leverage that now, plus I will start to write some notes, such
that people that will have to collaborate with me can reference to
it.
&lt;/p&gt;

&lt;p&gt;
On the top of it, it will be useful for the future as well.
&lt;/p&gt;

&lt;p&gt;
Plus finally it is always nice to see the things in multiple
languages. It is always the same story. By adding pieces to the puzzle
the picture becomes systematically clearer not the opposite. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-testing/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>software-engineering</category><category>testing</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-testing/</guid><pubDate>Thu, 12 May 2022 11:35:32 GMT</pubDate></item><item><title>Emacs as SQL Client</title><link>https://marcohassan.github.io/bits-of-experience/posts/emacs-as-sql-client/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So now that I have both application languages covered by emacs and
properly set up with lsp it is time to start working on the DB in my
emacs.
&lt;/p&gt;

&lt;p&gt;
This will help me to work via literate programming and have a very
well documented space where to work. On the top of it is nice cause
you can checkout everything properly in git, leverage magit,
projectile, org-mode etc… The usual emacs power so to say. 
&lt;/p&gt;

&lt;p&gt;
In this sense I could already work through jupyter notebooks through
emacs-ein.
&lt;/p&gt;

&lt;p&gt;
You have already set up your connection to the DBs in the language.
&lt;/p&gt;

&lt;p&gt;
You can start working in there in order to explore and combine the
data etc. You can then leverage as well the pandas and other
functionalities in there.
&lt;/p&gt;

&lt;p&gt;
Note that this is also interesting as a working solution. Have to
double check that with Valerio but theoretically you can then generate
ipython notebook out of it and make them run with ADF for the periodic jobs.
&lt;/p&gt;

&lt;p&gt;
Otherwise as mentioned above the other solution is to properly tangle
everything and finally insert everything in scripts to run in your
webapps or wherever you want. 
&lt;/p&gt;

&lt;p&gt;
It would essentially break
&lt;/p&gt;

&lt;p&gt;
The other option is to work via sql client. In any case continue for a
bit to use Azure Management Studio, in such a way you will see what
are the features you are interested in over there etc. and it will
help you to properly set up a client interface with all of the
features you need. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/emacs-as-sql-client/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/emacs-as-sql-client/</guid><pubDate>Wed, 11 May 2022 14:56:33 GMT</pubDate></item><item><title>SQL Alchemy</title><link>https://marcohassan.github.io/bits-of-experience/posts/sql-alchemy/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So basically I am starting to leverage the correct stack in this
field.
&lt;/p&gt;

&lt;p&gt;
This will help me to properly and quickly navigate the data.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/sql-alchemy/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Databases</category><category>Python</category><category>sql</category><guid>https://marcohassan.github.io/bits-of-experience/posts/sql-alchemy/</guid><pubDate>Wed, 11 May 2022 07:57:08 GMT</pubDate></item><item><title>Celebrating an Emacs Transition</title><link>https://marcohassan.github.io/bits-of-experience/posts/celebrating-an-emacs-transition/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
Nothing big - sometimes you just have to celebrate.
&lt;/p&gt;

&lt;p&gt;
My journey to a proper lsp-java set up on my emacs is complete.
&lt;/p&gt;

&lt;p&gt;
Will finally be able to just live in my emacs during my job.
&lt;/p&gt;

&lt;p&gt;
Ready to double down now.
&lt;/p&gt;

&lt;img src="https://marcohassan.github.io/bits-of-experience/images/victory_smell.gif" class="center"&gt;

&lt;p&gt;
You can find some more notes &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/"&gt;here&lt;/a&gt;.
&lt;/p&gt;</description><guid>https://marcohassan.github.io/bits-of-experience/posts/celebrating-an-emacs-transition/</guid><pubDate>Mon, 02 May 2022 14:46:03 GMT</pubDate></item><item><title>GUnicorn Deployment Options</title><link>https://marcohassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;

img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So basically this is closing the circle. With this post you should
gain the final understanding of the proper way of deploying a python
application in production, meaning it should give you a flavour of how
possible configurations settings that will affect the number of
requests that your application can handle as well your hardware
resources utilization.
&lt;/p&gt;

&lt;p&gt;
So basically this post touches upon the topic of workers, threads
etc. and the way to configure everything. It is good to understand
this in the context of &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;this post&lt;/a&gt; as well.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>Python</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/</guid><pubDate>Mon, 25 Apr 2022 09:16:23 GMT</pubDate></item><item><title>Load Testing 101</title><link>https://marcohassan.github.io/bits-of-experience/posts/load-testing-101/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So basically you have your PoC concept for the solution right now.
I stress that it is a PoC. Have to take some time to fix some
architectural components that I have in mind. 
&lt;/p&gt;

&lt;p&gt;
There are still a couple of things I have to sort out at conceptual
level.
&lt;/p&gt;

&lt;p&gt;
These belong more to the SRE field but, well you know, here it's a
special breed of a team. You have to deal with everything by your own.
&lt;/p&gt;

&lt;p&gt;
So the thing is that I have now a multi-threaded PoC performing the
solution. I want to test now the threading component and to test
different gunicorn webserver settings.
&lt;/p&gt;

&lt;p&gt;
In the specific I want to stress the system and see how it performs,
meaning how many threads is a good number of threads and when the
performance starts to go bust.
&lt;/p&gt;

&lt;p&gt;
For this I am starting to dig into load testing tools.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/load-testing-101/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>load</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/load-testing-101/</guid><pubDate>Thu, 21 Apr 2022 10:12:00 GMT</pubDate></item><item><title>Asynchronous Schema in Python</title><link>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This post briefly summarizes the learnings from this &lt;a href="https://realpython.com/python-async-features/#reader-comments"&gt;other post&lt;/a&gt;. Read
it if you have time before reading this, as I intend to keep this
quite short and juicy.  
&lt;/p&gt;

&lt;p&gt;
I really liked that post, it did give me some overview of some new
methods in python I was not aware of.
&lt;/p&gt;

&lt;p&gt;
Get familiar with the terms in the article. Albeit these article are
101, the terms are pretty much in line with the wider literature.
&lt;/p&gt;

&lt;p&gt;
Note that this post sum-up is basically about asynchronous programming
via &lt;a href="https://en.wikipedia.org/wiki/Cooperative_multitasking"&gt;cooperative multitasking&lt;/a&gt;. This is in contrast to &lt;a href="https://www.techtarget.com/whatis/definition/preemptive-multitasking#:~:text=Preemptive%20multitasking%20is%20task%20in,another%20task%20is%20called%20preempting."&gt;preemptive
multitasking&lt;/a&gt; which is used by OS-level threading mechanism as done via
the &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;Threading&lt;/a&gt; module in Python.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/</guid><pubDate>Mon, 18 Apr 2022 06:58:20 GMT</pubDate></item><item><title>Proper REST API</title><link>https://marcohassan.github.io/bits-of-experience/posts/proper-rest-api/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So starting to dig a little bit deeper into the way to properly write
your APIs.
&lt;/p&gt;

&lt;p&gt;
After the OpenAPI specifications and the integration with Swagger,
there is the component of hypermedia.
&lt;/p&gt;

&lt;p&gt;
I like this added layer as it will allow you to very solidly program
your APIs and produce and consume them in a very programmatic way.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/proper-rest-api/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://marcohassan.github.io/bits-of-experience/posts/proper-rest-api/</guid><pubDate>Fri, 15 Apr 2022 17:29:19 GMT</pubDate></item></channel></rss>