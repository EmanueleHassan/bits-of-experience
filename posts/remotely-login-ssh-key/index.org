#+BEGIN_COMMENT
.. title: Remotely Login - SSH Key
.. slug: remotely-login-ssh-key
.. date: 2020-05-01 11:32:46 UTC+02:00
.. tags: Unix
.. Category: 
.. description: 
.. type: text

#+END_COMMENT

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

This posts outlines the way to save ssh into a virtual machine using a
generated =SSH-key=. It is very much in the spirit of the ssh keys
registration for github, for which you are referred to [[https://marcohassan.github.io/bits-of-experience/posts/Multiple%20SSH%20Keys%20for%20different%20accounts%20on%20a%20single%20machine/][this post]].

{{{TEASER_END}}}

#+BEGIN_EXPORT html
<br>
#+END_EXPORT

* Set up

The set up basically consists of generating a new pairs of =SSH-keys=.

This can be done using the shell command ~ssh-keygen -t rsa~.

It is then necessary to choose a name recognizable for the key pair
and to enter it so that you do not overwrite your other ssh-keys.

You can then copy over the generated public key say =id_log_VM= with the
command: 

#+BEGIN_SRC sh
$ ssh-copy-id -p 3087 -i ~/.ssh/id_log_VM user@host
#+END_SRC

This will add your public key to the authorized_keys in the =.ssh=
repositories.

You might required to enter the VM password if there is one. Notice
that in the above I specified a specific port where the ssh server was
running. On the VM the SSH server was in fact running on non-standard
ports for security reasons. The idea is that if a malicious entity
might scan your host it might not be able to try to ssh into your
machine as the server is running on a non-standard port not known to
the malicious entity.

In general the port argument might however not be necessary.

Finally, from now on, you can on ssh into the VM using your ssh-keys
in the following ways:

#+begin_example
$ ssh -p 3087 -i ~/.ssh/id_log_VM root@snowball.ethz.ch
#+end_example

