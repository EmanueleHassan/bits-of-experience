#+BEGIN_COMMENT
.. title: Asynchronous Schema in Python
.. slug: asynchronous-schema-in-python
.. date: 2022-04-18 08:58:20 UTC+02:00
.. tags: Python, software-engineering
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT

This post briefly summarizes the learnings from this [[https://realpython.com/python-async-features/#reader-comments][other post]]. Read
it if you have time before reading this, as I intend to keep this
quite short and juicy.  

I really liked that post, it did give me some overview of some new
methods in python I was not aware of.

Get familiar with the terms in the article. Albeit these article are
101, the terms are pretty much in line with the wider literature.

Note that this post sum-up is basically about asynchronous programming
via [[https://en.wikipedia.org/wiki/Cooperative_multitasking][cooperative multitasking]]. This is in contrast to [[https://www.techtarget.com/whatis/definition/preemptive-multitasking#:~:text=Preemptive%20multitasking%20is%20task%20in,another%20task%20is%20called%20preempting.][preemptive
multitasking]] which is used by OS-level threading mechanism as done via
the [[https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/][Threading]] module in Python.

{{{TEASER_END}}}

So after reading a little bit it, I think that all of the methods
presented here are nice tricks that can solve corner situations that
are not too complex. I still think that if you properly manage
multi-threading programming you would still come out with the best set
of modeling possibilities. This at the expense of increased complexity.

The methods described here are useful though, cause you can tactically
use them here and there for quick strategic wins in some cases. In
general a good modeling possibility that is good to keep in the back
of the mind. 

** yield/next Operator

   Check this snippet

   #+BEGIN_SRC python
import queue

def task(name, queue):
    while not queue.empty():
        count = queue.get()
        total = 0
        print(f"Task {name} running")
        for x in range(count):
            total += 1
            yield # Note this method. No need to import. 
            print(f"Task {name} total: {total}")

def main():
    """
    This is the main entry point for the program
    """

    work_queue = queue.Queue()

    for work in [15, 10, 5, 2]:
        work_queue.put(work)

    tasks = [task("One", work_queue), task("Two", work_queue)]

    done = False
    while not done:
        for t in tasks:
            try:
                next(t) # Next - second important piece of the cake.
            except StopIteration:
                tasks.remove(t)
            if len(tasks) == 0:
                done = True

if __name__ == "__main__":
    main()
   #+END_SRC

   So understand the =yield/next= bits above.

   #+begin_quote
The yield statement turns =task()= into a /generator/.

A generator function is called just like any other function in Python,
but when the *yield statement is executed*, *control is returned to the
caller of the function*.

This is essentially a *context switch*, as control moves from the
generator function to the caller.

The interesting part is that *control can be given back* to the
generator function by calling =next()= *on the generator*.

This is a context switch back to the generator function, which *picks
up execution with all function variables* that were defined before the
yield still intact.
   #+end_quote

   *Note* that this is the big difference with multi-threading. You
   are in control and know when the control switch happens.
   
** asyncio

   This is solid module that enables you to perform single threaded
   asynchronous programming.

   Asynchoronous programming is managed through the event loop. You
   have a lot of notes about it in your notes by now.

   In general I like this explaination a lot. Was a presentation abuot
   Javascript asynchronous programming, but this is the general logic
   and it helps to fix the concept in your memory.

   #+Begin_export html
<style>
.container {
 position: relative;
 left: 15%;
 margin-top: 60px;
 margin-bottom: 60px;
 width: 70%;
 overflow: hidden;
 padding-top: 56.25%; /* 16:9 Aspect Ratio */
 display:block;
 overflow-y: hidden;
}

.responsive-iframe {
 position: absolute;
 top: 0;
 left: 0;
 bottom: 0;
 right: 0;
 width: 100%;
 height: 100%;
 border: none;
 display:block;
 overflow-y: hidden;
}
</style>

<div class="container"> 
 <iframe class="responsive-iframe" src="https://www.youtube.com/embed/8aGhZQkoFbQ" frameborder="0" allowfullscreen;> </iframe>
</div>
   #+end_export

   Then in such a module you have a lot of methods that will start a
   task and return to the event loop as long as they are idly waiting
   for an event that would allow the task to continue processing.

** asyncio.http

   This is a module that allows the possibility of making asynchronous
   http requests.

   Meaning you make a request but you do not block the main thread
   until you get an answer.

   You rather pass the ball to the event loop in such a way and you
   just will come back to the request via context switch when the
   response arrived.

   You can see [[https://realpython.com/python-async-features/#reader-comments][here]] a 101 example of working with it vs. synchronous
   /blocking/ http requests.

   Note that the longer your request is the better it is to work
   through such framework.

   The only issue is that even with this asynchoronous component you
   do not solve the issue of timeouts. You can see how to tune
   client-side timeout in python [[https://docs.python-requests.org/en/master/user/advanced/#timeouts][here]]. Recall that it is a best
   practice to attach such timeouts to the requests.

   For real longer running jobs - it is better to use *[[https://docs.python-requests.org/en/master/user/advanced/#streaming-requests][http streaming]]*
   or *websockets*.

   Cause I might have longer running jobs and have to see if this
   could be a solution or if it is rather better to work with
   multi-threading as in the solution I already developed.

   Explore this more in any case as I am sure that this will be quite
   needed in the times to come. 

** The bonus section

   Check at [[https://iximiuz.com/en/posts/flask-gevent-tutorial/][this]]. Very funny dude. Posting with humour. 

   Quite fun.

   You can read that article it is well done and you can dig more into
   gevent should you ever be interested in it. 
   
** WSGI Workers

   Note that for these different types of programming styles you will
   need different types of workers.

   You can read about the available workers [[https://docs.gunicorn.org/en/stable/design.html#asyncio-workers][here]]. 



