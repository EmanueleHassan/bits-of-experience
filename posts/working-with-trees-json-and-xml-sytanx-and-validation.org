#+BEGIN_COMMENT
.. title: Working with Trees - Json And XML Sytanx and Validation
.. slug: working-with-trees-json-and-xml-sytanx-and-validation
.. date: 2020-06-25 10:10:01 UTC+02:00
.. tags: Big Data
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT

#+begin_export html
<style>
img {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
</style>
#+end_export

This posts goes over the syntax of XML and Json; two of the most
widely used formats for storing data in tree form. 

It also goes over the validation of the data in the two
formats. Recall that today other formats are more used in the Big Data
world. Think for instance at =parquet=. With a basic understanding of
the formats above it will however be easy for you to get on going with
the other formats.

{{{TEASER_END}}}

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

* Well-formed vs. Valid Data Entries

First of all it is important to understand the difference between a
/well-formed/ document and a /valid/ document.

Both Json and XML have a syntax that we will shortly explore. A
/well-formed/ document is a document that respects such syntax.

On top of it, once you ingest data encoded and saved through the
json/XML syntax in your data lake you might for instance add *ex-post*
a validation layer on them. This will specify some format requirements
that you as a data engineer want to set on your data - for instance
there must be a leaf "robert" -.

Such validation is then applied on your data and you might have
compliant data entries with your validation policy - i.e. valid
entries - or non-compliant data entries - i.e. non-valid entries
-. However, this has nothing to do with whether a data entry is
well-formed or not. A data entry might be well-formed (in terms of
json/XML syntax), but not compliant as not respecting your validations
schema. 

Always recall the following validation pipeline:

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/Bildschirmfoto_2020-06-25_um_12.50.38.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

Notice, that interesting in the Big Data World and NoSQL world the
paradigm is in sharp contrast to the SQL world.
There you have first to specify your validation schema and just after
can you populate your tables. Here it is the exact opposite. You first
save your data and populate your data lakes. You then validate your
data. 

#+BEGIN_EXPORT html
<br>
#+END_EXPORT

* Json  

** Syntax

*** On the atomic types

 There are 6 different building units in Json. 

  - Strings

    This are always double quoted ="string"=. 

    For escaping in a string you would use the backlash command, for
    instance  "\n". For escaping with unicode "\u0111".

  - Numbers

    =3.145= with *no quotes*

    =-1.23E+5= scientific notation valid

  - Boolean 

    =true=; =false= -> no quotes and ~.lower ()~

  - Null

    =null= -> no quotes and ~.lower ()~

  - Array

    =[2, "hello", true, null]= -> can have multiple different data types
    within it.

  - Object

    ={"foo": "romeo", "bar": "er mejo der Colosseo"}=; this is
    essentially a key-value pair store.

    Given its key-value pair idea, and the one of hash-tables which
    backs json objects it is not possible to have multiple *equal* keys
    but they rather have to be *unique*.

    Moreover, the syntax of object requires the keys to be *double
    quoted*.

*** On other Syntax characteristics

 Notice that both in Json and in XML you do have to have a root
 element. In 

  - On different levels 

    This practically means that you cannot have the following json
    document as a well-formed document.

    #+begin_src json
  {
	"burger": {
		"extraIngredients": null,
		"bun": [
			"pickles",
			"cheese",
			"patty"
		]
	}
   }, {
	   "burger2": {
		   "extraIngredients": null,
		   "bun": [
			   "pickles",
			   "cheese",
			   "ham"
		   ]
	   }
   }
    #+end_src

    You would rather have to enter a root element containing the two in
    an array

    #+begin_src json
    {
	"burger_offer": [
	    {
		"burger1": {
		    "extraIngredients": null,
		    "bun": [
			"pickles",
			"cheese",
			"patty"
		    ]
		}
	    },
	    {
		"burger2": {
		    "extraIngredients": null,
		    "bun": [
			"pickles",
			"cheese",
			"ham"
		    ]
		}
	    }
	]
    }
    #+end_src

    Or alternatively you would have a root element containing all of
    the multiple key-value paris as different objects

    #+begin_src json
    {
	"burger1": {
	    "extraIngredients": null,
	    "bun": [
		"pickles",
		"cheese",
		"patty"
	    ]
	},
	"burger2": {
	    "extraIngredients": null,
	    "bun": [
		"pickles",
		"cheese",
		"ham"
	    ]
	}
    }
    #+end_src


 Given the syntax above it is clear that it is easy to break out from
 first normal form and have nested tables:

 #+BEGIN_EXPORT html
 <br>
 <br>
 #+END_EXPORT

 #+begin_export html
  <img width="70%" height="100%" src="../../images/Bildschirmfoto_2020-06-25_um_11.02.26.png" class="center">
 #+end_export

 #+BEGIN_EXPORT html
 <br>
 <br>
 <br>
 #+END_EXPORT


** Json Validation

   Here I use the python's =jsonschema= package to validate json
   objects. Notice that other options are possible

   #+BEGIN_SRC python :session valdidate_json
import json                                                                    
from jsonschema import validate
#+END_SRC

#+RESULTS:

Next, you define the schema you want to apply to your json document.

#+BEGIN_SRC python :session valdidate_json
schema={'type': 'object', 
        'properties': {'target': {'type': 'string'},
                       'choices': {'type': 'array', 
                                   'items': {'type': 'string'}},\
                       'guess': {'type': 'string'}, 
                       'date': {'type': 'string'}, 
                       'country': {'type': 'string'}, 
                       'sample': {'type': 'string'}} ,\
        'required': ['target', 'choices', 
                     'date', 'country', 'sample']
}
#+END_SRC

#+RESULTS:

Define an array of JSON objects to validate; i.e. your json document.

#+BEGIN_SRC python :session valdidate_json :results output
Records=[{'guess': 'Norwegian', 'target': 'Norwegian', 'country': 'AU', 'choices': ['Maori', 'Mandarin', 'Norwegian', 'Tongan'], 'sample': '48f9c924e0d98c959d8a6f1862b3ce9a', 'date': '2013-08-19'},
{'guess': 'Dinka', 'target': 'Dinka', 'country': 'AU', 'choices': ['Danish', 'Dinka', 'Khmer', 'Lao'], 'sample': 'af5e8f27cef9e689a070b8814dcc02c3', 'date': '2013-08-19'},
{'guess': 'Turkish', 'target': 'Samoan', 'country': 'AU', 'choices': ['German', 'Hungarian', 'Samoan', 'Turkish'], 'sample': '509c36eb58dbce009ccf93f375358d53', 'date': '2013-08-19'},
{'guess': 'Latvian', 'target': 'Somali', 'country': 'AU', 'choices': ['Danish', 'Korean', 'Latvian', 'Somali'], 'sample': 'a505ab771ae7c32744ad31b3051b8ee9', 'date': '2013-08-19'},
{'guess': 'Japanese', 'target': 'Japanese', 'country': 'AU', 'choices': ['Bangla', 'Dinka', 'Italian', 'Japanese'], 'sample': '3569611136ea04bab18a0cd605ced358', 'date': '2013-08-19'},
{'guess': 'Maltese', 'target': 'Turkish', 'country': 'AU', 'choices': ['Hindi', 'Lao', 'Maltese', 'Turkish'], 'sample': 'af0e25c7637fb0dcdc56fac6d49aa55e', 'date': '2013-08-19'},
{'guess': 'French', 'target': 'French', 'country': 'AU', 'choices': ['Burmese', 'Danish', 'French', 'Swedish'], 'sample': '92f9e1c17e6df988780527341fdb471d', 'date': '2013-08-19'},
{'guess': 'German', 'target': 'German', 'country': 'AU', 'choices': ['German', 'Serbian', 'Swedish', 'Vietnamese'], 'sample': 'e77d97b712adffc39e531e20237a5589', 'date': '2013-08-19'},
{'guess': 'Spanish', 'target': 'Spanish', 'country': 'AU', 'choices': ['Amharic', 'Czech', 'Sinhalese', 'Spanish'], 'sample': 'dc3ace49393de518e87d4f8d3ae8d9db', 'date': '2013-08-19'},
{'guess': 'Romanian', 'target': 'Romanian', 'country': 'AU', 'choices': ['Estonian', 'Japanese', 'Lao', 'Romanian'], 'sample': '901fc45cba5245f21deaaca3966f825b', 'date': '2013-08-19'}]
#+END_SRC

#+RESULTS:

Validate the Json objects with the "validate" function (if no exceptions
are raised, the objects are valid).

#+BEGIN_SRC python :session valdidate_json :results output
for line in Records:
    validate(instance=line,schema=schema)
print ("Validation took place. No Error was found. The document is valid.")
#+END_SRC

#+RESULTS:
: Validation took place. No Error was found. The document is valid.

Consider now the object 

#+BEGIN_SRC python :session valdidate_json
obj={'guess': 'Dinka', 'target': 'Dinka', 
     'country': 'AU', 'choices': 'Dinka', 
     'sample': 'af5e8f27cef9e689a070b8814dcc02c3', 
     'date': '2013-08-19'}
#+END_SRC

#+RESULTS:

It is clear that choices above does not respect your validation schema
as that it is not an array.

In such a case we expect to observe an error

#+begin_src python :session valdidate_json :results output
validate(instance=obj,schema=schema)
#+end_src

#+RESULTS:
#+begin_example
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/marcohassan/Desktop/python_venv/TreeSchutz/lib/python3.7/site-packages/jsonschema/validators.py", line 934, in validate
    raise error
jsonschema.exceptions.ValidationError: 'Dinka' is not of type 'array'

Failed validating 'type' in schema['properties']['choices']:
    {'items': {'type': 'string'}, 'type': 'array'}

On instance['choices']:
    'Dinka'
#+end_example

This is a very minimum example for json validation. For more
information on it google it. A good starting point is [[https://json-schema.org/understanding-json-schema/][this one]].

* XML

XML document involves two parts – prolog and body. The prolog part of
the XML consist of administrative metadata such as XML declaration,
optional processing instruction, Document type declaration and
comments. The body part is partitioned into two parts – structural and
the content (Present in the plain text).

** XML Syntax

*** On the atomic types


   There are more building units in XML in comparison to Json. 

   - elements

     an element is composed by an starting and ending tag =<tag>=. 

     For instance an element might be:

     #+BEGIN_SRC nxml
     <my_first_element>
     .... some nested XML ...
     </my_first_element>
     #+END_SRC

     This is the same as HTML in fact both are markup languages. 

     Moreover notice that you might have empty elements
     =<startandendelement/>=

     + On tags names

       1. =<_bar/>= 

	  is correct. You can start a tag with an underscore.

       2. =<Xmlelement/>=

	  is correct. You can start a tag with xml. It cannot be
          simply =<xml>=

       3. =<Foo/>=

	  correct. you can start a tag with a capital letter.

       4. =<foo123/>=

	  correct. you can have numbers in name tags. you cannot however
	  start a tag name with a number.

       5. =<foo_123/>=

	  correct.

       6. =<foo-123/>=

	  correct.

       7. =<foo#123/>=

	  not correct. hashtag is not allowed in tag names. Notice moreover
	  that hashtags are used for escaping and inserting special
	  characters. You can find a list of possible characters under [[https://www.dvteclipse.com/documentation/svlinter/How_to_use_special_characters_in_XML.3F.html][this
	  link]].

	  Notice moreover, that also =&= are not allowed in XML tag names.
	  Many other characters not allowed such as =;=, =:=, =?=, =+=, =!=.

       8. =<foo.123/>=

	  correct. You cannot start the tag name with a =.=

       9. =<-123/>=

	  Not allowed. You could however start with an underscore. For
	  instance =_123= would be valid. In general you have always to start
	  with either a letter or an underscore.

       10. =<123foo/>=

	   Not allowed. Cannot start with a number.

       11. =<123/>=

	   Not allowed. Cannot be just numbers as you are in 10.

       12. =<doctype/>=

	   correct.

   - attributes

     these are *key-value pairs* specified in the =opening tag= of an
     element. 

     Think for instance at HMTL where you can specify =CSS= properites
     with ="height = 100%"=. 

     The concept is the same. The syntax different. Here you have

     #+BEGIN_SRC nxml
     <open_tag attribute = "nutella">
     .... some nested XML ...
     </open_tag>
     #+END_SRC

     Notice that the attribute key is *without* quotation marks. The
     value might be *double or single quoted*.

     Notice moreover that you cannot insert booleans or number as
     values. They should always be in double quotes. 

     Finally, notice that as quotes are delimiters of the attribute
     value you cannot have quotes inside a value written as such. You
     should rather escape them through the predefined entities below.

   - text

     goes within an element as plain text

     #+BEGIN_SRC nxml
     <my_first_element>
     Here you can enter your desired text in the way you want.
     </my_first_element>
     #+END_SRC

   - comments

     #+BEGIN_SRC nxml
     <!-- like this you enter comments -->
     <my_first_element>
     Here you can enter your desired text in the way you want.
     </my_first_element>
     #+END_SRC
     
   - specify xml verison and encoding

     #+BEGIN_SRC nxml
     <?xml version = "1.0" encoding = "UTF-8"?>
     <my_first_element>
     Here you can enter your desired text in the way you want.
     </my_first_element>
     #+END_SRC

   - predefined entities

     XML has only 5 predefined entities. Associate each escape code with the
     corresponding character. 

     1. =&lt;= "<"

     2. =&amp;= "&"

     3. =&gt;= ">"

     4. =&quot;= """

     5. =&apos;= "'"


*** On other Syntax characteristics 

   - on element levels
     
     As in Json an important aspect when it comes to syntax you cannot
     have more than one opening tag. In this sense the following entry
     would *not be well-formed*.

       #+begin_src nxml
       <Burger>
	   <Bun>
	       <Pickles/>
	       <Cheese/>
	       <Patty/>
	   </Bun>
       </Burger>
       <Cola>
	   <Sugar/>
	   <Water/>
       </Cola>
       <Fries kind="French"/>
       #+end_src

       Not valid. You cannot have multiple opening tags. 
       Correct version

       #+begin_src nxml
       <food>
	 <Burger>
	   <Bun>
	     <Pickles/>
	     <Cheese/>
	     <Patty/>
	   </Bun>
	 </Burger>
	 <Cola>
	   <Sugar/>
	   <Water/>
	 </Cola>
	 <Fries kind="French"/>
       </food>
       #+end_src

   - On the element nestedness

     Notice that an element can be nested into an element but cannot
     be nested in an element tag. 

     *Not valid*

     #+BEGIN_SRC nxml
       <food>
	 <Cola <sparkling/> >
	   <Sugar/>
	   <Water/>
	 </Cola>
	 <Fries kind="French"/>
       </food>
     #+END_SRC



   - Notice the escaping of greater and smaller than

     Important is to notice that you might well escape both the
     greater and less than symbols. This is because should you have
     them in text then your parser would start to do mess with the
     elements tags. In this sense you cannot have such symbols in the
     text, nor even in attributes values etc.

     In a similar way in a comment =--= is reserved.


 

** XML Validation

In the case of XML you generally create a single =XML document=
specifying the schema to apply to your =XML data document=. You would
then in fact work with two XML documents. 

To bind the two =XML documents= you would use:

- On the schema side:

#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema
 xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <!-- enter your schema here; for instance for foo-->
 <xs:element name = "foo" type = "xs:integer" />
</xs:schema>
#+END_SRC

Notice that "http://www.w3.org/2001/XMLSchema"  describes the XML
schema involving the built-in data types we will shortly see and the
=SimpleType= and =ComplexType= to create your customed schema. 

- On the document side

#+BEGIN_SRC nxml
<?xml version= "1.0" encoding = "UFT-8" ?>
<foo
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="schema.xsd">
  17 
</foo>
#+END_SRC


Notice that the above method you specify the schema for your document
by referring to the validation schema in the root element. Notice that
here you do not leverage Namespaces. You would have to do that for
larger projects. To keep your work structured.

Given such basics structure you have now to understand how to properly
specify the schema of your data. 

As said in the schema =XML doucment= you refer to the XML document
provided by the XML defined by the W3C foundation. 

There you have already a few built-in *simple types*:

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT


#+begin_export html
<style>
 {
  box-sizing: border-box;
}

.column {
  float: left;
  width: 50%;
  padding: 0px;
}

/* Clearfix (clear floats) */
.row::after {
  content: "";
  clear: both;
  display: table;
}
</style>

<div class="row">
  <div class="column">
    <img style="width:100%" src="../../images/Bildschirmfoto_2020-06-25_um_16.42.21.png">
  </div>
  <div class="column">
    <img style="width:100%" src="../../images/Bildschirmfoto_2020-06-25_um_16.42.46.png">
  </div>
</div>
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

An example of using such basic data types is the one above.

When such basic built-in data types do not suffice for your business
case you can specify your customized validation for elements. 

In this sense in XML you distinguish among:

- simpleType

- complexType

We will look at both in turn


*** simpleType

    This class is composed of

    + Restriction

    + Union

    + List

    Notice therefore that all refer to a single XML element and you
    specify the properties of it; i.e. the properites of the content
    within the tags *not the structure of the element in the
    tree*. This is in fact the task of the complexType we will see
    later. Moreover you cannot specify properties of
    *attributes*. simpleType cannot have any of these.

    Three examples for the above are


    + Restricting string of 3 letters

    #+BEGIN_SRC nxml
    <?xml version="1.0" encoding="UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:simpleType name="myFixedLengthString">
	<xs:restriction base="xs:string">
	  <xs:length value="3"/>
	</xs:restriction>
      </xs:simpleType>
      <xs:element name="foo" type="myFixedLengthString"/>
    </xs:schema>
    #+END_SRC

    #+BEGIN_SRC nxml
    <?xml version="1.0" encoding="UTF-8"?>
    <foo
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:noNamespaceSchemaLocation="schema.xsd">ZRH</foo>
    #+END_SRC

    + Specifying either a type or the other (= union)

    #+BEGIN_SRC nxml
    <?xml version="1.0" encoding="UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:simpleType name="myUnion">
        <xs:union memberTypes="xs:integer xs:boolean"/>
      </xs:simpleType>

      <xs:element name="foo" type="myUnion"/>
    </xs:schema>
    #+END_SRC

    #+BEGIN_SRC nxml
    <?xml version="1.0" encoding="UTF-8"?>
    <foo
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:noNamespaceSchemaLocation="schema.xsd">
    true
    </foo>
    #+END_SRC

    + Specify a list of strings

    #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:simpleType name="myList">
        <xs:list itemType="xs:string"/>
      </xs:simpleType>

      <xs:element name="foo" type="myList"/>
    </xs:schema>
    #+END_SRC

    #+BEGIN_SRC nxml
    <?xml version="1.0" encoding="UTF-8"?>
    <foo
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:noNamespaceSchemaLocation="schema.xsd">
    myfirst_element mysecond_element mythird_element 
    </foo>
    #+END_SRC


    Notice that the above are also simple Classes as them must act on
    the tree *end nodes*. It is not possible to apply them at higher
    levels in the tree as they would then involve other sub-elements
    and become complex. 

    In such a case you need to specify a complex data type as we will
    see next - i.e. the complex content / mixed content - type.


*** complexType

    This are used as said above for dealing with the case of
    specifying the form of elements that are not at the end of the
    tree hierarchy but rather stand on top of the tree. 

    Finally notice that only =elements= can have =complexType=,
    attributes always have =simpleType=. Recall the logic that with
    =complexType= you specify the properties that goes within the
    element. 


    The major types belonging to the class are:

    + Empty Content

      Here you specify that a particular element is empty

    + Simple Content

      Here you specify that the element cannot have nested elements
      
    + Complex Content

      Here you do not allow text for the element but rather a set of
      element children that goes deeper in the tree. You can specify
      which element children are allowed.

    + Mixed Content

      here you specify that the element might contain different data
      types: i.e. strings, further elements, integers etc.

    Examples:

   + Empty type

    #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="EmptyElement">
	<xs:sequence/>
      </xs:complexType>

      <xs:element name="foo" type="EmptyElement"/>
    </xs:schema>
    #+END_SRC

    #+BEGIN_SRC nxml
    <?xml version="1.0" encoding="UTF-8"?>
    <foo/>
    #+END_SRC

   + simple Content
     
     Recall that in simple Content you are not allowed to have
     children in your elements sequence. This is different for complex
     Content. You can just have text for an element. 

     #+BEGIN_SRC nxml
     <? xml version = "1.0" encoding = "UTF-8"?>
     <xs:schema
       xmlns:xs="http://www.w3.org/2001/XMLSchema">

       <xs:complexType name="JustElements">
	 <xs:simpleContent>
	   <xs:extension base = "xs:string"/>
	 </xs:simpleContent>
       </xs:complexType>

       <xs:element name="foo" type="JustElements"/>
     </xs:schema>
     #+END_SRC

     Notice that you always have to specify the extension of your
     =simpleContent= otherwise you get an error. It cannot be empty.

     Notice moreover that being it of =complexType= you might even
     specify the attribute there.
     
     #+BEGIN_SRC nxml
     <? xml version = "1.0" encoding = "UTF-8"?>
     <xs:schema
       xmlns:xs="http://www.w3.org/2001/XMLSchema">

       <xs:complexType name="JustElements">
	 <xs:simpleContent>
	   <xs:extension base = "xs:string">
	     <xs:attribute name="bar" type="xs:string" use = "required"/>
	   </xs:extension>
	 </xs:simpleContent>
       </xs:complexType>

       <xs:element name="foo" type="JustElements"/>
     </xs:schema>
     #+END_SRC

     Then the following document would be valid

     #+BEGIN_SRC nxml
      <foo bar = "jdfhakj adf">
      dlsaflk aldjfldaj alföjla
      </foo>
     #+END_SRC
     
   + complex Content

    #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="NestedElements">
	<xs:sequence>
	  <xs:element name= "bau"/>
	  <xs:element name= "miao"/>
	</xs:sequence>
      </xs:complexType>

      <xs:element name="foo" type="NestedElements"/>
    </xs:schema>
    #+END_SRC
    
    #+BEGIN_SRC nxml
    <?xml version="1.0" encoding="UTF-8"?>
    <foo>
      <bau/>
      <miao/>
    </foo>
    #+END_SRC
    
    Notice that with the above you specify that foo is a sequence of
    elements. You cannot have text beside the elements. In contrast to
    simple Content you *can have* nested elements.

    However within each of the elements of the sequence you can do
    pretty much whatever you want as you did not specify any
    particular validation form for them. For instance you can specify 

    #+BEGIN_SRC nxml
    <?xml version="1.0" encoding="UTF-8"?>
    <foo>
      <bau>
          bulldog
          <ricky/>
      </bau>
      <miao/>
    </foo>
    #+END_SRC

    It is now clear given the previous discussion that you can combine
    =simpleType= and =complexType= to make more specific validation
    schema. For instance you might set:

    #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="NestedElements">
	<xs:sequence>
	  <xs:element name= "bau"/>
	  <xs:element name= "miao">
	     <xs:simpleType>
	       <xs:restriction base = "xs:string">
		 <xs:length value= "3"/>
	       </xs:restriction>
	     </xs:simpleType>
	  </xs:element>
	</xs:sequence>
      </xs:complexType>

      <xs:element name="foo" type="NestedElements"/>
    </xs:schema>
    #+END_SRC

    #+BEGIN_SRC nxml
    <foo>
      <bau>
      </bau>
      <miao>ZRH</miao>
    </foo>
    #+END_SRC

    Notice moreover that white spaces count in the length so that
    while the above would be validated with the above schema the
    following would *not be valid*

    #+BEGIN_SRC nxml
    <foo>
      <bau>
      </bau>
      <miao>
      ZRH
      </miao>
    </foo>
    #+END_SRC

     Finally notice that with the schema above your are fixing the
     schema on which the child elements are allowed to
     appear. I.e. changing the order will result in a validation
     error. 

     To give flexibility to the order of the element children you
     might leverage the =<xs:all>= type defined in the XLS W3C
     schema. This tells the schema processor that each of the
     contained elements must appear once in the target document, but
     can appear in any order. 

     #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="NestedElements">
	<xs:all>
	  <xs:element name= "bau"/>
	  <xs:element name= "miao"/>
	</xs:all>
      </xs:complexType>

      <xs:element name="foo" type="NestedElements"/>
    </xs:schema>
     #+END_SRC

     Such that the following document would be valid.

     #+BEGIN_SRC nxml
     <foo>
       <miao/>
       <bau/>
     </foo>
     #+END_SRC

     In some cases, what is desired is that one and only one element
     appear from a collection of possibilities. The =xs:choice= element
     supports this.

     For instance in 

     #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="NestedElements">
	<xs:choice>
	  <xs:element name= "bau"/>
	  <xs:element name= "miao"/>
	</xs:choice>
      </xs:complexType>

      <xs:element name="foo" type="NestedElements"/>
    </xs:schema>
     #+END_SRC

     Like that you would have the following document to be valid:

     #+BEGIN_SRC nxml
     <foo>
       <miao/>
     </foo>
     #+END_SRC

     Notice however that a document involving all of the elements
     would *not be valid*:

     #+BEGIN_SRC nxml
     <foo>
       <miao/>
       <bau/>
     </foo>
     #+END_SRC

   + Mixed Content

     As said this is especially important when you want to mix text
     and elements within a element. It extends the complex Content in
     this sense.

     #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="NestedMixedElements" mixed = "true">
	<xs:sequence>
	  <xs:element name= "bau"/>
	  <xs:element name= "miao"/>
	</xs:sequence>
      </xs:complexType>

      <xs:element name="foo" type="NestedMixedElements"/>
    </xs:schema>
     #+END_SRC

     Then the following document would now be accepted

     #+BEGIN_SRC nxml
     <foo>
       genZ
       <bau/>
       <miao/>
     </foo>
     #+END_SRC


*** On *attributes in complexType*.

    Finally notice that for =attributes= it is different. When you
    specify an attribute you might use it or not.

     #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="JustElements">
	<xs:sequence>
	  <xs:element name= "bau"/>
	  <xs:element name= "miao">
	    <xs:complexType>
              <xs:attribute name="colour"/>
            </xs:complexType>
	  </xs:element>
	</xs:sequence>
      </xs:complexType>

      <xs:element name="foo" type="JustElements"/>
    </xs:schema>
     #+END_SRC

     So both of the following would be  fine

     #+BEGIN_SRC nxml
    <foo>
      <bau/>
      <miao/>
    </foo>
    #+END_SRC


     #+BEGIN_SRC nxml
    <foo>
      <bau/>
      <miao colour = "brown"/>
    </foo>
    #+END_SRC


    In order to specify that an attribute is strictly required you can
    use =use = "required"= as in the next example:

    #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="JustElements">
	<xs:sequence>
	  <xs:element name= "bau"/>
	  <xs:element name= "miao">
	    <xs:complexType>
              <xs:attribute name="colour" use = "required" />
            </xs:complexType>
	  </xs:element>
	</xs:sequence>
      </xs:complexType>

      <xs:element name="foo" type="JustElements"/>
    </xs:schema>
    #+END_SRC

    Then the following document would not be valid

    #+BEGIN_SRC nxml
    <foo>
      <bau/>
      <miao/>
    </foo>
    #+END_SRC





*** On the way of naming and assigning user defined Types

    Finally notice that there two methods for assigning a user defined
    type. One is by naming the created =simpleType= and =complexType=
    and specifying an element must fulfill the properties by referring
    to the assigned name in the =type= of the element; see for
    instance.

    This is what was done the most of the time. See for instance in

    #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">
      
      <!-- here you specify the new user defined type -->
      <xs:complexType name="JustElements">
	<xs:sequence>
	  <xs:element name= "bau"/>
	  <xs:element name= "miao"/>
	</xs:sequence>
      </xs:complexType>

      <!-- here you specify the type for your element -->
      <xs:element name="foo" type="JustElements"/> 
    </xs:schema>
    #+END_SRC

    A second option is to specify the type directly within the element
    without using a name. This was for instance used for the =miao=
    element above.


    #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="JustElements">
	<xs:sequence>
	  <xs:element name= "bau"/>
	  <xs:element name= "miao">
	     <xs:simpleType>
	       <xs:restriction base = "xs:string">
		 <xs:length value= "3"/>
	       </xs:restriction>
	     </xs:simpleType>
	  </xs:element>
	</xs:sequence>
      </xs:complexType>

      <xs:element name="foo" type="JustElements"/>
    </xs:schema>
    #+END_SRC


    Notice finally that keeping consistency and using just *named*
    calsses you could write the above in the following way:

    #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:complexType name="JustElements">
	<xs:sequence>
	  <xs:element name= "bau"/>
	  <xs:element name= "miao" type = "MiaoInt" />
	</xs:sequence>
      </xs:complexType>

      <xs:simpleType name = "MiaoInt">
	<xs:restriction base = "xs:string">
	  <xs:length value= "3"/>
	</xs:restriction>
      </xs:simpleType>

      <xs:element name="foo" type="JustElements"/>

    </xs:schema>
    
    #+END_SRC

    Finally using the other option you can just *specify all of the
    types* directly without naming them and assigning them.

    #+BEGIN_SRC nxml
    <? xml version = "1.0" encoding = "UTF-8"?>
    <xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:element name="foo">
	<xs:complexType>
	  <xs:sequence>
	    <xs:element name= "bau"/>
	    <xs:element name= "miao">
	       <xs:simpleType>
		 <xs:restriction base = "xs:string">
		   <xs:length value= "3"/>
		 </xs:restriction>
	       </xs:simpleType>
	    </xs:element>
	  </xs:sequence>
	</xs:complexType>
      </xs:element>
    </xs:schema>
    #+END_SRC
    


    


    
