#+BEGIN_COMMENT
.. title: Python Visualization
.. slug: python-visualization
.. date: 2020-03-19 14:02:40 UTC+02:00
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text
.. status: 
#+END_COMMENT

#+begin_export html
<style>
img {
display: block;
margin-left: auto;
margin-right: auto;
}
</style>
#+end_export


Here some python visualization dummy scripts are saved

{{{TEASER_END}}}

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

* Data
   :properties:
   :header-args:ein-python: :session http://127.0.0.1:8888/visualization.ipynb  :results output
   :end:
   

#+NAME: 34EAA941-EAD4-468F-8FED-B9E16FDF0717
#+begin_src ein-python :results output
import matplotlib.pyplot as plt
%matplotlib inline 
%config InlineBackend.figure_format = 'png'
import numpy as np
#+end_src

#+NAME: F7E22CAC-CB72-4675-A4E3-E543629F59D9
#+begin_src ein-python :results output
N = 30
x_1 = np.random.randn(N) * 3
x_2 = np.random.randn(N) * 3 + 2
x_3 = np.random.randn(N) * 3 + -2
#+end_src

#+RESULTS: F7E22CAC-CB72-4675-A4E3-E543629F59D9

* Work with pandas
   :properties:
   :header-args:ein-python: :session http://127.0.0.1:8888/visualization.ipynb  :results output
   :end:

#+NAME: 75F79485-A875-4FE1-82A3-C97987A8104B
#+begin_src ein-python :results output
import pandas as pd
#+end_src

- create data from numpy matrix

#+NAME: B4B1951C-33E1-4583-BC59-8A5A1FD88259
#+begin_src ein-python :results output
mydat = pd.DataFrame (np.matrix ([x_1,x_2,x_3]).transpose ())
#+end_src

- create data from two numpy arrays

here you need to flatten the arrays first

#+begin_src ein-python :results output
X = 2 * np.random.rand(100,1)
y = 4 +3 * X+np.random.randn(100,1)

mydat = pd.DataFrame ({'x':X.flatten(), 'y': y.flatten()})
#+end_src

- describe the data

#+NAME: 62E7CBD5-4D53-4C5E-A1AC-70E42CBA1F0A
#+begin_src ein-python :results output
mydat.describe ()
#+end_src


- Set the name of the columns

#+NAME: DDDA7E5F-FC2A-4A7D-BC7B-D7CF473D3C49
#+begin_src ein-python :results output
mydat.columns = ["nomean", "posmean", "negmean"]
#+end_src

#+NAME: A30028B2-C614-406C-AF97-2DF4F99E1648
#+begin_src ein-python :results output
mydat.columns
#+end_src

#+NAME: 665F633A-521D-4384-84FF-677EF7633056
#+begin_src ein-python :results file
plt.plot(mydat.nomean, c = "lightblue", ls = '--', marker = "o",
         ms = 6, label ="nomean")
plt.plot(mydat.posmean, c = "darkorange", ls = '--', marker = "s",
         ms = 6, label ="posmean") # ms = marker size
plt.plot(mydat.negmean, c = "lightgreen", ls = '--', marker = "^",
         ms = 6, label ="negmean")
plt.legend(loc = 'upper right',bbox_to_anchor = (1,1))
plt.xticks(list(range(20)), rotation = 'vertical') # sets the ticks on
                                                   # x-axis and puts
                                                   # them vertically.
#+end_src


- get the entry (x,y) in your relational table

#+NAME: D3530789-6ACE-490F-A62F-1F738ABE00D3
#+begin_src ein-python :results output
mydat.head (5)
#+end_src

#+NAME: E45EF453-DF18-4DA7-8510-1E6B2480F4A7
#+begin_src ein-python :results output
mydat.iloc[2,1]
#+end_src

- slicing the data

#+NAME: 392E582F-AFE3-4B9A-BF7A-18B9D55B15F6
#+begin_src ein-python :results output
mydat[0:4]
#+end_src

- get by column

#+NAME: 72EFF5A5-8589-4813-A918-91547491D259
#+begin_src ein-python :results output
mydat[['nomean', 'posmean']].head (3)
#+end_src

- get by row and column

#+NAME: D0ECAD01-5802-45DE-B009-8C0ED8926068
#+begin_src ein-python :results output
mydat[['nomean', 'posmean']][::2]
#+end_src

#+NAME: 7EE3C177-63AE-46F2-80AE-6FC33912E63E
#+begin_src ein-python :results output
print(mydat[['nomean', 'posmean']].iloc [0,1])
#+end_src

- new column

#+NAME: C7AEAA0C-FE4F-44F1-B4E2-941105BD1F9C
#+begin_src ein-python :results output
mydat['sum'] = mydat['nomean'] + mydat['posmean'] + mydat['negmean']
#+end_src

#+NAME: E676C563-E1E9-43EB-8C63-8EA4C417C995
#+begin_src ein-python :results output
mydat.columns
#+end_src

#+NAME: 74B65603-E9C1-4760-82AA-780263961A4C
#+begin_src ein-python :results output
mydat2 = mydat
mydat.head ()
#+end_src

- drop a column

#+NAME: 4C89C61A-D2C8-4720-9357-021883EC97FE
#+begin_src ein-python :results output
mydat2.drop ('sum', axis = 1).head ()
#+end_src

- filter through booleans

#+NAME: FE3A32A6-A5AD-41B5-A156-A8FF68D0BE85
#+begin_src ein-python :results output
filt = mydat.nomean < 0

print (mydat[['sum', 'negmean']][filt])
#+end_src



- remove duplicates

#+NAME: 66AC1B55-FDF1-496A-9A1C-EC03BDFDC01A
#+begin_src ein-python :results output
print (np.matrix ([[1,2,1],[3,3,3]]).transpose ())

pd.DataFrame (np.matrix ([[1,2,1],[3,3,3]]).transpose ()).iloc[:,1].unique ()
#+end_src

- on the difference between =.iloc= and =.loc=

notice by the way that this are outdated. by now you should use =.iat=
and =.at=.

The difference is the following.

=.iat= : uses the strict position in the matrix

=.at= : search by index and column names


#+NAME: 9F6C4632-2087-4EF2-BE4D-6C4E948FA712
#+begin_src ein-python :results output
print (mydat)
mydat.at[0, 'negmean']
#+end_src

#+NAME: A0ABCC18-127A-4686-ADC1-E131136EE271
#+begin_src ein-python :results output
mydat.iat[0,2]
#+end_src

To further understand the thing consider

#+NAME: 67DEF99A-FF5E-4AFC-8F45-C713CDBE0A4F
#+begin_src ein-python :results output
mydat2 = mydat[::2]
mydat2
#+end_src

#+NAME: 50340226-FF1D-4B09-BDE9-7CE3DF62C058
#+begin_src ein-python :results output
print (mydat2.at[6, 'nomean']) ## this by real index independent of the axis
print (mydat2.iat[6, 0]) ## this sixth row in the matrix
#+end_src

- categorical variables

This is important for treating them as dummies in regression as well
for facet_wraps. 

#+NAME: 7BCD560B-E1CB-4B0C-B8A6-92B4D3BFC054
#+begin_src ein-python :results output
mydat.head ()
#+end_src


#+NAME: B5E0FFC5-18B4-421C-AB89-9A83A3FD8FBD
#+begin_src ein-python :results output
mydat["category"] = np.repeat (range (4), 5)
mydat.info ()
#+end_src

To transform this into a category use

#+NAME: 3C08E5B6-01FF-4D91-9F28-7BB440385BB5
#+begin_src ein-python :results output
mydat.category = mydat.category.astype ('category')
mydat.info ()
#+end_src


To view the category types

#+NAME: 6A930BF7-8560-4027-B1A6-D105861E9B24
#+begin_src ein-python :results output
mydat.category.cat.categories
#+end_src

* MatplotLib
   :properties:
   :header-args:ein-python: :session http://127.0.0.1:8888/visualization.ipynb  :results output
   :end:


#+NAME: 7B605A9A-38A5-40A9-991B-EE6B0A394437
#+begin_src ein-python :results output
plt.plot(x_1, c = "lightblue", ls = '--', marker = "o",
         ms = 6, label ="nomean")
plt.plot(x_2, c = "darkorange", ls = '--', marker = "s",
         ms = 6, label ="posmean") # ms = marker size
plt.plot(x_3, c = "lightgreen", ls = '--', marker = "^",
         ms = 6, label ="negmean")
plt.legend(loc = 'upper right',bbox_to_anchor = (1,1))
plt.xticks(list(range(20)), rotation = 'vertical') # sets the ticks on
                                                   # x-axis and puts
                                                   # them vertically.
#+end_src

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-e4d60f65359faf963dc9edc65a3851e0.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

- stacked histograms via matplotlib

#+NAME: C5CFE08C-0A8D-4CDE-8B30-6878D058AE31
#+begin_src ein-python :results output
plt.hist([mydat[mydat.bitwise == True].nomean,
          mydat[mydat.bitwise == False].posmean])
#+end_src

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-4e5223a40dc5aad0bb91fba3fb97f4c6.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+NAME: DED50857-0468-45BE-8BDC-7EF70F426AFC
#+begin_src ein-python :results output
plt.hist([mydat[mydat.bitwise == True].nomean,
          mydat[mydat.bitwise == False].posmean],
         stacked = True)
#+end_src

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-a029aa36eeb77d6b33e123c2a7023261.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

* Seaborn
   :properties:
   :header-args:ein-python: :session http://127.0.0.1:8888/visualization.ipynb  :results output
   :end:

#+NAME: 9F787342-7A7B-475E-9C2E-499E27ECBB01
#+begin_src ein-python :results output
import seaborn as sns
#+end_src

#+NAME: 05C46A89-D1D4-4DFE-9E2A-01CEC3634EAE
#+begin_src ein-python :results output
sns.distplot (mydat['nomean'])
#+end_src

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-6b9e2671be86b00c00b82558a0c879f3.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+NAME: CEEFDC10-1359-478E-97FB-A3B03C01C59E
#+begin_src ein-python :results output
mydat.head ()
#+end_src

#+NAME: FBDCB0BF-41E2-4642-BC31-C41CCEDD1F97
#+begin_src ein-python :results output
g = sns.lmplot(x="posmean", y="sum", data = mydat)
#+end_src

#+RESULTS: FBDCB0BF-41E2-4642-BC31-C41CCEDD1F97

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-fdb6afb1310d32cd9d7ab3e7504bdc14.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+NAME: 484343C4-2E49-4800-AF8E-EDFC576D1E1E
#+begin_src ein-python :results output
import statsmodels
g = sns.lmplot(x="posmean", y="sum", col="bitwise", hue="bitwise", data=mydat,
               y_jitter=.02,  truncate=False)
#+end_src

#+RESULTS: 484343C4-2E49-4800-AF8E-EDFC576D1E1E

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-bd913d592aa2ad7d32dda045f217c4b5.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

To further inspect different visualization techniques check at the
[[https://seaborn.pydata.org/examples/index.html][seaborn page]].


#+NAME: AAC523C6-CCD2-43EE-84AC-10A2227BE562
#+begin_src ein-python :results output
g = sns.lmplot(x="posmean", y="sum", data = mydat, 
               hue = 'bitwise', fit_reg = False)
#+end_src

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-ffa4f4a083eb7753d04349001d0af209.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT


- joinplot for inspecting the density of two functions


#+NAME: C2CD0FFE-51BF-44EA-B24E-A7E8C45D37F5
#+begin_src ein-python :results output
g = sns.jointplot (data = mydat, x = 'posmean', y = 'negmean')
#+end_src

#+NAME: DB58737D-A14C-4118-AAD8-C4D6A69287BE
#+begin_src ein-python :results output
g = sns.jointplot (data = mydat, x = 'posmean', y = 'negmean', kind = 'hex')
#+end_src

#+NAME: 53BA694B-7746-427C-8CD7-20505E9B70FA
#+begin_src ein-python :results output
sns.jointplot (data = mydat, x = 'posmean', y = 'negmean'). \
    plot_joint(sns.kdeplot, zorder=3, n_levels=6) ## add isolines
#+end_src

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-9fcf615aed09e4928c87ae2b4b547b4e.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

- kdeplot without data

#+NAME: 454BEFE2-3E0C-4F18-BF9A-582B2BA3534E
#+begin_src ein-python :results output
 sns.kdeplot (mydat.posmean, mydat.nomean)
#+end_src

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-c31fe9f7c879bc265853bd1dc9039845.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

To draw the isolines via colour scale use the shade bool

#+NAME: 7F1664FF-89F4-42EA-9EB5-3FCE7CC06B3E
#+begin_src ein-python :results output
 sns.kdeplot (mydat.posmean, mydat.nomean,
              shade = True)
#+end_src

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-2b28d7b239bb2b2c97d91ddec01caab4.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

To still see the grids

#+NAME: CB2014DE-0554-4DCE-8DD1-6F60498379E3
#+begin_src ein-python :results output
 sns.kdeplot (mydat.posmean, mydat.nomean,
              shade = True, shade_lowest = False)
#+end_src

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-9a36b78d9df73e73b323e41e10582027.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

- change the background style

#+NAME: F8E12BC0-D8F9-4663-AC65-CACACA118F56
#+begin_src ein-python :results output
sns.set(style="darkgrid")
sns.kdeplot (mydat.posmean, mydat.nomean)
#+end_src

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-7ff3fea35de715f49145204980aeb263.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

- create subplots

#+NAME: B93D66F2-8C49-4C99-B9E0-FE71FEAF668E
#+begin_src ein-python :results output
## specify your R par(mfrow=c(x,y))
f, axes = plt.subplots(1,2, figsize = (12, 6))
k1 = sns.kdeplot(mydat.posmean, mydat.nomean, ax = axes[0], cmap = 'Greens')
k2 = sns.kdeplot(mydat.posmean, mydat.negmean, ax = axes[1], cmap = 'Greens')
#+end_src

#+RESULTS: B93D66F2-8C49-4C99-B9E0-FE71FEAF668E

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-76f47b1626f35945ac24a2fdb16cd94b.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

with more columns the axis index becomes more complex.

#+NAME: 5E915FC1-4336-43F0-AC81-E6D4606DB7DC
#+begin_src ein-python :results output
## specify your R par(mfrow=c(x,y))
f, axes = plt.subplots(2,2, figsize = (12, 6))
k1 = sns.kdeplot(mydat.posmean, mydat.nomean, ax = axes[0,1], cmap = 'Greens')
k2 = sns.kdeplot(mydat.posmean, mydat.negmean, ax = axes[1,0], cmap = 'Greens')
#+end_src

#+RESULTS: 5E915FC1-4336-43F0-AC81-E6D4606DB7DC
#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-67a82e7e06d0dbde403da30e12915fb0.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

- violinplot

same information as boxplot. on top of it you have the width that
tells you how many datapoints falls into each level for each category

#+NAME: 7127AD7E-0D11-4E74-8D13-7E39AD57BE3C
#+begin_src ein-python :results output
k1 = sns.violinplot(data = mydat, x = 'bitwise', y = 'nomean')
#+end_src

#+RESULTS: 7127AD7E-0D11-4E74-8D13-7E39AD57BE3C
#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-76e27ae206053454189960ae1872c755.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

- facet grids

this is useful when plotting many variables and inspecting their
properties for different categories.

you might do that as follows

#+NAME: 3C0D07B1-EACF-4670-8F81-A6A4C63368BE
#+begin_src ein-python :results output
## create some more categories
rand = np.random.randn(200)
category = ['2008' if x > 0 else '2009' for x in rand]
mydat['year'] = pd.Series(category).astype('category')
category = ['posExtreme' if x > 2 else 'normal' if x < 2 else 'negExtreme' for x in rand]
mydat['extreme'] = pd.Series(category).astype('category')

mydat.info()
#+end_src

#+RESULTS: 3C0D07B1-EACF-4670-8F81-A6A4C63368BE
#+begin_example
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 200 entries, 0 to 199
Data columns (total 7 columns):
 #   Column   Non-Null Count  Dtype   
---  ------   --------------  -----   
 0   nomean   200 non-null    float64 
 1   posmean  200 non-null    float64 
 2   negmean  200 non-null    float64 
 3   sum      200 non-null    float64 
 4   bitwise  200 non-null    bool    
 5   year     200 non-null    category
 6   extreme  200 non-null    category
dtypes: bool(1), category(2), float64(4)
memory usage: 7.1 KB
#+end_example


#+NAME: 350A97B1-7BF7-491E-A074-D32855FDFC2B
#+begin_src ein-python :results output
set(['posExtreme' if x > 2 else 'normal' if x < -2 else 'negExtreme' for x in rand])
#+end_src

#+RESULTS: 350A97B1-7BF7-491E-A074-D32855FDFC2B
: {'negExtreme', 'normal', 'posExtreme'}


#+NAME: 9D15BE1A-47B1-4165-A2C5-B82E0738FBB5
#+begin_src ein-python :results output
g =  sns.FacetGrid(data = mydat, row = 'year', col = 'extreme', hue = 'year')
g.map(plt.scatter, x = 'nomean', y = 'posmean')
#+end_src

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="60%" height="100%" src="../../images/ob-ein-0b867ca8bdca2f2900ea9cfed8557013.png" class="center">
#+end_export





