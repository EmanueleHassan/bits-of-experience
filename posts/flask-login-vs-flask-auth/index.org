#+BEGIN_COMMENT
.. title: Flask Login vs Flask Auth
.. slug: flask-login-vs-flask-auth
.. date: 2021-06-23 16:27:50 UTC+02:00
.. tags: flask, webapps
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT

So again this is nothing but a quick lesson to keep this big
understanding of the IT systems landscape. That is once more not my
bread and butter. At least so far so also look around as you might
find better sources explaining such content.

I am starting to cumulate quite some experience in flask. Ultimately I
had to do quite some project on the backend side for a project.

The point came when I had to secure the a webapp I am working
on. As it is an experimental project with low budget I have to perform
multiple tasks. I.e. I developed the data solution and data model. I
implemented the database and have now to make it speak with the
front-end component. 

There is an important difference to understand in the way you can
operate with flask and depending on the application type you should
use the one or the other method for securing your application.

This is directly related to the [[https://build.vsupalov.com/how-backend-and-frontend-communicate/][different types of web-architectures]]
you can use to structure your front-end. I will briefly go over these
next. It will make you to make sense of everything.

{{{TEASER_END}}}

* Types of Website rendering Architectures

  So you can read the basic idea in the link above. This is a well
  written post.

  I can sum up it like this.

  When you use static websites like your nikola [[https://marcohassan.github.io/bits-of-experience/pages/aboutme/][website]] what you
  actually do is to render each of the html in a complete
  way. I.e. there is no information fetched from a database in
  there. Each time you want to trigger a change in the website you
  have to download a complete new html site.

  This is a trivial way you can implement your website through an
  application server working in tandem with a web server. I.e. your
  browser fetches each time the =html= files from your backend server
  and renders them.

  A second more subtle option is the one of working with dynamic
  websites. There you interact with databases etc. by fetching
  information from there. This again can be done through a
  web application server or directly within your browser via the
  javascript runtime that is running in there.

  So you understand now that depending on the architectural design you
  will have quite some different implications for the load on your
  servers etc. If you go static then you can quickly render html
  pages. If you go dynamic on the =application server side=, then your
  server might quickly be overloaded as on the top of rendering all of
  the html, images, css files it must on the top of it also handle all
  of the different dynamic information withdrawal.

  A final point is the one of javascript. Note that when you work with
  this it will allow you to fetch information through the browser
  javascript engine. There recall all of the different communication
  networks layers. These will allow you to securely withdraw
  information from the different sources. You will encrypt all of the
  information across the network and just decrypt it and unpack it at
  the application layer. This will allow you to offset part of the
  burden your app server would need to bear. Especially when you would
  have a bunch of client requesting tons of info and updates. Another
  option might be to fetch the information still from the =backend=
  due to *security concerns*. In this case however when you embed
  javascript into your code you would just request the needed bit of
  information instead of needing to reload the entire =html= page
  together with the new dynamic information as it would happen when
  you work with the backend server without javascript running in your
  browser.

  This also increases UX. We have the same page as before, but can
  trigger browser events without reloading the page. This makes for a
  more continuous user experience, as they don’t see the screen flash
  and new data loads smoothly, without breaking the UX flow.

  As a final note on javascript; note the important point that was
  made in the section: i.e. with javascript you can hide or show
  elements dynamically.

  How does all of the hiding and rendering happen?:

  The =Document Object Model (DOM)= is a tree-like structure that
  describes the relationship between every element in the HTML
  document. When a web browser has finished retrieving a document, the
  HTML is parsed and the DOM constructed, and from this the page is
  rendered.

  After the DOM has been constructed, it is accessible through
  JavaScript. You can traverse the tree, enumerate an element’s parent
  or children, get and set an element’s properties, and even add and
  remove sections of the tree. DOM manipulation is at the core of most
  JavaScript.

  This is an important point as in such a way you can greatly reduce
  the communication with the backend servers. You just download and
  render single =html= and do all of the rendering and routing to
  different views from within the browser.

  This is essentially the idea of =Angular= and similar frameworks
  with the addition that the html calls javascript that then assembles
  a html and the browser renders it such that what you see in the
  browser as html is not the one that left the backend server. The
  javascript then fetches the content from cloud services such as s3
  etc. 

  Note one controversial point I found when doing such notes: you need
  a server when running =Angular=? Why is this the case? Should not
  everything run in the browser engine? Yes and No; but badaboom; you
  made the right sense of it; it is not strictly necessary to have a
  javascript based server although this is often the way you work
  with. I.e. you need for sure a server to fetch the angular files and
  bring them into the browser. This also in local development mode as
  browser are for security reasons not given access to your file
  system. There you would actually use =ng serve=. However the very
  same flask backend server from which you are serving / exposing your
  models could well be that server. In this sense check at the route
  that is mapping all of the paths to the =index.html=, the single
  html from which you manage it all in your angular framework.
    
* Flask Authentification

   Once you understand the different types of architectures it is clear
   that when securing an application served via flask it is necessary to
   understand what is the type of back-end you are constructing.

   I.e. are you implementing a RESTful service where the front-end is
   rendered via =JS= from the browser? Then in that case just secure your
   RESTful services with the =authHTTP= module. You just secure the
   endpoints for accessing the data and returning them to the
   front-end which will then integrate them in the front-end. This is
   how you are working on your project. Notice that here you would
   actually need to authentificate for each request. You can find a
   trivial basic example [[https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask][here]]. You can then expand on this according
   to the need.

   A better way to deal with the RESTful authentification would be to
   use the token-based authentification as discussed in [[https://realpython.com/token-based-authentication-with-flask/#refactoring][here]]. You
   would have to read a bit more into it if you decided to go down
   that road as it is not straightforward at the moment why you would
   use a db for that etc. 

   Are you rendering web-sites from the backend? I.e. are you routing
   via the backend and making dynamic webpages out of it? Do you need
   to have to keep state for the client? Then use ~flask_login~. You
   can implement the login with or without a =front-end page= for
   it. You can find a basic template for doing that with front-end
   [[https://github.com/MarcoHassan/flask_login][here]]. Use it in your future projects.

   Note that it also possible to use the flask_login module and deal
   with multiple clients and access your RESTful points with a single
   access. In order to do that, you can also keep a session argument
   where you keep track of all of the active users that might access
   resources. However, this is not recommended as this goes *against
   the concept of stateless REST* Api and it is not recommended. For
   quick and dirty PoC situations you might well work in such a way.
   

