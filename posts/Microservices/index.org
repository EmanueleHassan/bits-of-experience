#+BEGIN_COMMENT
.. title: Microservices
.. slug: Microservices
.. date: 2019-09-06 18:21:43 UTC+02:00
.. tags: IT Architecture
.. category: 
.. link: 
.. description: 
.. type: text
#+END_COMMENT

#+BEGIN_HTML
<br>
<br>
#+END_HTML

Microservices refer to an application architectural style that divides
an application into components, where each component is a full, but
miniature, application that is focused on producing a single business
task.

Each microservice has a well-defined interface and dependencies (to
other microservices and to external resources) so that it can run
fairly independently, and the team can develop it fairly
independently.

 Microservices enable developers to accomplish meaningful work working
 in small teams. Small teams allow developers to be more productive
 because they spend less time in meetings and decrease the need for
 communication and coordination that is needed with a large team.

{{{TEASER_END}}}

** Idea

The aim of a microservice architecture is to completely decouple
application components from one another such that they can be
maintained, scaled, and so on.

The idea of microservices is moreover the one of being able to
parallelize work among different teams. Different teams might develop
their microservice at a different pace because of the nature of the
microservice and this will not impact the ultimate result.

Another important point for microservices is scaling. Before, with
monolithic application the entire application is scaled when only one
part is the bottleneck. With microservices, each service is scaled
independently when needed.

** Why use microservices now?

Many things have converged to make microservices the right approach
now. Here are a few reasons, and there are certainly more:

- Ease and feasibility of distributing components: Internet, intranet,
  or network maturity RESTful API conventions or perceived simplicity,
  and lightweight messaging

- Ease and simplicity of hosting: 
  
  Lightweight run times: Node.js and WebSphere Application Server Liberty
  
  Simplified infrastructure: Operating system virtualization
  (hypervisors),containerization (Docker), and infrastructure as a
  service (cloud infrastructure). Workload virtualization (Kubernetes, Mesos, and Spark)

  Platform-as-a-service: Autoscaling, service level agreement (SLA)
  management, messaging, caching, and build management

  Agile development methods: IBM Cloud Garage Method, Scrum, and
  continuous improvement and continuous delivery (CI/CD) Standardized
  code management (GitHub)

** Issues

The biggest issue is operational complexity because there are more
moving parts to monitor and manage. Many enterprises have difficulty
simply knowing how many applications they have running in production
and what they are, much less knowing when ones stopped running. Now
imagine that instead of trying to track dozens of apps, you’re
tracking hundreds if not thousands of microservices. This is the full
employment act for DevOps—you’d better get good at it!

The more pieces running independently, the more the distributed system
becomes an issue (network latency, disconnects, fault tolerance,
serialization), the harder it is to find everything, and the harder it
is to do end-to-end testing with confidence.

** Literature

IBM - Journey to Cloud Series.
