#+BEGIN_COMMENT
.. title: Nikola Set Up - Do it the Simple Way.
.. slug: nikola-set-up-do-it-the-simple-way
.. date: 2020-04-12 21:45:52 UTC+02:00
.. tags: blogging, emacs
.. category: 
.. link: 
.. description: 
.. type: text
.. has_math: yes
#+END_COMMENT

Nikola is a python package to automatically generate static
webpages. This is more secure than operating through dynamic websites
for non-expert users. Moreover the integration with org will allow you
to easily generate blogs based on your org documents and this will
prove to be especially useful given that you can work following your
literate programming workflow without bothering too much on the
format.

You can finally generate and publish interesting discoveries in an
instantaneous way.

{{{TEASER_END}}}

* Nikola Set Up

** Virtual Environment

   Given that nikola is a python package you can easily install it
   through pip package manager. 

   It is therefore advisable to set up a virtual environment for it and
   install nikola and other useful packages for your blogging trial.

   I created my venv =nikola= in my virtual environment folder.  There I
   installed the following packages:

   #+BEGIN_SRC 
   $ pip3 install requests
   $ pip3 install livereload
   $ pip3 install --upgrade pip3 'Nikola[extras]'
   #+END_SRC

   Remember to cancel and update to "Nikola[extras]". 

** Customize
   
   I was not able to implement "c'est la z" theme yet. That is quite nice
   and is theoretically available under the src branch of the forked
   directory.
   
   Till now use another more user-friendly theme. I like the =bnw=
   theme. The blog type is well described at the following link
   [[https://themes.getnikola.com/v8/bnw/][nikola_bnw]].
   
   The installation is straightforward and can be followed using the
   steps on the site. This is summarized below just to keep consistency.
   
***** Load the theme plugin
      
      #+BEGIN_SRC emacs-lisp
      nikola.exe theme -i zen
      #+END_SRC
      
***** Set the theme 
      
      In =config.py= change the THEME to ~THEME = "zen"~.
      
      Finally enable bundles. =USE_BUNDLES = "true"=.
      
** Add Org Mode
   
   In order for nikola to render pages written in org mode it is necessary to add the file extension to the compiler options.
   This can be easily done by following the guidelines available under the following webpage: [[https://streakycobra.github.io/posts/blogging-in-org-mode-with-nikola][posting in org mode with nikola]].
   
   This basically consists of adding the following lines to your =conf.py= script.
   
   #+BEGIN_SRC 
   # Add the orgmode compiler to your COMPILERS dict.
   COMPILERS["orgmode"] = ('.org',)

   # Add org files to your POSTS, PAGES
   POSTS = POSTS + (("posts/*.org", "posts", "post.tmpl"),)
   PAGES = PAGES + (("stories/*.org", "stories", "story.tmpl"),)
   #+END_SRC
   
   Moreover you will have to set the default editor if you have never done so on your machine.
   This consists of adding the following line to the =/etc/environment= unix file
   
   #+BEGIN_SRC 
   EDITOR = "/usr/bin/emacs25" # or whatever version or editor.
   #+END_SRC
   
   Once that is set it is needed to reboot and check the correct execution via
   
   #+BEGIN_SRC 
    $ echo $EDITOR
   #+END_SRC
   
   Finally it is  necessary to add the orgmode plugin to nikola via
   #+BEGIN_SRC
   $ nikola plugin -i orgmode
   #+END_SRC

** Write your first post
   
   You are set up. It is possible at this stage to start writing posts by simply calling
   
   #+BEGIN_SRC 
   $ nikola new_post -f orgmode
   #+END_SRC
      
   Save it, build your webpage via =nikola build=, deploy it via
   =nikola serve= and *boom you are done*.

** Github Deployment

   Nikola is moreover interesting as it allows a straightforward
   integration with Github pages. 

   You can simply specify the following parameters in your python
   configuration file

   #+BEGIN_SRC python 
   SITE_URL = "https://marcohassan.github.io/bits-of-experience/"
   GITHUB_SOURCE_BRANCH = 'master'
   GITHUB_DEPLOY_BRANCH = 'gh-pages'

   # The name of the remote where you wish to push to, using github_deploy.
   GITHUB_REMOTE_NAME = 'origin'

   # Whether or not github_deploy should commit to the source branch automatically
   # before deploying.
   GITHUB_COMMIT_SOURCE = True
   #+END_SRC  

#+BEGIN_EXPORT html
<br>
#+END_EXPORT

* How to integrate PDFs and Videos

You can integrate all of  the possible items you can integrate on
standard =HTML= on the different browsers. 

It is however important that you set you files in the =output=
directory in your blog directory. 

Then you find the source code 

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
<object data="../../pdfs/dummy.pdf" type="application/pdf"
	width="100%" height="600px" align="center">
  <iframe   jsname="L5Fo6c" jscontroller="usmiIb"
	    jsaction="rcuQ6b:WYd;" class="YMEQtfL6cTce-purZT L6cTce-pSzOP"
	    frameborder="0" allowfullscreen="" src="../../pdfs/dummy.pdf"
	    width="100%" height="600px" align="center"/>

</object>
#+end_export


#+BEGIN_EXPORT html
<br>
<br>
<br>
<br>
#+END_EXPORT
#+begin_export html
<video controls="controls" width="100%" height="100%" 
name="Video Name" src="../../videos/Bildschirmvideo%20aufnehmen%202020-02-20%20um%2016.12.36.mov"></video>
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

* Render LaTex

Just include the =.. has_math: yes= argument in your post arguments.

Then you can render LaTex code

#+BEGIN_src latex :results drawer :exports results
\[ Y_{ijk} = \mu + \alpha_i + \beta_j + \alpha \beta_{ij} + \epsilon_{ijk} \]
#+END_src

#+RESULTS:
:results:
\[ Y_{ijk} = \mu + \alpha_i + \beta_j + \alpha \beta_{ij} + \epsilon_{ijk} \]
:end:

* Supporting Script for Nikola Github Pages Auto Commit

Albeit the solution so far outlined works well for local deployment or
for a deployment over a PaaS infrastructure when working with the
default autocommit option of =nikola= all the pdfs and videos are not
automatically imported in the directory used for creating the github
page =gh-pages= in my case. 

To obviate such a problem I decided to create two directories =pdfs=
and =vidoes= in the =Blog= directory where I keep my github repo. 

There I created the following script

#+begin_src sh
#!/bin/sh

cd bits-of-experience

source ~/Desktop/python_venv/nikola/bin/activate

nikola github_deploy

git checkout gh-pages

cp -r ../pdfs .

cp -r ../videos .

git add .

git commit -m "add pdfs and videos"

git push

git checkout master

#+end_src 

Running the script you will both auto commit your changes and generate
the =html= pages as well as automatically update the resources so
that the Github page works as desired. 


