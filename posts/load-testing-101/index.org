#+BEGIN_COMMENT
.. title: Load Testing 101
.. slug: load-testing-101
.. date: 2022-04-21 12:12:00 UTC+02:00
.. tags: software-engineering, load
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT

So basically you have your PoC concept for the solution right now.
I stress that it is a PoC. Have to take some time to fix some
architectural components that I have in mind. 

There are still a couple of things I have to sort out at conceptual
level.

These belong more to the SRE field but, well you know, here it's a
special breed of a team. You have to deal with everything by your own.

So the thing is that I have now a multi-threaded PoC performing the
solution. I want to test now the threading component and to test
different gunicorn webserver settings.

In the specific I want to stress the system and see how it performs,
meaning how many threads is a good number of threads and when the
performance starts to go bust.

For this I am starting to dig into load testing tools.

{{{TEASER_END}}}

A tool that is quick and dirty and which I am starting with is =Apache
Bench=.

** Apache Bench

   This is a quite easy tool.

   You should get it out of the box if you are working in UNIX
   environments.

   You can check at how to properly work with it by checking the man
   page for the command.

   The two most important parameters are the following:

   - =-n=: with it you can specify the number of requests to perform.

   - =-c=: this is the concurrency parameter. With it you can specify
     how many concurrent requests you wish to make.

   - =-s=: this is potentially as well interesting. With it you can
     change the default timeout for each response. This is fixed at
     30s. This is not the bottleneck for your designed solution right
     now. But in any case you should keep it in the back of your
     mind.

   Note as well that you have all of the authentication properties and
   you have as well the possibility to ship post requests.

   This is currently not working with POST request. So testing the
   thing with get. I mean for understanding the lower level stuff of
   your server and understanding the behaviour it plays no big role. 

   Would have to understand why and fix it.
  
** TODO JMeter

   Did not really start to explore it in a thorough way.

   Just understood so far that is a more solid tool in order to make
   solid tests.

   Google it should you be interested in it. You might start from [[https://www.guru99.com/jmeter-performance-testing.html][here]].

   
