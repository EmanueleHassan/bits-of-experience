#+BEGIN_COMMENT
.. title: Notes on HyperLedger Fabric
.. slug: notes-on-hyperledger-fabric
.. date: 2020-02-03 14:47:32 UTC+01:00
.. tags: BlockChain
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

This are my personal notes w.r.t. Hyperledger Fabric technology. The
document basically consists of a structured /collage/ from the
freely available resources concerning Hyperledger Fabric.

The content for such document is not to subscribe to myself. The
structure is and corresponds to the structure it naturally arose when
getting to know the text. All the content stems from the
sources mentioned at the bottom in the /Resources/ section. You can
refer to this is you are searching for a more thorough explanation of
the technology. 

{{{TEASER_END}}}

#+BEGIN_EXPORT html
<br>
#+END_EXPORT

* Difference with permission-less Blockchain in a Nutshell

Hyperledger Fabric registers the identity of the different people
operating on the network through their digital certificates. This is a
key difference with permission-less blockchains where anonymization of
the stakeholder is guaranteed. 

On the top of it, policies are one of the things that make Hyperledger
Fabric different from other blockchains like Ethereum or Bitcoin. In
those systems, transactions can be generated and validated by any node
in the network. The policies that govern the network are fixed at any
point in time and can only to be changed using the same process that
governs the code. Because Fabric is a permissioned blockchain whose
users are recognized by the underlying infrastructure, those users
have the ability to decide on the governance of the network before it
is launched, and change the governance of a running network.

Here the transactions are not visible to anyone but just to the people
that should see it for security reasons. Moreover to verify the
transaction on the blockchain a small group of participants have to
endorse it (such as the parties involved in the transactions and maybe
a third party). This stays in contrast to the proof of work based
blockchain such as the bitcoin, which just requires the majority of
the network to endorse the transaction.


#+BEGIN_EXPORT html
<br>
#+END_EXPORT

* Hyperledger Fabric

This is the backbone of IBM blockchain. A solution that can run both
on the cloud, as well as on-prem as well as in multi-cloud.

The difference with Ethereum or such other platform is that they run
on very generic protocols and you are therefore limited in your
blockchain implementation to such platform and protocols. Hyperledger
fabric is the building block that comes before, that allows you to
customize your solution and get to the best blockchain solution
according to your needs.

The idea of Hyperledger Fabric is that the completely public
blockchains that requires each and every peer to publish and validate
on it take a huge blow when it comes to scalability. Moreover
confidential data cannot be upload on the blockchain due to its public
transparent nature.

Finally, as a very personal - but common sense - opinion I prefer to
code and learn Golang or JavaScript in comparison to Solidity.


#+BEGIN_EXPORT html
<br>
#+END_EXPORT

** The basic idea

The basic idea of the ledger is that you can have contracts between
two parties that are visible just between the two of them. This is possible due
to the modular structure of Hyperledger Fabric which allows to create
multiple isolated channels on a single network governed by *distinct*
configuration settings. Such settings will ultimately govern the
access rights to the channel by checking the digital identity of
organizations participating in the network. 

Furthermore, the configuration of the channels sets out the rules by
which a transaction is considered as valid and consequently appended
to the Blockchain in the usual irreversible way. Here the endorsement
policy, necessary for a transaction to fulfill the criteria to be
accepted on the blockchain, can be a channel specific and does not
have to conform to a single general protocol as in the more known
permission-less Blockchains.


#+BEGIN_EXPORT html
<br>
#+END_EXPORT

** Basic Components of Hyperledger Fabric

#+BEGIN_EXPORT html
<br>
#+END_EXPORT

*** Assets

    Assets defined in Hyperledger Fabric are represented as a collection of
    key-value pairs, with state changes recorded as transactions on a
    Channel ledger. Assets can be represented in binary and/or JSON form. 

*** Distributed Ledger

    Each peers has a copy of the ledger of every Hyperledger Fabric
    channel they belong to. 

    The /world state/ component describes *the state of the ledger at a given
    point in time*. It’s the database of the ledger. 

    The /transaction log/ component records all transactions which have
    resulted in the current value of the world state; it’s the update
    history for the world state. 

    The /ledger/, then, is a combination of the world state database and
    the transaction log history.  

    Ledger Features — The immutable, shared ledger encodes the entire
    transaction history for each channel, and includes SQL-like query
    capability for efficient auditing and dispute resolution. 

*** Signing of Transactions

    This is possibly the centerpiece of Hyperledger, allowing your
    network to be come a network of identifiable organizations and
    rendering such network permissioned.

    Different components of the blockchain network use
    /certificates to identify themselves/ to each other as being from a
    particular organization. 

    That’s why there is usually more than one CA supporting a
    blockchain network – different organizations often use different
    CAs. Indeed, CAs are so important that Hyperledger Fabric provides
    you with a *built-in one* (called Fabric-CA) to help you get
    going. Though in practice, organizations will choose to use their
    own CA.  

*** Channels and Privacy

    Each channel has its ledger. You can say that given a channel the
    principle is the same as the one of the more well known
    permission-less blockchains. *Channels provide privacy from other
    channels, and from the network*.  

    A channel’s ledger contains a configuration block defining
    policies, access control lists, and other pertinent
    information. Peers dispose of an identity in the way that they are
    linked to the organization they belong via certificates issued by
    trusted CAs. These identities really matter because they
    /determine the exact permissions/ over resources and access to
    information that actors have in a blockchain network.

    A ledger exists in the scope of a channel — it can be shared across
    the entire network (assuming every participant is operating on one
    common channel) — or it can be privatized to include only a specific
    set of participants. 

    In the latter scenario, these participants would create a separate
    channel and thereby isolate/segregate their transactions and
    ledger. In order to solve scenarios that want to bridge the gap
    between total transparency and privacy, /chaincode (smart contracts) can be installed only on peers that need to access the asset states to perform reads
    and writes/ (in other words, if a chaincode is not installed on a peer,
    it will not be able to properly interface with the ledger). 

    When a subset of organizations on that channel need to keep their
    transaction data confidential, a private data collection
    is used to segregate this data in a private database, logically
    separated from the channel ledger, accessible only to the authorized
    subset of organizations. 

    To further obfuscate the data, values within chaincode can be
    *encrypted*. Once encrypted data has been written to the ledger, it
    can be decrypted only by a user in possession of the corresponding key
    that was used to generate the cipher text. 

**** How to create a Channel

     In order to create a channel you have first to create a /consortium/. 

     Why are consortia important? We can see that a consortium defines the
     set of organizations in the network who share a need to transact with
     one another.  

     A channel is now the primary communications mechanism by which
     the members of a consortium can communicate with each other.  

     When creating a channel you have first to link it to an ordering
     service, which will be comprehensively discussed in a moment. In
     the next stage of network development, you are going to connect
     components such as client applications and peer nodes. 

     *Important* is that when creating a channel you have to create a new,
     completely separate configuration for it. This will govern the extent
     of the transactions within the channel.

     Once a channel has been created, it is in a very real sense “free from
     the network”. It is only organizations that are explicitly specified
     in a channel configuration that have any control over it, from this
     time forward into the future. Likewise, any updates to /base/ network
     configuration from this time onwards will have no direct effect on
     channel configuration.


*** ChainCode/Smart Contracts

    These are written in Golang or JavaScript. You can imagine the
    substantial benefit in comparison to writing down contracts in
    Solidity with all the further complexity layer consisting in
    mitigating the costs of the proof-of-work and the consistent
    design of /gas limits/ for limiting the loss in case of errors
    embedded in the contracts.

    State transitions are a result of chaincode invocations
    (‘transactions’) submitted by participating parties. Each transaction
    results in a set of asset key-value pairs that are committed to the
    ledger as creates, updates, or deletes.  


*** Consensus Mechanism

    Hyperledger Fabric has been designed to allow network starters to
    choose a consensus mechanism that best represents the relationships
    that exist between participants. As with privacy, there is a spectrum
    of needs; from networks that are highly structured in their
    relationships to those that are more peer-to-peer. Peers validate
    transactions against endorsement policies and enforce the policies.

    /Consensus is achieved ultimately when the order and results of a block’s transactions have met the explicit policy criteria checks/.  
    These checks and balances take place during the lifecycle of a
    transaction, and include the usage of endorsement policies to dictate
    which specific members must endorse a certain transaction class, as
    well as system chaincodes to ensure that these policies are enforced
    and upheld. 

*** Ordering Services

    Many distributed blockchains, such as Ethereum and Bitcoin, are not
    permissioned, which means that any node can participate in the
    consensus process, wherein transactions are ordered and bundled into
    blocks. 

    Because of this fact, these systems rely on probabilistic
    consensus algorithms which eventually guarantee ledger consistency to
    a high degree of probability, but which are still vulnerable to
    divergent ledgers (also known as a ledger “fork”), where different
    participants in the network have a different view of the accepted
    order of transactions. 

    Hyperledger Fabric works differently. It features nodes called
    orderers (it’s also known as an “ordering node”) that *do this
    transaction ordering*. 

    Because Fabric’s design relies on deterministic
    consensus algorithms, any block validated by the peer is guaranteed
    to be final and correct. Ledgers cannot fork the way they do in
    many other distributed and permissionless blockchain networks. 
    In addition to their ordering role, orderers also maintain the list
    of organizations that are allowed to create channels. 

    It’s therefore helpful to think of the ordering service as the initial
    administration point for the network. A configuration file acts on top
    of such ordering service containing the policies that describe the
    starting set of administrative capabilities for the network. 

    Ordering services are usually multi-node, and can be configured to
    have different nodes in different organizations.

*** Multi-node ordering service.

    As the ordering service stays at the heart of the hyperledger
    fabric networks and it is used to create the network initially and
    connects to all channels in the network. This raises issues in a
    decentralized world and it is therefore necessary to de-centralize
    the ordering service by letting it being comprised of many
    individual nodes owned by different organizations.

*** Ordering and Consensus. The Mechanism.

     The architecture of Hyperledger Fabric factors out consensus into
     its own component — the orderer service. This is an unusual
     feature because it means Fabric can support different consensus
     algorithms by just switching out the orderer implementation. 

     One of the desirable property is Byzantine fault tolerance (BFT),
     which says the orderer can do its job even in the presence of
     malicious actors. 

     This is apparently, still not given on Hyperledger Fabric
     although much work is going into it. This is mitigated by the
     fact that acting on a permissioned network you have the chance of
     filtering out malicious actors from the network.
     
     I recommend [[https://developer.ibm.com/technologies/blockchain/articles/blockchain-hyperledger-fabric-ordering-decentralization/][this]] blogpost to put things in perspective. 


#+BEGIN_EXPORT html
<br>
#+END_EXPORT


** Transaction flow

   In Hyperledger Fabric the transaction flow is separated into three
   steps, which may be run on different entities in the system: 

   (1) executing a transaction and checking its correctness, thereby
   endorsing it (corresponding to “transaction validation” in other
   blockchains);

   Once the transaction have been endorsed by checking at the
   endorsing policy, the endorsing peers take the transaction proposal
   inputs as arguments to the invoked chaincode’s function. The
   chaincode is then executed against the current state database to
   produce transaction results including a response value, read set,
   and write set (i.e. key/value pairs representing an asset to create
   or update). /No updates are made to the ledger at this point/.

   (2) ordering through a consensus protocol, irrespective of transaction
   semantics;

   Here, the application “broadcasts” the transaction proposal and response
   within a “transaction message” to the ordering service. The
   transaction will contain the read/write sets, the endorsing peers
   signatures and the Channel ID. The ordering service does not need
   to inspect the entire content of a transaction in order to perform
   its operation, it simply receives transactions from all channels in
   the network, orders them chronologically by channel, and creates
   blocks of transactions per channel. 

   (3) transaction validation per application specific trust assumptions,
   which also prevents race conditions due to concurrency.

   The transactions within the block are validated to ensure
   endorsement policy is fulfilled and to ensure that there have been
   no changes to ledger state for read set variables since the read
   set was generated by the transaction execution. 
   Each peer appends the block to the channel’s chain, and for each
   valid transaction the write sets are committed to current state
   database. An event is emitted by each peer to notify the client
   application that the transaction (invocation) has been immutably
   appended to the chain.


#+BEGIN_EXPORT html
<br>
#+END_EXPORT

** Physical Layer

   The above defined is the Logical Layer of the Blockchain Network. Once
   this is defined with all of the necessary configurations, the ledger
   within a channel is effectively distributed and /hosted/ among peers
   as in the permission-less blockchain networks.

   Given the physical layer it is then possible to integrate applications
   to your channel where the interaction of these and the peers is
   managed by chaincode (i.e. smart contracts). In order to render this
   possible a *chaincode package must be installed* on at least one peer
   from the organization governing this. In such a way this will then be
   able to implement the logic of the smart contract and distribute it
   across the network.

*** Consensus, Transaction distribution at the Physical Layer

    An organization must approve a chaincode definition in order to use
    the installed smart contract to query the ledger and endorse
    transactions. 

    A sufficient number of organizations need to approve a chaincode
    definition (A majority, by default) before the chaincode definition
    can be committed to the channel and used to interact with the
    channel ledger. Once the definition has been committed, the smart
    contract can be invoked by client application - now and only now -.

    Note that although every component on the channel can now access
    the smart contract, they are not able to see its program
    logic. This remains private to those nodes who have installed the
    smart contract. Conceptually this means that it’s the smart
    contract interface that is defined and committed to a channel, in
    contrast to the smart contract implementation that is installed.

    To reinforce this idea; installing a smart contract shows how we
    think of it being *physically* hosted on a peer, whereas a smart
    contract that has been defined on a channel shows how we consider
    it *logically* hosted by the channel.

    You should not think of peer nodes which do not have smart
    contracts installed as being somehow inferior. It’s more the case
    that peer nodes with smart contracts have a special power – to
    help generate transactions. Note that all peer nodes can validate
    and subsequently accept or reject transactions onto their copy of
    the ledger. 

    However, only peer nodes with a smart contract installed can take
    part in the process of transaction endorsement which is central to
    the generation of valid transactions. 


* References

  [[https://hyperledger-fabric.readthedocs.io/en/latest/blockchain.html][Hyperledger Documentation]].

  Blockchain Essentials Badge - IBM Educ.

  [[https://developer.ibm.com/technologies/blockchain/articles/blockchain-hyperledger-fabric-ordering-decentralization/][On the decentralization of Hyperledger Fabric]] 

  [[https://medium.com/kokster/understanding-hyperledger-fabric-byzantine-fault-tolerance-cf106146ef43][Understanding Hyperledger Fabric — Byzantine Fault Tolerance]]







