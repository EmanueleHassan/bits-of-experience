#+BEGIN_COMMENT
.. title: Document Stores
.. slug: document-stores
.. date: 2020-06-26 17:46:36 UTC+02:00
.. tags: Big Data
.. category: 
.. link: 
.. description: 
.. type: text
#+END_COMMENT


#+begin_export html
<style>
img{
  display: block;
  margin-left: auto;
  margin-right: auto;
}
</style>
#+end_export


This post briefly goes over the idea of document stores. These are
databases that were appositely creating for dealing with data in its
tree shape. Some act on top of =json= documents some on top of =XML=.

The idea is that albeit you might find some tweaks for working with
tree data shapes (think for instance at the ~EXPLODE~ function of
sparkSQL) you will always have difficulties in storing a tree data
model into a relational table.

This is mainly due to the two properties of trees that are not
available in relational tables being:

- heterogeneity

- nestedness

In this sense document stores are schemaless. You might save the
document however you want and validate them ex-post.

To overcome data impedance of storing tree modeled data into
relational tables new databases are emerging that allows to store and
query directly json documents. However, notice that such databases are
at their infancy and to this stage they don't have the scaling force
of HDFS. I.e. you they scale just up to handful of machines.

{{{TEASER_END}}}

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

* Architecture

The idea behind document stores is similar to the one behind the one
of HDFS. 

It consists of:

- sharding the data so that your very big amount of data is splitted
  into several files containg a subset of data that are distributed
  across machines

- replicating the data over plenty of commodity hardware (a handful of
  machines to this stage) 

In document stores you shard based on some document key - remember
that most of the entries are assigned an ID when stored in the
document store such that such ID can be used for sharding.

You would then have a machine among the many members of the cluster
being responsible for a particular shard. This practically means that
the machine is responsible for write operations and for the
replication instructions to the machines.

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="70%" height="100%" src="../../images/Bildschirmfoto_2020-06-26_um_18.34.05.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

Notice that when writing a new object and replicating it over the
master writes down the entry first and then sends the order to
replicate over the other members. Moreover it is important to
understand that you can specify the number of default replicas you
want to reach before the master can consider the replication to have
completed successfully. 

This practically means that even if you replicate across your entire
cluster - say for instance 5 machines - you can set a threshold of 2
replicas such that as soon as the master receives two acknowledgments
from two members it tells the user of that the record has been saved
into the document store while the replication to all of the other
members of the cluster continues in the background.


* On the Physical Layer


Document stores makes heavy use of indices for storing the data and
accessing/querying them in a fast and efficient way.

The basic idea is to use a hash-table; i.e. a table with as key your
desired reference object and as value a =pointer=.

Logically without going into the nitty-gritty of CS pointers

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="70%" height="100%" src="../../images/Bildschirmfoto_2020-06-26_um_18.54.29.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

Notice that this is not the only type of index as hash table display
limits. While they work very well for specific queries they suffer
when you make interval queries; for instance provide me all the data
for which the purchase was after Jan-01-2020.

This is the main reason why on top of Hash-tables, document stores
allow the user to work with B+trees. These are index structures that
works in a hierarchical way by saving pointers in the end nodes of the
tree. By arriving to the end nodes in a hierarchical way where data
are into batches in logical intervals you can well deal with range
queries.

/B+Tree example/

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width= "60%" height="100%" src="../../images/Bildschirmfoto_2020-06-26_um_21.24.37.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

The idea of working with such trees is that when looking for a record
instead of dumping all of the data into memory and scanning all of the
data over there to find the desired data you load into memory just the
data that fulfill your range query.

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
<style>
 {
  box-sizing: border-box;
}

.column {
  float: left;
  width: 50%;
  padding: 0px;
}

/* Clearfix (clear floats) */
.row::after {
  content: "";
  clear: both;
  display: table;
}
</style>

<div class="row">
  <div class="column">
    <img style="width:100%" src="../../images/Bildschirmfoto_2020-06-26_um_21.30.25.png">
  </div>
  <div class="column">
    <img style="width:100%" src="../../images/Bildschirmfoto_2020-06-26_um_21.30.47.png">
  </div>
</div>
#+End_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

** Pymongo Indices

An =explain()= operator provides information on the query plan. It
returns a document that describes the process and indexes used to
return the query. This may provide useful insight when attempting to
optimize a query. Example:

#+NAME: EC86F651-CBF6-48DB-8AC7-E82E59E85D0F
#+BEGIN_SRC python
  db.restaurants.find({"borough" : "Brooklyn"}).explain()
#+END_SRC

#+RESULTS: EC86F651-CBF6-48DB-8AC7-E82E59E85D0F
#+begin_example
{'queryPlanner': {'plannerVersion': 1,
  'namespace': 'test.restaurants',
  'indexFilterSet': False,
  'parsedQuery': {'borough': {'$eq': 'Brooklyn'}},
  'winningPlan': {'stage': 'COLLSCAN',
   'filter': {'borough': {'$eq': 'Brooklyn'}},
   'direction': 'forward'},
  'rejectedPlans': []},
 'executionStats': {'executionSuccess': True,
  'nReturned': 6086,
  'executionTimeMillis': 11,
  'totalKeysExamined': 0,
  'totalDocsExamined': 25360,
  'executionStages': {'stage': 'COLLSCAN',
   'filter': {'borough': {'$eq': 'Brooklyn'}},
   'nReturned': 6086,
   'executionTimeMillisEstimate': 0,
   'works': 25362,
   'advanced': 6086,
   'needTime': 19275,
   'needYield': 0,
   'saveState': 198,
   'restoreState': 198,
   'isEOF': 1,
   'direction': 'forward',
   'docsExamined': 25360},
  'allPlansExecution': []},
 'serverInfo': {'host': 'wk-caas-9593abe6347a4cef94ae46eec52f397f-e9e060fe618e8387f19fcf',
  'port': 27017,
  'version': '4.2.6',
  'gitVersion': '20364840b8f1af16917e4c23c1b5f5efd8b352f8'},
 'ok': 1.0}
#+end_example

In =pymongo=, you can create an index by calling the =create_index()=
method. For example, we can create an index for the =borough= field:

#+NAME: 971F5CCE-564C-4A3F-B1F9-236F6BBB7C23
#+BEGIN_SRC python
  db.restaurants.create_index("borough")
#+END_SRC

#+RESULTS: 971F5CCE-564C-4A3F-B1F9-236F6BBB7C23
: 'borough_1'

Now, let's see how the query plan changes to use the newly created
index:

#+NAME: E56F1B7D-4095-446E-A1BF-C1A80F9668D8
#+BEGIN_SRC python
  db.restaurants.find({"borough" : "Brooklyn"}).explain()
#+END_SRC

#+RESULTS: E56F1B7D-4095-446E-A1BF-C1A80F9668D8
#+begin_example
{'queryPlanner': {'plannerVersion': 1,
  'namespace': 'test.restaurants',
  'indexFilterSet': False,
  'parsedQuery': {'borough': {'$eq': 'Brooklyn'}},
  'winningPlan': {'stage': 'FETCH',
   'inputStage': {'stage': 'IXSCAN',
    'keyPattern': {'borough': 1},
    'indexName': 'borough_1',
    'isMultiKey': False,
    'multiKeyPaths': {'borough': []},
    'isUnique': False,
    'isSparse': False,
    'isPartial': False,
    'indexVersion': 2,
    'direction': 'forward',
    'indexBounds': {'borough': ['["Brooklyn", "Brooklyn"]']}}},
  'rejectedPlans': []},
 'executionStats': {'executionSuccess': True,
  'nReturned': 6086,
  'executionTimeMillis': 7,
  'totalKeysExamined': 6086,
  'totalDocsExamined': 6086,
  'executionStages': {'stage': 'FETCH',
   'nReturned': 6086,
   'executionTimeMillisEstimate': 0,
   'works': 6087,
   'advanced': 6086,
   'needTime': 0,
   'needYield': 0,
   'saveState': 47,
   'restoreState': 47,
   'isEOF': 1,
   'docsExamined': 6086,
   'alreadyHasObj': 0,
   'inputStage': {'stage': 'IXSCAN',
    'nReturned': 6086,
    'executionTimeMillisEstimate': 0,
    'works': 6087,
    'advanced': 6086,
    'needTime': 0,
    'needYield': 0,
    'saveState': 47,
    'restoreState': 47,
    'isEOF': 1,
    'keyPattern': {'borough': 1},
    'indexName': 'borough_1',
    'isMultiKey': False,
    'multiKeyPaths': {'borough': []},
    'isUnique': False,
    'isSparse': False,
    'isPartial': False,
    'indexVersion': 2,
    'direction': 'forward',
    'indexBounds': {'borough': ['["Brooklyn", "Brooklyn"]']},
    'keysExamined': 6086,
    'seeks': 1,
    'dupsTested': 0,
    'dupsDropped': 0}},
  'allPlansExecution': []},
 'serverInfo': {'host': 'wk-caas-9593abe6347a4cef94ae46eec52f397f-e9e060fe618e8387f19fcf',
  'port': 27017,
  'version': '4.2.6',
  'gitVersion': '20364840b8f1af16917e4c23c1b5f5efd8b352f8'},
 'ok': 1.0}
#+end_example

The number of documents examined is indicated in the =docsExamined=
field. The number drops significantly by using an index (~25k vs
~6k). In fact, in this example the number of documents examined is
exactly the number of documents returned (=nReturned=).

The index specification describes the kind of index for that
field. For example, a value of 1 specifies an index that orders items
in ascending order. A value of -1 specifies an index that orders items
in descending order. *Note that index direction only matters in a
compound index.*

To remove all indexes, you can use =db.collection.drop_indexes()=.
Example:

#+NAME: DDA3B0FB-027B-4FAC-9F56-6291505F42B1
#+BEGIN_SRC python
  print("Before drop_indexes():")
  for index in db.restaurants.list_indexes():
      pprint(index)
  print("Now we drop all indexes...")
  db.restaurants.drop_indexes()
  print("After drop_indexes():")
  for index in db.restaurants.list_indexes():
      pprint(index)
#+END_SRC

#+RESULTS: DDA3B0FB-027B-4FAC-9F56-6291505F42B1
#+begin_example
Before drop_indexes():
{'key': SON([('_id', 1)]),
 'name': '_id_',
 'ns': 'test.restaurants',
 'v': 2}
{'key': SON([('cuisine', -1), ('borought', 1)]),
 'name': 'cuisine_-1_borought_1',
 'ns': 'test.restaurants',
 'v': 2}
{'key': SON([('borough', 1)]),
 'name': 'borough_1',
 'ns': 'test.restaurants',
 'v': 2}

Now we drop all indexes...
After drop_indexes():
{'key': SON([('_id', 1)]),
 'name': '_id_',
 'ns': 'test.restaurants',
 'v': 2}
#+end_example

To remove a specific index you can use
=db.collection.drop_index(index_name)=. 

Example:

#+NAME: 09388F82-8683-46C6-8418-C14773A350F8
#+BEGIN_SRC python
print('Create some indexes first...')

## notice that as in the below case when you have two variables you
## index over the index is a compound index being formed by the two
## variables in the end.
db.restaurants.create_index([('cuisine', -1), ('borought', 1)]) ## notice
                                                                ## that
                                                                ## when
                                                                ## indexing
                                                                ## -1
                                                                ## stands
                                                                ## for
                                                                ## DESC
                                                                ## and
                                                                ## 1
                                                                ## for
                                                                ## ASC
index_name = db.restaurants.create_index('address.building')
print('\nNow we have these indexes:')
for index in db.restaurants.list_indexes():
    pprint(index)

print('\nThen drop_index()...')
db.restaurants.drop_index(index_name)
print('\nThe remaining indexes are:')
for index in db.restaurants.list_indexes():
    pprint(index)
#+END_SRC

#+RESULTS: 09388F82-8683-46C6-8418-C14773A350F8
#+begin_example
Create some indexes first...


Now we have these indexes:
{'key': SON([('_id', 1)]),
 'name': '_id_',
 'ns': 'test.restaurants',
 'v': 2}
{'key': SON([('cuisine', -1), ('borought', 1)]),
 'name': 'cuisine_-1_borought_1',
 'ns': 'test.restaurants',
 'v': 2}
{'key': SON([('borough', 1)]),
 'name': 'borough_1',
 'ns': 'test.restaurants',
 'v': 2}
{'key': SON([('address.building', 1)]),
 'name': 'address.building_1',
 'ns': 'test.restaurants',
 'v': 2}

Then drop_index()...

The remaining indexes are:
{'key': SON([('_id', 1)]),
 'name': '_id_',
 'ns': 'test.restaurants',
 'v': 2}
{'key': SON([('cuisine', -1), ('borought', 1)]),
 'name': 'cuisine_-1_borought_1',
 'ns': 'test.restaurants',
 'v': 2}
{'key': SON([('borough', 1)]),
 'name': 'borough_1',
 'ns': 'test.restaurants',
 'v': 2}
#+end_example


* Pymongo Query Syntax and exercises

For the =db.collection.find()= method, you can specify the following
optional fields: 

- a *query filter* to specify which documents to return

- a *query projection* to specify which fields from the matching
  documents to return (the projection limits the amount of data that
  MongoDB returns to the client over the network)

- optionally, a *cursor modifier* to impose limits, skips, and sort
  orders

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+CAPTION: query
[[https://docs.mongodb.com/manual/_images/crud-annotated-mongodb-find.bakedsvg.svg]]

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+NAME: 572FCCA6-3240-41E9-9B42-FF370E05F4B3
#+BEGIN_SRC python
  # Using a query filter
  for doc in db.scientists.find({"Theory": "Particle Physics"}):
      pprint(doc)
#+END_SRC

#+RESULTS: 572FCCA6-3240-41E9-9B42-FF370E05F4B3
: {'Name': {'First': 'Albert', 'Last': 'Einstein'},
:  'Theory': 'Particle Physics',
:  '_id': ObjectId('5ec23ff95943d7fdd2c9e080')}

#+NAME: 2E3B7CB7-7932-4B7B-8935-CF348C492676
#+BEGIN_SRC python
# Using a projection
for doc in db.scientists.find(
        {"Theory": "Particle Physics"},  ## where
        {"Name.Last": 1}):               ## select
    pprint(doc)
#+END_SRC

#+RESULTS: 2E3B7CB7-7932-4B7B-8935-CF348C492676
: {'Name': {'Last': 'Einstein'}, '_id': ObjectId('5ec23ff95943d7fdd2c9e080')}

#+NAME: EFD9DFA6-944F-4C85-8230-C8F793E449C6
#+BEGIN_SRC python
# Using a projection, with "_id" output disabled
for doc in db.scientists.find(
        {"Theory": "Particle Physics"}, ## where
        {"_id": 0, "Name.Last": 1}):    ## select, so 0 you explictly
                                        ## tell not to return the _id
                                        ## key.
    pprint(doc)
#+END_SRC

#+RESULTS: EFD9DFA6-944F-4C85-8230-C8F793E449C6
: {'Name': {'Last': 'Einstein'}}

#+NAME: D18B152F-860A-4A9D-807D-FA10A2CAD676
#+BEGIN_SRC python
  # Insert more documents
  doc_list = [
      {"Name":"Einstein", "Profession":"Physicist"},
      {"Name":"Gödel", "Profession":"Mathematician"},
      {"Name":"Ramanujan", "Profession":"Mathematician"},
      {"Name":"Pythagoras", "Profession":"Mathematician"},
      {"Name":"Turing", "Profession":"Computer Scientist"},
      {"Name":"Church", "Profession":"Computer Scientist"},
      {"Name":"Nash", "Profession":"Economist"},
      {"Name":"Euler", "Profession":"Mathematician"},
      {"Name":"Bohm", "Profession":"Physicist"},
      {"Name":"Galileo", "Profession":"Astrophysicist"},
      {"Name":"Lagrange", "Profession":"Mathematician"},
      {"Name":"Gauss", "Profession":"Mathematician"},
      {"Name":"Thales", "Profession":"Mathematician"}
  ]
  scientists.insert_many(doc_list)
#+END_SRC

#+RESULTS: D18B152F-860A-4A9D-807D-FA10A2CAD676
: <pymongo.results.InsertManyResult at 0x10395a460>

#+NAME: F011326B-E0F3-41E6-BC85-C13F05740252
#+BEGIN_SRC python
# Using cursor modifiers
print("Using sort:")
for doc in scientists.find({"Profession": "Mathematician"}, {"_id": 0, "Name": 1}).sort("Name", 1):
    pprint(doc)

print("Using skip:")
for doc in scientists.find(
        {"Profession": "Mathematician"}, 
        {"_id": 0, "Name": 1}).sort("Name", 1) \  ## notice in sort: 1
                                                  ## = ASC and -1: DSC

                     .skip(1):  ## skip the first result
    pprint(doc)

print("Using limit:")
for doc in scientists.find(
        {"Profession": "Mathematician"}, 
        {"_id": 0, "Name": 1}) \
                     .sort("Name", 1).skip(1).limit(3):  ## skip the
                                                         ## first one
                                                         ## and limit
                                                         ## to the
                                                         ## first
                                                         ## three
                                                         ## results
    pprint(doc)
#+END_SRC

#+RESULTS: F011326B-E0F3-41E6-BC85-C13F05740252
#+begin_example
Using sort:
{'Name': 'Euler'}
{'Name': 'Gauss'}
{'Name': 'Gödel'}
{'Name': 'Lagrange'}
{'Name': 'Pythagoras'}
{'Name': 'Ramanujan'}
{'Name': 'Thales'}

Using skip:
{'Name': 'Gauss'}
{'Name': 'Gödel'}
{'Name': 'Lagrange'}
{'Name': 'Pythagoras'}
{'Name': 'Ramanujan'}
{'Name': 'Thales'}

Using limit:
{'Name': 'Gauss'}
{'Name': 'Gödel'}
{'Name': 'Lagrange'}
#+end_example

#+NAME: 8FF0F8F6-1F30-406F-8FBC-6AE7FEA1EDA0
#+BEGIN_SRC python
# Updating documents

# Adding a new field:
scientists.update_many({"Name": "Einstein"}, 
                       {"$set": {"Century" : "20"}}) ## update the
                                                     ## field when the
                                                     ## matched
                                                     ## occurred.

pprint(scientists.find_one({"Name": "Einstein"}))

# Changing the type of a field:
scientists.update_many(
    {"Name": "Nash"}, 
    {"$set": {"Profession" : ["Mathematician", "Economist"]}}
)
pprint(scientists.find_one({"Name": "Nash"}))
#+END_SRC

#+RESULTS: 8FF0F8F6-1F30-406F-8FBC-6AE7FEA1EDA0
: {'Century': '20',
:  'Name': 'Einstein',
:  'Profession': 'Physicist',
:  '_id': ObjectId('5ec242ce5943d7fdd2c9e083')}

: {'Name': 'Nash',
:  'Profession': ['Mathematician', 'Economist'],
:  '_id': ObjectId('5ec242ce5943d7fdd2c9e089')}

#+NAME: FF480189-EE87-4070-8879-66346033DDE7
#+BEGIN_SRC python
# Matching array elements
for doc in scientists.find({"Profession": "Mathematician"}, ## notice
                                                            ## that
                                                            ## this
                                                            ## also
                                                            ## maps
                                                            ## the
                                                            ## Mathematician
                                                            ## Profession
                                                            ## within
                                                            ## an
                                                            ## array
                           {"_id": 0, "Name": 1, "Profession": 1}) \
                     .sort("Name", 1):
    pprint(doc)
#+END_SRC

#+RESULTS: FF480189-EE87-4070-8879-66346033DDE7
: {'Name': 'Euler', 'Profession': 'Mathematician'}
: {'Name': 'Gauss', 'Profession': 'Mathematician'}
: {'Name': 'Gödel', 'Profession': 'Mathematician'}
: {'Name': 'Lagrange', 'Profession': 'Mathematician'}
: {'Name': 'Nash', 'Profession': ['Mathematician', 'Economist']}
: {'Name': 'Pythagoras', 'Profession': 'Mathematician'}
: {'Name': 'Ramanujan', 'Profession': 'Mathematician'}
: {'Name': 'Thales', 'Profession': 'Mathematician'}

#+NAME: 9EF129E3-4F4D-48E7-947E-86E04A1D4153
#+BEGIN_SRC python
  # Delete documents
  scientists.delete_one({"Profession": "Astrophysicist"})
  scientists.count_documents({"Name": "Galileo"})
#+END_SRC

#+RESULTS: 9EF129E3-4F4D-48E7-947E-86E04A1D4153
: 0

** Exercises

 *1)* All restaurants in borough (a town) "Brooklyn" and cuisine (a
 style of cooking) "Hamburgers".

 #+NAME: 4B0E88F4-2AFE-4B9D-8EA1-31A27BE29677
 #+BEGIN_SRC python
  # insert your query here:
  cursor = db.restaurants.find(
      {"borough": "Brooklyn", # comma = AND
       "cuisine": "Hamburgers"}, ## where
  )
  pprint(cursor[0]) # print the first returned document
 #+END_SRC

 #+RESULTS: 4B0E88F4-2AFE-4B9D-8EA1-31A27BE29677
 #+begin_example
{'_id': ObjectId('5ec1004c701328e839780a37'),
 'address': {'building': '469',
             'coord': [-73.961704, 40.662942],
             'street': 'Flatbush Avenue',
             'zipcode': '11225'},
 'borough': 'Brooklyn',
 'cuisine': 'Hamburgers',
 'grades': [{'date': datetime.datetime(2014, 12, 30, 0, 0),
             'grade': 'A',
             'score': 8},
            {'date': datetime.datetime(2014, 7, 1, 0, 0),
             'grade': 'B',
             'score': 23},
            {'date': datetime.datetime(2013, 4, 30, 0, 0),
             'grade': 'A',
             'score': 12},
            {'date': datetime.datetime(2012, 5, 8, 0, 0),
             'grade': 'A',
             'score': 12}],
 'name': "Wendy'S",
 'restaurant_id': '30112340'}
 #+end_example

 *2)* The number of restaurants in the borough "Brooklyn" and cuisine
 "Hamburgers".

 #+NAME: 2EA4E43E-05C2-4AE2-AD3C-508CD83AA618
 #+BEGIN_SRC python
  # insert your query here:
  db.restaurants.count_documents(
       {"borough": "Brooklyn", # comma = AND
       "cuisine": "Hamburgers"}) ## where)
 #+END_SRC

 #+RESULTS: 2EA4E43E-05C2-4AE2-AD3C-508CD83AA618
 : 102

 *3)* All restaurants with zipcode 11225.

 #+NAME: A7D29759-8F46-43E4-8EF3-2190DB59F9FF
 #+BEGIN_SRC python
  # insert your query here:
  cursor = db.restaurants.find(
      {"address.zipcode": "11225"})
  pprint(cursor[0]) # print the first returned document
 #+END_SRC

 #+RESULTS: A7D29759-8F46-43E4-8EF3-2190DB59F9FF
 #+begin_example
{'_id': ObjectId('5ec1004c701328e839780a37'),
 'address': {'building': '469',
             'coord': [-73.961704, 40.662942],
             'street': 'Flatbush Avenue',
             'zipcode': '11225'},
 'borough': 'Brooklyn',
 'cuisine': 'Hamburgers',
 'grades': [{'date': datetime.datetime(2014, 12, 30, 0, 0),
             'grade': 'A',
             'score': 8},
            {'date': datetime.datetime(2014, 7, 1, 0, 0),
             'grade': 'B',
             'score': 23},
            {'date': datetime.datetime(2013, 4, 30, 0, 0),
             'grade': 'A',
             'score': 12},
            {'date': datetime.datetime(2012, 5, 8, 0, 0),
             'grade': 'A',
             'score': 12}],
 'name': "Wendy'S",
 'restaurant_id': '30112340'}
 #+end_example

 *4)* Names of restaurants with zipcode 11225 that have at least one
 grade "C".

 #+NAME: 17466897-0020-42EF-BAD5-AE9B7B97E7E6
 #+BEGIN_SRC python
# insert your query here:
cursor = db.restaurants.find(
    {
        "address.zipcode" : "11225",
        "grades.grade" : "C"
    }
)
pprint(cursor[0]) # print the first returned document
 #+END_SRC

 #+RESULTS: 17466897-0020-42EF-BAD5-AE9B7B97E7E6
 #+begin_example
{'_id': ObjectId('5ec1004c701328e83978109a'),
 'address': {'building': '967',
             'coord': [-73.9506875, 40.6650304],
             'street': 'Nostrand Avenue',
             'zipcode': '11225'},
 'borough': 'Brooklyn',
 'cuisine': 'Caribbean',
 'grades': [{'date': datetime.datetime(2014, 3, 26, 0, 0),
             'grade': 'A',
             'score': 10},
            {'date': datetime.datetime(2013, 10, 16, 0, 0),
             'grade': 'B',
             'score': 19},
            {'date': datetime.datetime(2013, 3, 5, 0, 0),
             'grade': 'A',
             'score': 7},
            {'date': datetime.datetime(2012, 9, 4, 0, 0),
             'grade': 'A',
             'score': 12},
            {'date': datetime.datetime(2012, 2, 7, 0, 0),
             'grade': 'B',
             'score': 16},
            {'date': datetime.datetime(2011, 11, 4, 0, 0),
             'grade': 'C',
             'score': 17},
            {'date': datetime.datetime(2011, 6, 24, 0, 0),
             'grade': 'C',
             'score': 11},
            {'date': datetime.datetime(2011, 5, 27, 0, 0),
             'grade': 'P',
             'score': 5}],
 'name': "Vee'S Restaurant",
 'restaurant_id': '40536063'}
 #+end_example

 *5)* Names of restaurants with zipcode 11225 that have as first grade
 "C" and as second grade "A".

 #+NAME: 77DF8659-FD7F-47A7-B2C5-1A306037AF3D
 #+begin_src python :results output
cursor = db.restaurants.find(
    {
        "address.zipcode" : "11225",
        "grades.0.grade": "C",
        "grades.1.grade": "A"
    },
    {
    #     "grades.0.grade": 1 ## selection through this syntax does not work for some reason.
        "name" : 1,
        "address.street" : 1
    }
)
pprint(cursor[0]) # print the first returned document
 #+end_src

 #+RESULTS: 77DF8659-FD7F-47A7-B2C5-1A306037AF3D
 : {'_id': ObjectId('5ec1004e701328e839785bc4'),
 :  'address': {'street': 'Flatbush Avenue'},
 :  'name': 'Careta Bar & Restaurant'}

 *6)* Names and streets of restaurants that don't have an "A" grade.

 #+NAME: 0E3F747B-91B9-4C1F-AAB5-36C4F0D6AB6F
 #+BEGIN_SRC python
# insert your query here:
cursor = db.restaurants.find(
    {
        "grades.grade": {
            "$nin": ["A"]}
    },
    {
        "name" : 1,
        "address.street" : 1
    }
)
pprint(cursor[0]) # print the first returned document
 #+END_SRC

 #+RESULTS: 0E3F747B-91B9-4C1F-AAB5-36C4F0D6AB6F
 : {'_id': ObjectId('5ec1004c701328e839780beb'),
 :  'address': {'street': 'Thompson Street'},
 :  'name': 'Tomoe Sushi'}

 *7)* All restaurants with a grade C and a score greater than 50 for
 that grade at the same time.

 *for that grade*

 #+NAME: 46F2EC67-4A07-49AD-B19E-3FAA7B1AC19E
 #+BEGIN_SRC python
# insert your query here:
cursor = db.restaurants.find(
     {
         "grades" : {"$elemMatch" : {
				      "grade" : "C", 
				      "score" : {"$gt" : 50}
				     }
                     }
     }
)
pprint(cursor[0])
## pprint(cursor[5]["grades"][0]["grade"]) # print the first returned document
 #+END_SRC

 #+RESULTS: 46F2EC67-4A07-49AD-B19E-3FAA7B1AC19E
 #+begin_example
{'_id': ObjectId('5ec1004c701328e839780a42'),
 'address': {'building': '1269',
             'coord': [-73.871194, 40.6730975],
             'street': 'Sutter Avenue',
             'zipcode': '11208'},
 'borough': 'Brooklyn',
 'cuisine': 'Chinese',
 'grades': [{'date': datetime.datetime(2014, 9, 16, 0, 0),
             'grade': 'B',
             'score': 21},
            {'date': datetime.datetime(2013, 8, 28, 0, 0),
             'grade': 'A',
             'score': 7},
            {'date': datetime.datetime(2013, 4, 2, 0, 0),
             'grade': 'C',
             'score': 56},
            {'date': datetime.datetime(2012, 8, 15, 0, 0),
             'grade': 'B',
             'score': 27},
            {'date': datetime.datetime(2012, 3, 28, 0, 0),
             'grade': 'B',
             'score': 27}],
 'name': 'May May Kitchen',
 'restaurant_id': '40358429'}
 #+end_example

 *8)* All restaurants with a grade C or a score greater than 50.

 #+NAME: 47199D0B-2BDD-42AD-908A-4042214B962B
 #+BEGIN_SRC python
# insert your query here:
cursor = db.restaurants.find(
    {
        "$or": [
            {"grades.grade" : "C" },
            {"grades.score" : {"$gt": 50}}
        ]
    }
)
pprint(cursor[8]) # print the first returned document
 #+END_SRC

 #+RESULTS: 47199D0B-2BDD-42AD-908A-4042214B962B
 #+begin_example
{'_id': ObjectId('5ec1004c701328e839780a82'),
 'address': {'building': '251',
             'coord': [-73.9775552, 40.7432016],
             'street': 'East   31 Street',
             'zipcode': '10016'},
 'borough': 'Manhattan',
 'cuisine': 'Italian',
 'grades': [{'date': datetime.datetime(2014, 4, 22, 0, 0),
             'grade': 'A',
             'score': 13},
            {'date': datetime.datetime(2013, 6, 19, 0, 0),
             'grade': 'C',
             'score': 32},
            {'date': datetime.datetime(2012, 5, 22, 0, 0),
             'grade': 'A',
             'score': 12}],
 'name': 'Marchis Restaurant',
 'restaurant_id': '40364668'}
 #+end_example

 *9)* All restaurants that have only A grades.


 #+NAME: A87AC879-239A-476F-B8BF-5D0FAA419C4F
 #+begin_src python :results output
import string
 #+end_src

 #+RESULTS: A87AC879-239A-476F-B8BF-5D0FAA419C4F


 #+NAME: 57F132DF-6C48-4834-B62F-51A666F1843C
 #+BEGIN_SRC python
# insert your query here:
cursor = db.restaurants.find(
    {
        "grades.grade": {"$nin": list(string.ascii_uppercase)[1:]}
        # "$or": 
        # [
        #     {: {}}
        # ]
    }
)
pprint(cursor[0]) # print the first returned document
 #+END_SRC

 #+RESULTS: 57F132DF-6C48-4834-B62F-51A666F1843C
 #+begin_example
{'_id': ObjectId('5ec1004c701328e839780a38'),
 'address': {'building': '351',
             'coord': [-73.98513559999999, 40.7676919],
             'street': 'West   57 Street',
             'zipcode': '10019'},
 'borough': 'Manhattan',
 'cuisine': 'Irish',
 'grades': [{'date': datetime.datetime(2014, 9, 6, 0, 0),
             'grade': 'A',
             'score': 2},
            {'date': datetime.datetime(2013, 7, 22, 0, 0),
             'grade': 'A',
             'score': 11},
            {'date': datetime.datetime(2012, 7, 31, 0, 0),
             'grade': 'A',
             'score': 12},
            {'date': datetime.datetime(2011, 12, 29, 0, 0),
             'grade': 'A',
             'score': 12}],
 'name': 'Dj Reynolds Pub And Restaurant',
 'restaurant_id': '30191841'}
 #+end_example
