#+BEGIN_COMMENT
.. title: Deploying Spring Webapps in Azure
.. slug: deploying-spring-webapps-in-azure
.. date: 2022-03-21 16:34:55 UTC+01:00
.. tags: azure
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT

So starting to make a little bit of order and starting to deploy
directly to Azure.

That is nothing fancy at all. Just basics stuff. With it you can start
to properly experiment in your Sandbox. 

{{{TEASER_END}}}

* Choosing the right subscription

  Ok so had a little bit of an hiccup at the beginning. Could not find
  the new subscription to the sandbox environment I could get for
  experimenting on the cloud.

  Turns out that I had to make a new login to my account. With the
  previous login there was no update.

  Weird stuff.

  Anyways after doing that I could see both of my subscriptions - to
  the secure env and to the sandbox

  #+begin_src sh
az account list -o table
  #+end_src

  Now it is possible to specify the subscriptionId of that table and
  the resource group and directly set up stuff over there.  

* Choosing the runtime

  So the first thing is to choose the right config for your
  applications.

  You can check at the available runtimes with the following:

  #+begin_src sh
az webapp list-runtimes --os linux | grep "JAVA\|TOMCAT\|JBOSSEAP"
  #+end_src

  Interesting is that there is for instance no =Jetty= server. Given
  your recent exploration into async programming and the power of such
  server in that dimension I am struck that azure did not offer such
  an option yet.

  Note that different runtimes need different packaging of the
  underlying bytecode. 

* One Good tool to monitor your application - Kudu

  This is an open source project you would need to understand more if
  you will work a lot with webapps.

  You can read it over [[https://azure.microsoft.com/en-us/blog/windows-azure-websites-online-tools-you-should-know-about/][here]]. Or [[https://docs.microsoft.com/en-us/azure/app-service/resources-kudu][here]]. And [[https://github.com/projectkudu/kudu/wiki][here]].

  Note that when deploying your apps there is always a runtime of such
  Kudu suite. You can understand better how to work with it.

  To this stage I just understand that this is a project that makes it
  possible to manage and monitor your webapps.

  In this sense the Kudu API that is often mentioned as a possibility
  on the microsoft webpage is interacting with that deployed project
  that will steer your app.

  See for instance [[https://docs.microsoft.com/en-us/azure/app-service/configure-language-java?pivots=platform-linux#starting-jar-apps][here]]. You see that you are actually deploying your
  war to that endpoint. There a bit of magic must also happen.

  *Note* there you have as well a bash shell which has a much higher
  response time in comparison to the ssh option.

* Gradle Deployment

  There is a nice plug-in in both gradle and maven that will handle
  the deployment and set up of webapps resources.

  You can check it [[https://docs.microsoft.com/en-us/azure/app-service/configure-language-java?pivots=platform-linux#deploying-your-app][here]].

  Then basically through the plug-in you will have a new command that
  will create your webapp with the given specifications of your
  choice.

  #+begin_src java
azurewebapp {
    subscription = '<your subscription id>'
    resourceGroup = '<your resource group>'
    appName = '<your app name>'
    pricingTier = '<price tier like 'P1v2'>' // check here https://azure.microsoft.com/en-us/pricing/details/app-service/linux/#purchase-options
    region = '<region like 'westus'>' // view locations with az account list-locations -o table
    runtime {
      os = 'Linux'
      webContainer = 'Tomcat 9.0'     // or 'Java SE' if you want to run an executable jar
      javaVersion = 'Java 8'
    }
    // appSettings {
    //     <key> = <value>               // here you can pass specific parameter settings for your application
    // }
    auth {
        type = 'azure_cli'            // support azure_cli, oauth2, device_code and service_principal
    }
}
  #+end_src

  Good.

  Now there is a bit of a distinction you have to do depending on the
  server you are using for your deployment. 

** JAVA SE

   This should be the way to run SpringBoot on Linux. It is clearly
   stated by one person of the App service team on the Microsoft
   blogs.

   See [[https://social.msdn.microsoft.com/Forums/azure/en-US/fe9e80d4-7263-46d4-891c-bf38ca4fcc25/azure-webapp-http-status-404-8211-not-found?forum=windowsazurewebsitespreview][here]].

   So start to work through such server if there is no strong point
   for continuing along the way of TOMCAT.

   Would need to talk with the team.

   If you work with such server everything is straightforward; you
   just
   
   #+begin_src sh
  gradle azureWebAppDeploy
   #+end_src

   and badaboom. Everything will work smoothly.

   Your application is converted to an =app.jar= in
   =/home/site/wwwroot= and everything will be unpackaged and run
   correctly.

   It just may take a while.
  
** TOMCAT

   So here the thing is a bit different as your TOMCAT reads and works
   with =.war=.

   So the first step is to build a =.war= and pass it to the TOMCAT
   within the WebApp in the proper way. 

   Note now that if you deploy a Spring application things are slightly
   more tricky.

   This is because by default Spring packages everything into a
   =.jar=. You can then execute that =.jar= in gradle via the standard

   #+begin_src sh
  ./gradlew.bat bootRun
   #+end_src

   If you want to understand more about that concept check at your
   notes [[https://marcohassan.github.io/bits-of-experience/posts/spring/][here]] in the deployment section.

   Now understand that under the hood when you deploy with the plug-in
   above the thing will not simply start the server but will start as
   well to deploy the artifact of your application.

   Now understand that the TOMCAT server is set up to deploy
   applications packaged as =.war= not as =.jar=.

   In this sense is of paramount importance when deploying spring
   applications to apply as well the =war= plugin such that everything
   will be packaged as a =war= in the correct default location and your
   webapp with your TOMCAT runtime can boot the application correctly.

   #+BEGIN_SRC java :results output drawer :classname 
plugins {

    // Spring Plug-ins
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    
    id 'java'
    id 'war'  // very important
    
    // Microsoft Webapp Plug-in
    id "com.microsoft.azure.azurewebapp" version "1.2.0"
}
   #+END_SRC
  
   Then with it you can deploy your application in the following way

   #+begin_src sh
  gradle azureWebAppDeploy
   #+end_src

   Note that in such a case you deploy a =.war= to the
   =/home/site/wwwroot=.

   So not good enough as often you should live in the
   =/home/site/wwwroot/webapps=.

   Check now the following testing etc.
  
** TODO open issues

   Not working correctly. The application seems to deployed but I
   cannot hit the endpoint. Get 404 error.

   See the [[https://social.msdn.microsoft.com/Forums/azure/en-US/fe9e80d4-7263-46d4-891c-bf38ca4fcc25/azure-webapp-http-status-404-8211-not-found?forum=windowsazurewebsitespreview][following issue]]. This actually put me off the road. Weird
   stuff.... should work according to my mind.

   So not clear to this stage.

   This is a bit what happens in my team. No idea where to put the
   =.war= so weird pipelines are being created that finally reproduce
   the structure of a TOMCAT.

   You could then force everything in a similar way along these lines
   by following the thing over [[https://www.baeldung.com/spring-boot-war-tomcat-deploy][here]].

   What is weird that in such a case you are not leveraging the magic
   of PaaS and for what is worth you could then well go for IaaS in
   this sense.

   So makes totally no sense.

   So will need to fix that at some point when the right moment will
   come. 

   Giving up for now as it is taking too much time and I have to move
   on with other work. Posted a Question on StackOverflow. Try to
   check what answers you get over there. [[https://stackoverflow.com/questions/71584566/deploying-a-war-on-azure-webapps-tomcat-server][Monitor it]].
    
* Understand pricing tiers in Azure

  How are they constrcuted? What are the specifics?

  You can find them [[https://azure.microsoft.com/en-us/pricing/details/app-service/windows/][here]].

  Now for testing on the sandbox env that I finally managed to get you
  can go with the free tier without any issue.

  In any case should you in the future need an overview you can check
  there cause it is not convenient to fake the mock creation via
  web-UI and then exploring there.

  Note as well [[https://docs.microsoft.com/en-us/answers/questions/285699/is-there-a-way-to-get-the-sku-for-a-list-of-web-ap.html][the following option]] if you want to do that via CLI as
  you mostly work and live in there.
  
  

