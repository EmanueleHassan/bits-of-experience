#+BEGIN_COMMENT
.. title: Refactoring - Ediffing and Merging
.. slug: refactoring-ediffing-and-merging
.. date: 2021-06-25 15:48:17 UTC+02:00
.. tags: emacs, git
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT

 #+begin_export html
<style>
.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
</style>
 #+end_export

 So recently I had to do quite some big refactoring and merging for
 some code base.

 I knew about emacs =ediffing= packages that I used already a couple
 of times in the past. It is just a little bit confusing at the
 beginning as it is often the case with emacs, you might well be
 overwhelmed at the beginning. Too many nice features and you might
 quickly get lost in it.

 The below video should give you a quick introduction to ediffing in
 emacs. It is just a very basic tutorial. Then to get more detailed
 information you should check at the [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][official documentation]] (at the
 quick help commands section) telling you about all of the different
 commands that are quite a few.

{{{TEASER_END}}}


   #+begin_export html
   <div class="container"> 
     <iframe class="responsive-iframe" src="https://www.youtube.com/embed/9S2pMZ6U5Tc" frameborder="0" allowfullscreen;> </iframe>
   </div>
   #+end_export


** Working with ediff

   So basically you can enter in the control plane the version that
   you want to keep.

   You can even merge by setting a default version. Meaning you do not
   go through the conflict one by one checking at them and solving
   them.

   You rather select one of the two origin files and this will pose
   your new reference file and all of the conflicts will be solved by
   taking it as source of the truth. 

   After you have solved all of the merge conflicts you can quit the
   ediff session. Use =q= command in emacs for that.

   *It will ask you if you want to save the new file*. After doing this
   you will have your new file without the merged conflicts.
   
** Magit view differences diffing

   This is another snippet I wrote at some time in the past when doing
   some merge etc. I will also add it to this post that should become
   a bit of a repository relating to code version control.

   Puahhh... That was a waste of time. I was trying to understand how to
   view the edits between two commits as in ~git diff <commit 1> <commit
   2>~.

   It turned out that to do that you can simply go in the wip log via =l
   RET l= once you are in the magit status. Then add the highlighting
   marker. Go between the range you want to select and use the common
   diff command =d=. If you are interested in checking the differences
   for a specific file then you can simply use the ~=f~ option before
   selecting the =d= one.

   You can then enter the file path of the file you are interested in,
   for instance =app/test/M001_tests/test_pdf.py=

   A particular option in this sense is also the ediffing of two
   files. This is particularly useful when you have changed something
   and want to go back to the previous version but want to double
   check quickly before what has changed/ just take some of the old
   features. You can then use the knowledge of the previous video and
   of the official documentation. 

   [[https://stackoverflow.com/questions/215718/how-can-i-reset-or-revert-a-file-to-a-specific-revision][How to revert a single file in git]].

   To go back to a specific commit in your git history you can use ~git
   checkout <commit>~. The commit can be easily found in the wip log
   mentioned above.



