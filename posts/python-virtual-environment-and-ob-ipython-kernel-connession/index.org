#+BEGIN_COMMENT
.. title: Python Virtual Environment and Ob-ipython Kernel Connession
.. slug: python-virtual-environment-and-ob-ipython-kernel-connession
.. date: 2020-02-07 11:18:48 UTC+01:00
.. tags: emacs
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT


#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT


This post briefly introduce the creation of a virtual environment and
the initiation of a kernel active on that virtual environment. 

Finally it discusses how to connect to the kernel running given its
ports specifications.

{{{TEASER_END}}}

#+BEGIN_EXPORT html
<br>
#+END_EXPORT

** Virtual Environment Set Up

   Once you installed the virtualenvironment package, either leveraging
   python package manager, homebrew or whatever, you should install
   jupyter in the virtual environment.

   #+BEGIN_SRC sh
   (virtualenv) $ pip3 install jupyter
   #+END_SRC

   It is then possible to instantiate a kernel in the virtual environment
   by running.

   #+BEGIN_SRC sh
   (virtualenv) $ jupyter kernel
   #+END_SRC

   A kernel will be created and you can finally connect to it given its
   ports specifications that you can find in the =.json= of the kernel of
   interest.

   You can find your specified kernels under:

   #+BEGIN_SRC sh :exports both
   jupyter --runtime
   #+END_SRC

   #+RESULTS:
   : /Users/marcohassan/Library/Jupyter/runtime

   The typical information there are as follows:

   #+BEGIN_SRC sh :results output :exports both
   cat /Users/marcohassan/Library/Jupyter/runtime/kernel-25378.json
   #+END_SRC

   #+RESULTS:
   #+begin_example
   {
     "shell_port": 49354,
     "iopub_port": 49357,
     "stdin_port": 49355,
     "control_port": 49356,
     "hb_port": 49359,
     "ip": "127.0.0.1",
     "key": "xxx",
     "transport": "tcp",
     "signature_scheme": "hmac-sha256",
     "kernel_name": ""
   }
   #+end_example

   This kernel will contain the libraries installed in your virtual
   environment.

   Moreover you can use the specifications above for connecting to a
   kernel running on a different machine provided that you can ssh
   into it.

** Restarting your kernel
   
   Once you closed your kernel there is no need to start a new
   one. One per virtual environment is enough. 

   You can restart the session specific kernel by running

   #+BEGIN_SRC sh
   (virtualenv) $ ipython kernel -f <kernel-name>.json
   #+END_SRC

   You can then connect to it in ob-ipython in the usual way and edit
   everything in emacs in =orgmode=.
 

** Integration Ein-python

  Notice that you can also integrate the emacs jupyter notebook
  front-end with ipython where you work directly on the kernel.

  You can simply get the kernel of your notebook started by the
  =ein-run-notebook= by searching it in
  /Users/marcohassan/Library/Jupyter/runtime.

  You can find the last opened kernel by running ~!ls -lt $(jupyter --runtime)~

  And passing this as the =:session= parameter of your ipython cells.
