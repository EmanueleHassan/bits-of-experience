#+BEGIN_COMMENT
.. title: Storage Layer - Object Storage
.. slug: storage-layer-object-storage
.. date: 2020-05-24 15:31:11 UTC+02:00
.. tags: Big Data
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT

#+begin_export html
<style>
img {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
</style>
#+end_export


#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

There are essentially three major storage options. The first being
Block Storage, the second being File Storage and the last being Object
Storage. You can find a good introduction to the three different
options at the [[https://www.ibm.com/cloud/learn/block-storage][following link]].

This post briefly introduces the third storage option above
i.e. object storage.

{{{TEASER_END}}}

#+BEGIN_EXPORT html
<br>
#+END_EXPORT

* The Benefit of Object Storage

To fully understand object storage it is first necessary to understand
the two other types of storage

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
<style>
.container {
  position: relative;
  left: 15%;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
</style>
#+end_export

#+begin_export html
<div class="container"> 
  <iframe class="responsive-iframe" src="https://www.youtube.com/embed/5EqAXnNm0FE" frameborder="0" allowfullscreen;> </iframe>
</div>
 #+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

Important is to understand the merits of each storage type. 

While block storage, so well described above, well works in a
distributed way by acting across different networks and partitioning
the files into small different blocks that can be quickly and
independently accessed /withdrawn it is expensive for applications
where you do not need any particular high performing withdrawal and
editing of your data.

A different storage possibility is the one of File Storage, this works
through the usage of metadata as similarly to a local hard drive,
i.e. the user or application receives data through directory trees,
folders, and individual files. Moreover, this technology is limited to
a LAN (local-area network) and so the amount of data attached to it
cannot scale that much or be distributed around the globe. 

In this scenario Object Storage finds its sweet spot. It is ideal for
saving big amount of data in bulks without splitting them into
different blocks. It has no central orchestrater that is necessary to
implement and maintain and the job of accessing the data is left to
the application user. Object storage is moreover highly scalable as it
is possible to save the same content at various locations also
increasing availability and durability due to the improved fault
tolerance.

Moreover, it is ideal for application when there is the need for
storing a big amount of data - possibly of different formats - that
are not being accessed and modified on a ultra high frequency. Typical
applications for that involve for instance, static website pages,
video storage (highly used by streaming vendors!), dealing with
unstructured data.

#+BEGIN_EXPORT html
<br>
#+END_EXPORT


* Object Storage Specifications

The key ingredients to make object storage scalable are the following:

- Throw the file hierarchy away and throw the file metadata away
  and just focus on the file content.

- Treat the file content as a black box and do not pose any structure
  / strict conditions on data validity.

- Use a simple data model. A trivial to use such as =Key-value= data
  model.

- Scale out using commodity hardware.

The idea is then the following, independently of the vendor - be it
IBM cloud object, amazon S3, or azure blob storage -.

You save your data within objects which are stored themselves into
buckets.

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
 <img width="70%" height="100%" src="../../images/Bildschirmfoto_2020-05-24_um_16.20.10.png" class="center">
#+end_export

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

Recall now that the data model is the one of =key-value=. In this
sense, each file (object) can be accessed by the *key= BucketID +
ObjectID*. Moreover, interesting is that for many vendors the object
size is capped at around =5TB= suggesting that each object is stored
on a single physical machine and is not distributed across machines.

Given now a unique key associated with each object it is then possible
to withdraw the data stored within the object/store new data on new
objects over HTTP via =CRUD= operations.


* Literature

[[https://www.systems.ethz.ch/courses/spring2020/bigdataforeng/material][Big Data for Engineers - ETH course]]
