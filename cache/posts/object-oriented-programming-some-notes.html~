<style>
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
</style>


<p>
So here are some notes on concepts you have to use when working in a
proper OOP way.
</p>

<p>
Once upon a time, I had written some notes about major OOP
concepts. Unfortunately it got lost. Learn your lesson from it as this
is a real pity.
</p>

<p>
In any case start anew here. Basically this should cover a little bit
of Software Design best practices. Add some notes for instance through
the following sources
</p>

<ul class="org-ul">
<li><a href="https://refactoring.guru/design-patterns">design-patterns and refactoring</a> - online source.</li>

<li><a href="http://www.javier8a.com/itc/bd1/articulo.pdf">desing patterns</a> - apparently <i>THE BOOK</i> in order to write proper
software .</li>
</ul>

<p>
So when you read the book it is immediate that the design patterns
ultimately depend on the OOP concepts, such as composition,
inheritance, delegation etc. So basically these are the atoms of OOP
and patterns are based on such atoms. So in the book you start from
the atoms. Otherwise it makes sense to read a separate book completely
dedicated to it, such as: <i>Object-Oriented Thought Process</i>.
</p>

<p>
It is a good investement learning such patterns. You will be then much
better able to decompose the existing applications. This will help you
to navigate big existing legacy applications where no description of
it is attached to it.
</p>

<!-- TEASER_END -->

<div id="outline-container-org78eaaa1" class="outline-2">
<h2 id="org78eaaa1">Design Patterns</h2>
<div class="outline-text-2" id="text-org78eaaa1">
<p>
So taking now a moment to dig into design patterns.
</p>

<p>
Basically understand that they are broadly defined in to 3
categories:
</p>

<ul class="org-ul">
<li><code>Creational patterns</code>: provide object creation mechanisms that
increase flexibility and reuse of existing code.</li>

<li><code>Structural patterns</code>: explain how to assemble objects and classes
into larger structures, while keeping the structures flexible and
efficient.</li>

<li><code>Behavioral patterns</code>: take care of effective communication and
the assignment of responsibilities between objects.</li>
</ul>

<p>
At the end you will see that many things you already started to use
out of the box after a couple of month working more in an OOP way.
</p>
</div>

<div id="outline-container-org449c323" class="outline-3">
<h3 id="org449c323">Map of Design Patterns</h3>
<div class="outline-text-3" id="text-org449c323">
<p>
Generally keep in mind the following overview:
</p>

<img src="../../images/Screenshot 2022-08-25 085656.png" class="center">

<p>
Note that above <b>object patterns</b> refer to object relationships that
can be changed at <b>run-time</b>. In contrast <b>classes patterns</b> refer
to reletionships among classes, meaning these are static and fixed
at <b>compile time</b>.
</p>
</div>
</div>


<div id="outline-container-orga069ca1" class="outline-3">
<h3 id="orga069ca1">Relation Among the Patterns</h3>
<div class="outline-text-3" id="text-orga069ca1">
<p>
Important is as well to understand that there is a relation among
patterns. I.e. it is quite common to combine them in order to
perform the necessary logic of your programs.
</p>

<img src="../../images/Screenshot 2022-08-25 090514.png" class="center">

<p>
Note that some patterns are as well subsititute; think for instance
of <i>prototype</i> and <i>abstract factory</i>.
</p>
</div>
</div>


<div id="outline-container-orgc4f8517" class="outline-3">
<h3 id="orgc4f8517">Intent classification for the different Patterns</h3>
<div class="outline-text-3" id="text-orgc4f8517">
<p>
So you can refer as well to the following for designing the thing.
</p>

<p>
It will be useful as well, especially at the beginning, for
understanding what patterns you want to apply when creating your
code - less so for reverse engineering existing code - I might be
wrong here though.
</p>

<p>
Note that this is a copy and paste from the design patterns book
p. 24-25. 
</p>

<blockquote>
<ol class="org-ol">
<li><p>
Design patterns: Abstract Factory (87),Factory Method
(107),Prototype (117).
</p>

<p>
Creating an object by specifying a class explicitly. Specifying a
class name when you create an object commits you to a particular
implementation instead of a particular interface. This commitment
can complicate future changes. <b>To avoid it, create objects
indirectly</b>.
</p></li>

<li><p>
Design patterns: Chain of Responsibility (223),Command (233).
</p>

<p>
Dependence on specific operations. When you specify a particular
operation, you commit to one way of satisfying a request. By
<b>avoiding hard-coded requests</b>, you make it easier to change the way
a request gets satisfied both at compile-time and at run-time.
</p></li>

<li><p>
Design patterns: Abstract Factory(87),Bridge (151).
</p>

<p>
Dependence on hardware and software platform. External operating
system interfaces and application programming interfaces (APIs) are
different on different hardware and software platforms.Software
that depends on a particular platform will be harder to port to
other platforms.It may even be difficult to keep it up to date on
its native platform. It's important therefore to <b>design your system
to limit its platform dependencies</b>.
</p></li>

<li><p>
Design patterns: AbstractFactory (87),Bridge (151), Memento (283),Proxy (207).
</p>

<p>
Dependence on object representations or implementations. Clients
that know how an object is represented, stored, located, or
implemented might need to be changed when the object
changes. <b>Hiding this information from clients keeps changes from
cascading</b>. So this is the <b>concept of Transparency</b>.
</p></li>

<li><p>
Design patterns: Builder (97), Iterator (257), Strategy (315),
Template Method (325),Visitor(331).
</p>

<p>
Algorithmic dependencies. <b>Algorithms are often extended, optimized,
and replaced</b> during development and reuse. Objects that depend on
an algorithm will have to change when the algorithm
changes. <b>Therefore algorithms that are likely to change should be
isolated</b>.
</p>

<p>
<i>Personal note:</i> sounds much like transparency and the previous
point. Once you have all the patterns studied and clear in the mind
come back here.
</p></li>

<li><p>
Design patterns: AbstractFactory (87), Bridge (151), Chain of
Responsibility (223), Command (233), Facade (185),Mediator (273),
Observer (293).
</p>

<p>
Tight coupling. Classes that are tightly coupled are hard to reuse
in isolation, since they depend on each other. <b>Tight coupling
leads to monolithic systems</b>, where you can't change or remove a
class without understanding and changing many other classes. The
system becomes a dense mass that's hard to learn, port, and
maintain. -&gt; Gordian Knot.
</p>

<p>
<b>Loose coupling increases the probability</b> that a class can be reused
by itself and that a system can be learned, ported, modified, and
extended more easily. Design patterns use techniques such as
abstract coupling and layering to promote loosely coupled systems.
</p>

<p>
Note layering - old trick of CS - add a layer of indirection.
</p></li>

<li><p>
Design patterns: Bridge (151), Chain of Responsibility (223),
Composite (163), Decorator (175), Observer (293),Strategy (315).
</p>

<p>
Customizing an object by subclassing often isn't easy. Every new
class has a fixed implementation overhead (initialization,
finalization, etc.). Defining a subclass also requires an in-depth
understanding of the parent class. For example, overriding one
operation might require overriding another.An overridden operation
might be required to call an inherited operation. And subclassing
can lead to an explosion of classes, because you might have to
introduce many new subclasses for even a simple extension.
</p>

<p>
<b>Object composition in general and delegation</b> in particular
provide flexible <b>alternatives to inheritance for combining
behavior</b>. <b>New functionality</b> can be added to an application by
<b>composing existing objects</b> in new ways rather than by defining
new subclasses of existing classes. On the other hand, <b>heavy use
of object composition can make designs harder to understand</b>. Many
design patterns produce designs in which you can introduce
customized functionality just by defining one subclass and
composing its instances with existing ones.
</p></li>

<li><p>
Design patterns: Adapter (139),Decorator(175),Visitor(331).
</p>

<p>
<b>Inability to alter classes conveniently - these design patterns
fix it</b>.
</p>

<p>
Sometimes you have to modify a class that can't be modified
conveniently.Perhaps you need the source code and don't have it (as
may be the case with a commercial class library). Or maybe any
change would require modifying lots of existing subclasses. Design
patterns offer ways to modify classes in such circumstances.
</p></li>
</ol>
</blockquote>
</div>
</div>


<div id="outline-container-orgebf7d23" class="outline-3">
<h3 id="orgebf7d23">Aspect that can vary per design pattern</h3>
<div class="outline-text-3" id="text-orgebf7d23">
<p>
This is as well useful; in the sense that you can refer to the
following to understand what you would like to keep flexible in
your system and what not.
</p>

<img src="../../images/Screenshot 2022-08-25 164022.png" class="center">
</div>
</div>
</div>


<div id="outline-container-org7e367d2" class="outline-2">
<h2 id="org7e367d2">Logic of OOP that makes some patterns possible</h2>
<div class="outline-text-2" id="text-org7e367d2">
<p>
So one of the mayor concept in OOP is the one of <b>dynamic
binding</b>. This allows patterns such as the abstract factory.
</p>

<p>
The essential idea is that when you trigger a method (a request),
the behaviour is not simply defined by the method itself but it is
rather a combination of <b>object</b> and <b>method</b>, this actually
specifies the operation.
</p>

<blockquote>
<p>
The run-time association of a request to an object and one of its
operations (methods) is known as <b>dynamic binding</b>.
</p>
</blockquote>

<p>
<i>Side note - the concept is clear. There is just a bit of new
terminology. Do not get confused as everything boils down to:</i>
</p>

<blockquote>
<p>
Dynamic binding means that issuing a request doesn't commit you to a
particular implementation until run-time.
</p>
</blockquote>
</div>
</div>


<div id="outline-container-orga29bf71" class="outline-2">
<h2 id="orga29bf71">Creational Patterns</h2>
<div class="outline-text-2" id="text-orga29bf71">
<p>
Creational class patterns defer some part of object creation to
subclasses, while Creational object patterns defer it to another
object.
</p>

<p>
Note that creational patterns heavy leverage the Java future of
reference variables. See for instance the following snippet for it
on your Java notes in the following section.
</p>
</div>


<div id="outline-container-org6ed844e" class="outline-3">
<h3 id="org6ed844e">On reference variables using interafaces&#xa0;&#xa0;&#xa0;<span class="tag"><span class="reference_variable">reference_variable</span></span></h3>
<div class="outline-text-3" id="text-org6ed844e">
<p>
This is convenient. Recall that it was possible to define
reference variables as superclasses and to reference then objects
of subclasses. It was then possible to call the different abstract
methods of the superclass that would then trigger the right call
to the actual implementation of it in the subclass.
</p>

<p>
In a similar way it is possible to create reference variables as
interfaces and point then to the different objects of classes
implementing such interface.
</p>

<p>
<b>Any instance of any class that implements the declared interface
can be referred to by such a variable</b>.
</p>

<p>
The exact way the interface is implemented depends then on the
type of object that the reference interface variable points
at. This in a very similar way to what was already explained for
the case of superclass reference variable.
</p>

<p>
<b>Note:</b> interestingly when you implement a reference variable of
type interface and then refer to an object of some class referring
to that interface you can access all of the methods specified by
the interface via the reference variable but <b>you cannot access
any other members defined in the class</b> implementing the
interface.
</p>

<p>
The method to be executed is looked up dynamically at run time,
allowing classes to be created later than the code which calls
methods on them.
</p>

<blockquote>
<p>
CAUTION Because dynamic lookup of a method at run time incurs a
significant overhead when compared with the normal method invocation
in Java, you should be careful not to use interfaces casually in
performance-critical code.
</p>
</blockquote>
</div>
</div>


<div id="outline-container-org70fcb2c" class="outline-3">
<h3 id="org70fcb2c">Factory Methods</h3>
<div class="outline-text-3" id="text-org70fcb2c">
<p>
Basically this is the one I was already noting when making some
notes generally about Java.
</p>

<p>
This is very core in order to write a bit of solid code. You have to
understand and interiorize it.
</p>

<p>
Basically the idea is the following:
</p>

<ul class="org-ul">
<li><p>
Define an interface for creating an object, but let subclasses
decide <b>which class</b> (so you see this pattern is at class level -
meaning compile time) to instantiate.
</p>

<p>
Factory Method lets a class defer instantiation to subclasses.
</p></li>

<li>So that is basically a <i>virtual</i> constructor via a method.</li>
</ul>

<p>
So the idea is essentailly the following:
</p>

<img src="../../images/Screenshot 2022-01-28 122956.png" class="center">

<p>
Note that this is called <b>method</b> for a reason. You have actually
here a method in the interface and the ProductOne and ProductTwo in
the above will <b>implement that method constructing an object from
the desired class</b>. So actually the construction happens via method
and not by reference assigning an object to a general
interface. Keep this <i>well into your mind</i>.
</p>

<img src="../../images/Screenshot 2022-08-26 155654.png" class="center">
</div>

<ul class="org-ul">
<li><a id="org12c3c79"></a>On a side note in debugging<br />
<div class="outline-text-5" id="text-org12c3c79">
<p>
So basically I am working quite a bit on some legacy code. You
should be careful about such factory methods as when you have for
instance interfaces which are implemented by similar but
different objects - possibly in a hierarchical way -, say for
instance <code>AbstractFeed</code> and <code>AbstractQuarterly</code>  (implementing
Abstractfeed) and overwriting some methods, well then you see
that it is easy to get confused.
</p>

<p>
You will notice that factory structure by debugging the thing. 
</p>
</div>
</li>
</ul>
</div>


<div id="outline-container-orgcf0aab3" class="outline-3">
<h3 id="orgcf0aab3">Abstract Factory</h3>
<div class="outline-text-3" id="text-orgcf0aab3">
<p>
This is another pattern that uses the concept of dynamic binding in
OOP.
</p>

<p>
Note that the way it uses such concept is quite elaborated.
</p>

<p>
I will elaborate next but you see that such patterns are indeed
swiss knifes. Meaning it is not something that you implement on the
fly when you program. At least not at the beginning. You have to
make some explicit thinking before and take quite some design
steps.
</p>

<p>
In general this pattern looks as follows:
</p>

<img src="../../images/Screenshot 2022-08-26 162111.png" class="center">

<p>
And to understand that better think of the following
implementation:
</p>

<img src="../../images/Screenshot 2022-08-26 162847.png" class="center">

<p>
In this sense understand the following pseudo-code in order to
understand the pattern - note that <b>factory methods</b> are used (you
can also use other patterns such as prototypes there -:   
</p>

<div class="highlight"><pre><span></span>   <span class="c1">// The abstract factory interface declares a set of methods that</span>
   <span class="c1">// return different abstract products. These products are called</span>
   <span class="c1">// a family and are related by a high-level theme or concept.</span>
   <span class="c1">// Products of one family are usually able to collaborate among</span>
   <span class="c1">// themselves. A family of products may have several variants,</span>
   <span class="c1">// but the products of one variant are incompatible with the</span>
   <span class="c1">// products of another variant.</span>
   <span class="kd">interface</span> <span class="nc">GUIFactory</span> <span class="n">is</span>
       <span class="n">method</span> <span class="nf">createButton</span><span class="p">():</span><span class="n">Button</span>
       <span class="n">method</span> <span class="nf">createCheckbox</span><span class="p">():</span><span class="n">Checkbox</span>


   <span class="c1">// Concrete factories produce a family of products that belong</span>
   <span class="c1">// to a single variant. The factory guarantees that the</span>
   <span class="c1">// resulting products are compatible. Signatures of the concrete</span>
   <span class="c1">// factory&#39;s methods return an abstract product, while inside</span>
   <span class="c1">// the method a concrete product is instantiated.</span>
   <span class="kd">class</span> <span class="nc">WinFactory</span> <span class="kd">implements</span> <span class="n">GUIFactory</span> <span class="n">is</span>
       <span class="n">method</span> <span class="nf">createButton</span><span class="p">():</span><span class="n">Button</span> <span class="n">is</span>
	   <span class="k">return</span> <span class="k">new</span> <span class="nf">WinButton</span><span class="p">()</span>
       <span class="n">method</span> <span class="nf">createCheckbox</span><span class="p">():</span><span class="n">Checkbox</span> <span class="n">is</span>
	   <span class="k">return</span> <span class="k">new</span> <span class="nf">WinCheckbox</span><span class="p">()</span>

   <span class="c1">// Each concrete factory has a corresponding product variant.</span>
   <span class="c1">// so you see this uses factory methods</span>
   <span class="kd">class</span> <span class="nc">MacFactory</span> <span class="kd">implements</span> <span class="n">GUIFactory</span> <span class="n">is</span>
       <span class="n">method</span> <span class="nf">createButton</span><span class="p">():</span><span class="n">Button</span> <span class="n">is</span>
	   <span class="k">return</span> <span class="k">new</span> <span class="nf">MacButton</span><span class="p">()</span>
       <span class="n">method</span> <span class="nf">createCheckbox</span><span class="p">():</span><span class="n">Checkbox</span> <span class="n">is</span>
	   <span class="k">return</span> <span class="k">new</span> <span class="nf">MacCheckbox</span><span class="p">()</span>


   <span class="c1">// Each distinct product of a product family should have a base</span>
   <span class="c1">// interface. All variants of the product must implement this</span>
   <span class="c1">// interface.</span>
   <span class="kd">interface</span> <span class="nc">Button</span> <span class="n">is</span>
       <span class="n">method</span> <span class="nf">paint</span><span class="p">()</span>

   <span class="c1">// Concrete products are created by corresponding concrete</span>
   <span class="c1">// factories.</span>
   <span class="kd">class</span> <span class="nc">WinButton</span> <span class="kd">implements</span> <span class="n">Button</span> <span class="n">is</span>
       <span class="n">method</span> <span class="nf">paint</span><span class="p">()</span> <span class="n">is</span>
	   <span class="c1">// Render a button in Windows style.</span>

   <span class="kd">class</span> <span class="nc">MacButton</span> <span class="kd">implements</span> <span class="n">Button</span> <span class="n">is</span>
       <span class="n">method</span> <span class="nf">paint</span><span class="p">()</span> <span class="n">is</span>
	   <span class="c1">// Render a button in macOS style.</span>

   <span class="c1">// Here&#39;s the base interface of another product. All products</span>
   <span class="c1">// can interact with each other, but proper interaction is</span>
   <span class="c1">// possible only between products of the same concrete variant.</span>
   <span class="kd">interface</span> <span class="nc">Checkbox</span> <span class="n">is</span>
       <span class="n">method</span> <span class="nf">paint</span><span class="p">()</span>

   <span class="kd">class</span> <span class="nc">WinCheckbox</span> <span class="kd">implements</span> <span class="n">Checkbox</span> <span class="n">is</span>
       <span class="n">method</span> <span class="nf">paint</span><span class="p">()</span> <span class="n">is</span>
	   <span class="c1">// Render a checkbox in Windows style.</span>

   <span class="kd">class</span> <span class="nc">MacCheckbox</span> <span class="kd">implements</span> <span class="n">Checkbox</span> <span class="n">is</span>
       <span class="n">method</span> <span class="nf">paint</span><span class="p">()</span> <span class="n">is</span>
	   <span class="c1">// Render a checkbox in macOS style.</span>


   <span class="c1">// The client code works with factories and products only</span>
   <span class="c1">// through abstract types: GUIFactory, Button and Checkbox. This</span>
   <span class="c1">// lets you pass any factory or product subclass to the client</span>
   <span class="c1">// code without breaking it.</span>
   <span class="kd">class</span> <span class="nc">Application</span> <span class="n">is</span>
       <span class="kd">private</span> <span class="n">field</span> <span class="n">factory</span><span class="p">:</span> <span class="n">GUIFactory</span>
       <span class="kd">private</span> <span class="n">field</span> <span class="n">button</span><span class="p">:</span> <span class="n">Button</span>

       <span class="n">constructor</span> <span class="nf">Application</span><span class="p">(</span><span class="n">factory</span><span class="p">:</span> <span class="n">GUIFactory</span><span class="p">)</span> <span class="n">is</span>
	   <span class="k">this</span><span class="p">.</span><span class="na">factory</span> <span class="o">=</span> <span class="n">factory</span>

       <span class="n">method</span> <span class="nf">createUI</span><span class="p">()</span> <span class="n">is</span>
	   <span class="k">this</span><span class="p">.</span><span class="na">button</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="na">createButton</span><span class="p">()</span>

       <span class="n">method</span> <span class="nf">paint</span><span class="p">()</span> <span class="n">is</span>
	   <span class="n">button</span><span class="p">.</span><span class="na">paint</span><span class="p">()</span>


   <span class="c1">// The application picks the factory type depending on the</span>
   <span class="c1">// current configuration or environment settings and creates it</span>
   <span class="c1">// at runtime (usually at the initialization stage).</span>
   <span class="kd">class</span> <span class="nc">ApplicationConfigurator</span> <span class="n">is</span>
       <span class="n">method</span> <span class="nf">main</span><span class="p">()</span> <span class="n">is</span>
	   <span class="n">config</span> <span class="o">=</span> <span class="n">readApplicationConfigFile</span><span class="p">()</span>

	   <span class="k">if</span> <span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="na">OS</span> <span class="o">==</span> <span class="s">&quot;Windows&quot;</span><span class="p">)</span> <span class="n">then</span>
	       <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WinFactory</span><span class="p">()</span>
	   <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="na">OS</span> <span class="o">==</span> <span class="s">&quot;Mac&quot;</span><span class="p">)</span> <span class="n">then</span>
	       <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MacFactory</span><span class="p">()</span>
	   <span class="k">else</span>
	       <span class="k">throw</span> <span class="k">new</span> <span class="n">Exception</span><span class="p">(</span><span class="s">&quot;Error! Unknown operating system.&quot;</span><span class="p">)</span>

	   <span class="n">Application</span> <span class="n">app</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Application</span><span class="p">(</span><span class="n">factory</span><span class="p">)</span>
</pre></div>
</div>
</div>


<div id="outline-container-org455720f" class="outline-3">
<h3 id="org455720f">Builder</h3>
<div class="outline-text-3" id="text-org455720f">
<p>
You use this pattern in order to create very laborious objects that
require a lot of effort being created.
</p>

<p>
In this sense what you do is to define a builder with all of the
different components that you need for creating the complex
objects. You can then call directly from your client the builder
components that you need to instantiate your complex objects - and
forms, derivatives of it -.
</p>

<p>
Another option is to work with a second type of objects - <i>a
Director</i>.
</p>

<p>
The idea is well sum-up in the following:
</p>

<blockquote>
<p>
If the client code needs to assemble a special, fine-tuned model of a
car, it can work with the builder directly. On the other hand, the
client can delegate the assembly to the director class, which knows
how to use a builder to construct several of the most popular models
of cars.
</p>
</blockquote>

<img src="../../images/Screenshot 2022-08-29 084214.png" class="center">

<p>
So you see for instance in the pattern above that the Director
holds all of the different types of car categories. These are
mapped to the relevant input parameters in the director, which uses
then the general builder objects to create them.
</p>
</div>
</div>


<div id="outline-container-org1c17945" class="outline-3">
<h3 id="org1c17945">Prototype</h3>
<div class="outline-text-3" id="text-org1c17945">
<p>
Prototype is a creational design pattern that lets you copy
existing objects without making your code dependent on their
classes.
</p>

<p>
The essential idea why you need a pattern for it is threefold:
</p>

<blockquote>
<ol class="org-ol">
<li>Not all objects can be copied that way because some of the object’s
fields may be private and not visible from outside of the object
itself.</li>

<li>Since you have to know the object’s class to create a duplicate,
your code becomes dependent on that class. If the extra dependency
doesn’t scare you, there’s another catch.</li>

<li>Sometimes you only know the interface that the object follows, but
not its concrete class, when, for example, a parameter in a method
accepts any objects that follow some interface.</li>
</ol>
</blockquote>

<p>
The pattern works as follows:
</p>

<blockquote>
<p>
The pattern declares a common interface for all objects that support
cloning. This interface lets you clone an object without coupling your
code to the class of that object.
</p>

<p>
Usually, such an interface contains just a single clone method.
</p>

<p>
An object that supports cloning is called a prototype. When your
objects have dozens of fields and hundreds of possible configurations,
cloning them might serve as an alternative to subclassing.
</p>
</blockquote>

<p>
The pattern looks as follows:
</p>

<img src="../../images/Screenshot 2022-08-29 091559.png" class="center">

<p>
As always understand it via the concrete case; it is much more
simple to digest it then:
</p>

<img src="../../images/Screenshot 2022-08-29 100157.png" class="center">

<p>
So that is it. Quite easy to understand; or maybe I am just getting
into the pattern mentality.
</p>
</div>
</div>


<div id="outline-container-org7b81f52" class="outline-3">
<h3 id="org7b81f52">Singleton</h3>
<div class="outline-text-3" id="text-org7b81f52">
<p>
This is again the usual concept in CS. It is to have a single
access to the resources or objects such that you apply exclusivity
<code>a la</code> lord of the flies.
</p>

<p>
It is the concept of <i>Single Responsibility Principle</i>.
</p>

<p>
Here’s how it works: imagine that you created an object, but after
a while decided to create a new one. Instead of receiving a fresh
object, <b>you’ll get the one you already created</b>.
</p>

<p>
Note that this behavior is impossible to implement with a regular
constructor since a constructor call must always return a new
object by design.
</p>

<p>
Note that the above is the general concept and people most often
refer as Singleton an Object solving that issue. <b>Important to
note</b> is that it is much more.
</p>

<p>
The general idea for implementing this is the following:
</p>

<blockquote>
<p>
Make the default constructor private, to prevent other objects from
using the new operator with the Singleton class.
</p>

<p>
Create a static creation method that acts as a constructor. Under the
hood, this method calls the private constructor to create an object
and saves it in a static field.
</p>

<p>
All following calls to this method return the cached object.
</p>
</blockquote>

<p>
This is as well pretty simple to implement. You can think about it
in the following way:
</p>

<img src="../../images/Screenshot 2022-08-29 102854.png" class="center">
</div>
</div>
</div>


<div id="outline-container-orgb97f181" class="outline-2">
<h2 id="orgb97f181">Structural Patterns</h2>
<div class="outline-text-2" id="text-orgb97f181">
<p>
The Structural class patterns use inheritance to compose classes,
while the Structural object patterns describe ways to <b>assemble
objects</b>.
</p>
</div>

<div id="outline-container-orga5c1161" class="outline-3">
<h3 id="orga5c1161">Adapter</h3>
<div class="outline-text-3" id="text-orga5c1161">
<p>
This is a special object that <b>converts the interface</b> of one
object so that another object can understand it.
</p>

<p>
Here is how it works:
</p>

<ol class="org-ol">
<li>The adapter gets an interface, compatible with one of the
existing objects.</li>

<li>Using this interface, the existing object can <b>safely call the
adapter’s methods</b>.</li>

<li>Upon receiving a call, the adapter passes the request to the
second object, but in a format and order that the second object
expects.</li>
</ol>

<p>
It essentially works in such a way:
</p>

<img src="../../images/Screenshot 2022-09-01 164526.png" class="center">

<p>
More precisely in an example:
</p>

<img src="../../images/Screenshot 2022-09-01 164921.png" class="center">

<p>
So what you are essentially doing here is encapsulating the object
into the adapter, and then calling the relevant method of the other
interface which you are interested in.
</p>
</div>
</div>


<div id="outline-container-org5166bb4" class="outline-3">
<h3 id="org5166bb4">Bridge</h3>
<div class="outline-text-3" id="text-org5166bb4">
<p>
This is as well a very cool pattern.
</p>

<p>
It essentially works in the following way:
</p>

<blockquote>
<p>
It lets you split a large class or a set of closely related classes
into two <b>separate hierarchies—abstraction</b> and <b>implementation</b> —
which can be developed independently of each other.
</p>
</blockquote>

<p>
Note that it can be well applied in the following cases:
</p>

<img src="../../images/Screenshot 2022-09-01 171828.png" class="center">

<p>
The solution is to use <b>composition</b> (in UML terms - recall that
with it the associated instances are indeed deleted).
</p>

<p>
It does in fact switch from object inheritance to object
composition.
</p>

<p>
So you see - one of the mayor rules of OOP.
</p>

<img src="../../images/Screenshot 2022-09-01 173419.png" class="center">

<p>
So the concept is very straightforward.
</p>

<p>
The way you implement it, is the following - it is quite trivial
once you start to see the patterns:
</p>

<img src="../../images/Screenshot 2022-09-02 091353.png" class="center">

<img src="../../images/Screenshot 2022-09-02 091442.png" class="center">
</div>
</div>


<div id="outline-container-org8f10b63" class="outline-3">
<h3 id="org8f10b63">Composite</h3>
<div class="outline-text-3" id="text-org8f10b63">
<p>
Composite is a <b>structural design pattern</b> that lets you compose
objects into tree structures and then work with these structures as
if they were individual objects.
</p>

<p>
So this is actually a nice pattern as it is not a trivial one.
</p>

<img src="../../images/Screenshot 2022-09-02 094258.png" class="center">

<p>
The solution for it is the following:
</p>

<blockquote>
<p>
The Composite pattern suggests that you work with Products and Boxes
through a <b>common interface</b> which declares a method for calculating
the total price.
</p>

<p>
How would this method work? For a product, it’d simply return the
product’s price. For a box, it’d <b>go over each item the box contains</b>,
ask its price and then return a total for this box.
</p>

<p>
The greatest benefit of this approach is that you don’t need to care
about the concrete classes of objects that compose the tree. You don’t
need to know whether an object is a simple product or a sophisticated
box. You can treat them all the same via the common interface.
</p>

<p>
When you call a method, the objects themselves pass the request down
the tree.
</p>
</blockquote>

<p>
So this is a cool pattern. You can use it for instance for creating
the relevant entity tree when it will be the time. The current
solution is for instance <a href="http://www.ibase.ru/files/articles/programming/dbmstrees/sqltrees.html">this one</a> - research more this guy and the
tree structure in SQL if you want to go down that path.
</p>

<img src="../../images/Screenshot 2022-09-02 102856.png" class="center">

<p>
See for instance the following example:
</p>

<img src="../../images/Screenshot 2022-09-02 103608.png" class="center">
</div>
</div>


<div id="outline-container-orge18ea52" class="outline-3">
<h3 id="orge18ea52">Decorator</h3>
<div class="outline-text-3" id="text-orge18ea52">
<p>
Decorator is a structural design pattern that lets you <b>attach new
behaviors</b> to objects by placing these objects inside <b>special
wrapper</b> objects that
</p>

<p>
The idea is essentially the following:
</p>

<blockquote>
<p>
“Wrapper” is the alternative nickname for the Decorator pattern that
clearly expresses the main idea of the pattern. A wrapper is <b>an object
that can be linked with some target object</b>.
</p>

<p>
The wrapper contains the same set of methods as the target and
delegates to it all requests it receives. However, the wrapper may
<b>alter the result</b> by <b>doing something</b> either <b>before or after it
passes the request to the target</b>.
</p>
</blockquote>

<p>
Then once you properly undestand the snippet above you should have
no issues understanding the following pictures:
</p>

<img src="../../images/Screenshot 2022-09-05 091730.png" class="center">

<p>
And more explicitely, the above, in an example:
</p>

<img src="../../images/Screenshot 2022-09-05 091833.png" class="center">

<p>
Finally the same concept in a more complex example, where there are
not just decorator classes but other concrete components inheriting
from the wrapper(funny how this post is rendered with different
degrees of complexity to confuse people):
</p>

<img src="../../images/Screenshot 2022-09-05 092039.png" class="center">
</div>
</div>


<div id="outline-container-orga76eb13" class="outline-3">
<h3 id="orga76eb13">Facade</h3>
<div class="outline-text-3" id="text-orga76eb13">
<p>
Facade is a structural design pattern that provides a simplified
interface to a library, a framework, or any other complex set of
classes.
</p>

<blockquote>
<p>
A facade is a class that provides a simple interface to a complex
subsystem which contains lots of moving parts. A facade might provide
limited functionality in comparison to working with the subsystem
directly.
</p>

<p>
However, it <b>includes only those features that clients really care
about</b>.
</p>

<p>
[Comment - this is what you find in your code base when working with
the libraries.]
</p>
</blockquote>

<p>
Note as well:
</p>

<blockquote>
<p>
Having a facade is handy when you need to integrate your app with a
sophisticated library that has dozens of features, but you just need a
tiny bit of its functionality.
</p>
</blockquote>

<p>
So you see the annotations of most frameworks are nothing elese
than the way to implement such facade patterns such that you can
forget everything that is behind it. So you lived through facades
this entire time and it was indeed a healthy discovery to check
what is behind it.
</p>

<p>
The high level idea is the following:
</p>

<img src="../../images/Screenshot 2022-09-05 094602.png" class="center">

<p>
You can see the following basic example for a 101 example - but
<b>never debunk</b> you might well think that there exist much more
sophisticated facades:
</p>

<img src="../../images/Screenshot 2022-09-05 095936.png" class="center">
</div>
</div>


<div id="outline-container-org3abb053" class="outline-3">
<h3 id="org3abb053">Flyweight</h3>
<div class="outline-text-3" id="text-org3abb053">
<p>
Flyweight is a structural design pattern that lets you fit more
objects into the available amount of RAM by <b>sharing common parts
of state between multiple objects</b> instead of keeping all of the
data in each object.
</p>

<p>
So data are not encapsulated in a single object but rather shared
across objects.
</p>

<p>
So essentially the idea of this pattern is that there are intrinsic
things that never change, they are <b>immutable across time</b>. It is
the general relativity and the laws of gravitation, in Albert
Einstein terms.
</p>

<p>
While the flowing of the world we experience is the special
relativity - this is the idea of:
</p>

<blockquote>
<p>
Other parts of a particle’s state, such as coordinates, movement
vector and speed, are unique to each particle. After all, the values
of these fields change over time. This data represents the always
changing context in which the particle exists.
</p>
</blockquote>

<p>
In the pattern website that you are reading:
</p>

<img src="../../images/Screenshot 2022-09-05 113853.png" class="center">

<p>
So basically this means that you <b>can and should</b> create objects
that differ and move but you should not change the general state
that moves all of the objects across time.
</p>

<p>
This is how you are asked to frame the objects of the world.
</p>

<p>
Plus it says that you do not have to create a lot of objects, just
the ones that need a different intrinsic state all the others will
reference to them - the Particles of general relativity.
</p>

<img src="../../images/Screenshot 2022-09-05 114932.png" class="center">
</div>
</div>



<div id="outline-container-org2ce4d6d" class="outline-3">
<h3 id="org2ce4d6d">Proxy</h3>
</div>
</div>






<div id="outline-container-org4ce3553" class="outline-2">
<h2 id="org4ce3553">Behavioural Patterns</h2>
<div class="outline-text-2" id="text-org4ce3553">
<p>
The Behavioral class patterns use inheritance to describe
<i>algorithms and flow of control</i>, whereas the Behavioral object
patterns describe how a group of objects <i>cooperate</i> to perform a
task that no single object can carry out alone.
</p>
</div>

<div id="outline-container-orgf86c44b" class="outline-3">
<h3 id="orgf86c44b">Chain of Responsibility</h3>
</div>

<div id="outline-container-org88faf5f" class="outline-3">
<h3 id="org88faf5f">Command</h3>
</div>

<div id="outline-container-org7795338" class="outline-3">
<h3 id="org7795338">Iterator</h3>
</div>

<div id="outline-container-org4b9996d" class="outline-3">
<h3 id="org4b9996d">Mediator</h3>
</div>

<div id="outline-container-org8dffa64" class="outline-3">
<h3 id="org8dffa64">Memento</h3>
</div>

<div id="outline-container-org6771a54" class="outline-3">
<h3 id="org6771a54">Observer</h3>
</div>

<div id="outline-container-orge39dab2" class="outline-3">
<h3 id="orge39dab2">State</h3>
</div>

<div id="outline-container-org1943eef" class="outline-3">
<h3 id="org1943eef">Strategy</h3>
</div>

<div id="outline-container-org41e6288" class="outline-3">
<h3 id="org41e6288">Template Method</h3>
</div>

<div id="outline-container-org8bba6fe" class="outline-3">
<h3 id="org8bba6fe">Visitor</h3>
</div>
</div>

<div id="outline-container-orgabca041" class="outline-2">
<h2 id="orgabca041">Some core OOP principles you just have to keep on your mind</h2>
<div class="outline-text-2" id="text-orgabca041">
</div>
<div id="outline-container-org3586078" class="outline-3">
<h3 id="org3586078">Polymorphism</h3>
<div class="outline-text-3" id="text-org3586078">
<p>
Overridden methods are another way that Java implements the “one
interface, multiple methods” aspect of polymorphism.
</p>

<p>
Part of the key to successfully applying polymorphism is understanding
that the superclasses and subclasses form a hierarchy which moves from
lesser to greater specialization.  Used correctly, the superclass
provides all elements that a subclass can use directly. It also
defines those methods that the derived class must implement on its
own. This allows the subclass the flexibility to define its own
methods, yet still enforces a consistent interface.
</p>
</div>
</div>

<div id="outline-container-org230e318" class="outline-3">
<h3 id="org230e318">Encapsulation</h3>
<div class="outline-text-3" id="text-org230e318">
<p>
The idea of OOP is the one of keeping data and methods operating on
them together.
</p>

<p>
In such a way you can keep the internal state of the object hidden
from the outside world.
</p>
</div>
</div>



<div id="outline-container-orge8f056b" class="outline-3">
<h3 id="orge8f056b">Key Concept - Favour Prgramming by Interface over Implementation</h3>
<div class="outline-text-3" id="text-orge8f056b">
<p>
The idea is that in OOP you can work through the reference
variables mechanism. You can refresh them: <img src="/java-notes-history-syntax-and-tricks.org" alt="Superclass reference
Subclass"/>, <img src="/java-notes-history-syntax-and-tricks.org" alt="On reference variables using interafaces"/> (note set the
index for emacs locally on www site it will not work).
</p>

<p>
This is in fact many the idea behind creational patterns as you
already got when learning about the concept. 
</p>

<img src="../../images/Screenshot 2022-08-26 093006.png" class="center">
</div>
</div>

<div id="outline-container-org71c58f6" class="outline-3">
<h3 id="org71c58f6">Key Concept - Favour Object Composition over Inheritance</h3>
<div class="outline-text-3" id="text-org71c58f6">
<p>
So in order to understand this, you have to start from the
disadvantages of Inheritance.
</p>

<p>
You can think about it in the following terms:
</p>

<blockquote>
<ol class="org-ol">
<li>You can't change the implementations inherited from parent classes
at run-time, because inheritance is defined at compile-time.</li>

<li><p>
Second, and generally worse, parent classes often define at least
part of their subclasses' physical representation. Because
inheritance exposes a subclass to details of its parent's
implementation, it's often said that "inheritance breaks
encapsulation" [Sny86]. The implementation of a subclass becomes
<b>so bound up with the implementation of its parent class</b> that any
change in the parent's implementation <b>will force the subclass to
change</b>.
</p>

<p>
Implementation dependencies can cause <b>problems when you're trying
to reuse a subclass</b>.
</p>

<p>
This dependency limits flexibility and ultimately reusability. From
here the idea of using <b>object composition</b>.
</p></li>
</ol>
</blockquote>
</div>

<div id="outline-container-org055f062" class="outline-4">
<h4 id="org055f062">Object Composition</h4>
<div class="outline-text-4" id="text-org055f062">
<p>
Object composition is defined dynamically at run-time through
objects acquiring references to other objects.
</p>

<p>
I.e. you encapsulate one object into antoher one. From here the
idea of Object Composition.
</p>

<p>
Because objects are accessed solely through their interfaces, we
don't break encapsulation. Any <b>object can be replaced at run-time
by another as long as it has the same type</b>.
</p>

<p>
Favoring object composition over class inheritance helps you keep
each class encapsulated and focused on one task.
</p>

<p>
So this is the idea of the second principle:
</p>

<blockquote>
<p>
Favor object composition over class inheritance.
</p>
</blockquote>

<p>
Nevertheless, our experience is that designers <b>overuse
inheritance as a reuse technique</b>, and designs are often made more
reusable (and simpler) by depending more on object
composition. You'll see object composition applied again and again
in the design patterns.
</p>
</div>
</div>

<div id="outline-container-org22060c9" class="outline-4">
<h4 id="org22060c9">Delegation</h4>
<div class="outline-text-4" id="text-org22060c9">
<p>
Delegation is a way of making composition as powerful for reuse as
inheritance [Lie86, JZ911]. In delegation, two objects are
involved in handling a request: a <b>receiving object delegates</b>
operations to its delegate - which is encapsulated.
</p>

<p>
The following window example makes quite the point:
</p>

<blockquote>
<p>
Window classmight reuse the behavior of Rectangle by keeping a
Rectangle instance variable and delegating Rectangle-specific behavior
to it.
</p>

<p>
In other words, instead of a Window being a Rectangle, it would have a
Rectangle.
</p>

<p>
Window must now forward requests to its Rectangle instance explicitly,
whereas before it would have inherited those operations.
</p>
</blockquote>

<img src="../../images/Screenshot 2022-08-29 123626.png" class="center">

<p>
Note now the benefit as well, that if you want to change and
create a window with a circle shape you just changing a Rectangle
instance with a <i>Circle instance</i> at run time.
</p>

<p>
Delegation has a disadvantage it shares with other techniques that
make softwaremore flexible through object composition: Dynamic,
highly parameterized software is <b>harder to understand</b> than more
static software. - layer of indirection; solves issues but more
complex. Same as distributed microservices.
</p>

<p>
There are also run-time inefficiencies, but the human
inefficiencies are more important in the long run.
</p>

<p>
Delegation is a good design choice only when it simplifies more
than it complicates.
</p>

<p>
Delegation is an extreme example of object composition. It shows
that you can <b>always replace inheritance with object composition</b>
as a mechanism for code reuse.
</p>
</div>
</div>
</div>

<div id="outline-container-org64db97d" class="outline-3">
<h3 id="org64db97d">Callback Methods</h3>
<div class="outline-text-3" id="text-org64db97d">
<p>
So the basic idea is to create an interface with the methods that
the callback will leverage.
</p>

<p>
Then basically depedning on the object that will implement that
intereface you will fallback to different implementations of it.
</p>

<p>
Check as well at this event. <a href="https://www.tutorialspoint.com/Callback-using-Interfaces-in-Java">Equally good - if not better</a>. 
</p>

<p>
Say for instance the following
</p>

<div class="highlight"><pre><span></span>   <span class="c1">// Java program to demonstrate callback mechanism</span>
   <span class="c1">// using interface is Java</span>

   <span class="c1">// Create interface</span>
   <span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="p">;</span>
   <span class="kd">interface</span> <span class="nc">STax</span> <span class="p">{</span>
       <span class="kt">double</span> <span class="nf">stateTax</span><span class="p">();</span>
   <span class="p">}</span>

   <span class="c1">// Implementation class of Punjab state tax</span>
   <span class="kd">class</span> <span class="nc">Punjab</span> <span class="kd">implements</span> <span class="n">STax</span> <span class="p">{</span>
       <span class="kd">public</span> <span class="kt">double</span> <span class="nf">stateTax</span><span class="p">()</span>
       <span class="p">{</span>
	   <span class="k">return</span> <span class="mf">3000.0</span><span class="p">;</span>
       <span class="p">}</span>
   <span class="p">}</span>

   <span class="c1">// Implementation class of Himachal Pardesh state tax</span>
   <span class="kd">class</span> <span class="nc">HP</span> <span class="kd">implements</span> <span class="n">STax</span> <span class="p">{</span>
       <span class="kd">public</span> <span class="kt">double</span> <span class="nf">stateTax</span><span class="p">()</span>
       <span class="p">{</span>
	   <span class="k">return</span> <span class="mf">1000.0</span><span class="p">;</span>
       <span class="p">}</span>
   <span class="p">}</span>

   <span class="kd">class</span> <span class="nc">TAX</span> <span class="p">{</span>
       <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="p">)</span>
	   <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="p">,</span> <span class="n">IllegalAccessException</span><span class="p">,</span> <span class="n">InstantiationException</span>
       <span class="p">{</span>
	   <span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="na">in</span><span class="p">);</span>
	   <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;Enter the state name&quot;</span><span class="p">);</span>
	   <span class="n">String</span> <span class="n">state</span> <span class="o">=</span> <span class="n">sc</span><span class="p">.</span><span class="na">next</span><span class="p">();</span> <span class="c1">// name of the state</span>

	   <span class="c1">// The state name is then stored in an object c</span>
	   <span class="n">Class</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Class</span><span class="p">.</span><span class="na">forName</span><span class="p">(</span><span class="n">state</span><span class="p">);</span>

	   <span class="c1">// Create the new object of the class whose name is in  c</span>
	   <span class="c1">// Stax interface reference is now referencing that new object</span>
	   <span class="n">STax</span> <span class="n">ref</span> <span class="o">=</span> <span class="p">(</span><span class="n">STax</span><span class="p">)</span><span class="n">c</span><span class="p">.</span><span class="na">newInstance</span><span class="p">();</span>

	   <span class="cm">/*Call the method to calculate total tax</span>
<span class="cm">	     and pass interface reference - this is callback .</span>
<span class="cm">	     Here, ref may refer to stateTax() of Punjab or HP classes</span>
<span class="cm">	     depending on the class for which the object is created</span>
<span class="cm">	     in the previous step</span>
<span class="cm">	   */</span>

	   <span class="n">calculateTax</span><span class="p">(</span><span class="n">ref</span><span class="p">);</span>
       <span class="p">}</span>
       <span class="kd">static</span> <span class="kt">void</span> <span class="nf">calculateTax</span><span class="p">(</span><span class="n">STax</span> <span class="n">t</span><span class="p">)</span>
       <span class="p">{</span>
	   <span class="c1">// calculate central tax</span>
	   <span class="kt">double</span> <span class="n">ct</span> <span class="o">=</span> <span class="mf">2000.0</span><span class="p">;</span>

	   <span class="c1">// calculate state tax</span>
	   <span class="kt">double</span> <span class="n">st</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="na">stateTax</span><span class="p">();</span>
	   <span class="kt">double</span> <span class="n">totaltax</span> <span class="o">=</span> <span class="n">st</span> <span class="o">+</span> <span class="n">ct</span><span class="p">;</span>

	   <span class="c1">// display total tax</span>
	   <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;Total tax =&quot;</span> <span class="o">+</span> <span class="n">totaltax</span><span class="p">);</span>
       <span class="p">}</span>
   <span class="p">}</span>
</pre></div>

<p>
Note that in your code - for instance in the case of the zipParser
you use this concept coupled with the one of functional
programming.
</p>

<p>
I.e. your callback interface is implemented directly via functional
programming and it is never explicitely written anywehere.
</p>
</div>
</div>

<div id="outline-container-orga08ce6b" class="outline-3">
<h3 id="orga08ce6b">Anonymous Inner Classes</h3>
<div class="outline-text-3" id="text-orga08ce6b">
<p>
This is something quite interesting.
</p>

<p>
Anonymous classes are <i>inner classes with no name</i>.
</p>

<p>
Since they have no name, we can't use them in order to create
instances of anonymous classes.
</p>

<p>
As a result, we have to <b>declare and instantiate anonymous classes in
a single expression at the point of use</b>. -&gt; so essentially this is
ultimately the idea.
</p>

<p>
The way you declare this anonymous inner class with no name is the
following:
</p>

<blockquote>
<p>
new ParentClass (&#x2026;) {}
</p>

<p>
where:
</p>

<ul class="org-ul">
<li>ParentClass the class you want to create the inner class in</li>

<li>(&#x2026;) here you have to pass the constructor arguments. Note that
this is <i>necessary</i> as you are creating a new object out of the
box.</li>

<li>{} here you have the methods your anonymous class should implement</li>
</ul>
</blockquote>

<p>
Example
</p>

<div class="highlight"><pre><span></span>   <span class="c1">// Anonymous class - no name.</span>
   <span class="c1">// It basically is an inner class of the parentclass: Book</span>
   <span class="n">myNewObject</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Book</span><span class="p">(</span><span class="s">&quot;Design Patterns&quot;</span><span class="p">)</span> <span class="c1">// constructors arguments of parent class</span>
   <span class="p">{</span>
       <span class="nd">@Override</span>
       <span class="kd">public</span> <span class="n">String</span> <span class="nf">description</span><span class="p">()</span> <span class="p">{</span>   <span class="c1">// inner class with this method</span>
	   <span class="k">return</span> <span class="s">&quot;Famous GoF book.&quot;</span><span class="p">;</span>
       <span class="p">}</span>
   <span class="p">}</span>
</pre></div>

<p>
Note that this is essentially it. The question is then why it is an
<i>inner</i> class? Not that clear to me at this stage. I think that the
naming is a bit confusing.
</p>

<p>
Check at the following minor test that I did. You can in fact as
well access the methods of the parent class. So it looks to me
simply as an extended class object. So don't know keep it as an open
question and do not spend too much time on it now&#x2026; too many things
to learn. 
</p>

<div class="highlight"><pre><span></span>   <span class="kd">class</span> <span class="nc">Person</span><span class="p">{</span>
       <span class="kt">void</span> <span class="nf">eat</span><span class="p">(){};</span>

       <span class="kt">void</span> <span class="nf">helloWorld</span> <span class="p">(){</span>
	   <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span> <span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
       <span class="p">};</span>
   <span class="p">}</span>

   <span class="kd">class</span> <span class="nc">TestAnnonymousInner</span><span class="p">{</span>
       <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]</span><span class="p">){</span>
	   <span class="n">Person</span> <span class="n">p</span><span class="o">=</span><span class="k">new</span> <span class="n">Person</span><span class="p">(){</span>

		   <span class="nd">@Override</span>
		   <span class="kt">void</span> <span class="nf">eat</span><span class="p">(){</span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;nice fruits&quot;</span><span class="p">);}</span>
	       <span class="p">};</span>

	   <span class="n">p</span><span class="p">.</span><span class="na">eat</span><span class="p">();</span>
	   <span class="n">p</span><span class="p">.</span><span class="na">helloWorld</span> <span class="p">();</span>
       <span class="p">}</span>
   <span class="p">}</span>
</pre></div>

<p>
<b>Finally note</b>: that it is very common as well to use the <i>abstract
inner class</i> patterns as well for interfaces. You can use this as
well there.
</p>
</div>
</div>
</div>
