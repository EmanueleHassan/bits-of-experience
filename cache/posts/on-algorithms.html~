<p>
So I am starting this post as always in order to keep structure and
leverage on it thorugh time.
</p>

<p>
The idea is essentially the same of the other post about classical
architectures - and the idea of Da Vinci. Have the map and then
leverage on it thorugh time.
</p>

<p>
I will also create a relevant post for the data structures. I studied
most of them and have made manual notes.
</p>

<p>
Also at some point when making leetcode exercises I improved quite a
bit on them. Make that post as you know how easy it is to foget things
and if you do not have a way to structure the way you work you will be
lost. 
</p>


<!-- TEASER_END -->


<div id="outline-container-org6e7971d" class="outline-2">
<h2 id="org6e7971d">On the general types of algorithms</h2>
<div class="outline-text-2" id="text-org6e7971d">
<p>
So there are essentially 7 types of algorithms that you should be
aware of - and always keep in the back of your mind.
</p>

<p>
These are:
</p>

<ol class="org-ol">
<li><p>
Brute Force Algorithms
</p>

<p>
Just try all of the relevant combinations until you find the
result that you are looking forward to.
</p>

<p>
Think of grid-search etc. 
</p></li>

<li><p>
Recursive Algorithms
</p>

<p>
Recursion is key here.
</p>

<p>
It is resolved by breaking it down into subproblems of a similar
nature and repeating the process over and over until it is
resolved with the help of a base condition.
</p></li>

<li><p>
Dynamic Programming Algorithms
</p>

<p>
Here the core is <b>memoization</b> = to transform the results of a
function into something to remember.
</p>

<p>
Note that this technique is also important for the other personal
project you are currently doing. Check for instance the way to
<i>compute the fibonacci series</i> through it.
</p>

<p>
Note that this types of algorithm is key to <i>Reinforcement
Learning</i> techniques. 
</p></li>

<li><p>
Divide and Conquer Algorithms
</p>

<p>
Here the basic idea is to split the problem and work and reduce
the size of the problem. So always work by splitting / dividing -
conquering and finally coming to your desired result. 
</p></li>

<li><p>
Greedy Algorithms
</p>

<p>
These create a solution portion by portion.
</p>

<p>
Meaning it selects at each iteration a local optimum. By
iteratively computing local optima you will come to global
optimum.
</p>

<p>
Think for instance when you do your math operations by hand. You
compute local stuff iteratively coming to the global.
</p></li>

<li><p>
Backtracking Algorithms
</p>

<p>
This searches for the solution by eleminating solutions that fail
to meet the requirements.
</p>

<p>
I.e. constuct the answer and eliminate solutions that faill to
meet the criteria. 
</p></li>

<li><p>
Randomized Algorithms
</p>

<p>
A randomized algorithm is an algorithm that employs a degree of
randomness as part of its logic or procedure. The algorithm
typically uses uniformly random bits as an auxiliary input to
guide its behavior.
</p>

<p>
This is an algortihm that you have to use as well in your
project. I mean you are using it every second of your life
without even being aware of it. But the beauty is that everything
is connected - everything carries all of the information.
</p>

<p>
So gather that randomness and use it to create the whiteness as
you are doing in - white noise. Also when reading this very
complex book that you are reading. 
</p></li>
</ol>

<p>
Note that you have already already seen most of them.
</p>

<p>
When working on a problem it might be useful to leverage these in
order to classify your approach or delevlop a meaningful one by
yourself. Or at least to understand at the high level what you are
doing. 
</p>
</div>
</div>


<div id="outline-container-orgfccd414" class="outline-2">
<h2 id="orgfccd414">On different types of Algorithms</h2>
<div class="outline-text-2" id="text-orgfccd414">
</div>
<div id="outline-container-orgabd433c" class="outline-3">
<h3 id="orgabd433c">On sorting algorithms</h3>
<div class="outline-text-3" id="text-orgabd433c">
<p>
So coming to the sorting algorithms there are multiple
possibilities for implementing such.
</p>

<p>
You can find an exhaustive list of them <a href="https://www.freecodecamp.org/news/sorting-algorithms-explained-with-examples-in-python-java-and-c/">here</a>.
</p>
</div>

<div id="outline-container-org96bcddb" class="outline-4">
<h4 id="org96bcddb">Counting Sort Algorithm</h4>
<div class="outline-text-4" id="text-org96bcddb">
<p>
I will work now with the counting sort algorithm. This is the one I
need for performing an assignment.
</p>

<p>
It is good cause when sorting it also keeps track of the
occurrences of items. This is exactly what I need.
</p>

<p>
So while there might be sorting algorithms that are faster for the
particular application which is of a low-order <i>n</i> this is quite
satisfying as with it you kills two birds with one stone.
</p>

<div class="highlight"><pre><span></span>    <span class="kn">import</span> <span class="nn">java.util.*</span><span class="p">;</span>

    <span class="kd">class</span> <span class="nc">CountingSort</span> <span class="p">{</span>

	<span class="kd">static</span> <span class="kt">void</span> <span class="nf">countSort</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="p">)</span>  <span class="c1">// Passing by referece. Work with it.</span>
	<span class="p">{</span>

	    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">14</span><span class="p">;</span>
	    <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	    <span class="kt">int</span> <span class="n">range</span> <span class="o">=</span> <span class="n">max</span> <span class="o">-</span> <span class="n">min</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1">// plus 1 cause 0</span>

	    <span class="kt">int</span> <span class="n">count</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">range</span><span class="o">]</span><span class="p">;</span>
	    <span class="kt">int</span> <span class="n">output</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">arr</span><span class="p">.</span><span class="na">length</span><span class="o">]</span><span class="p">;</span>

	    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">.</span><span class="na">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">count</span><span class="o">[</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">min</span><span class="o">]++</span><span class="p">;</span>
	    <span class="p">}</span>

	    <span class="c1">// So below you see - sum all of the occurrences up to the index.</span>
	    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">.</span><span class="na">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">count</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+=</span> <span class="n">count</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span><span class="p">;</span> 
	    <span class="p">}</span>

	    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>    <span class="c1">// -1 cause it starts at 0 the index.</span>
		<span class="n">output</span><span class="o">[</span><span class="n">count</span><span class="o">[</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">min</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span>  <span class="c1">// count [10 + 10] = sum counts until count [5] -1.</span>
		<span class="n">count</span><span class="o">[</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">min</span><span class="o">]--</span><span class="p">;</span>                     <span class="c1">// this is the reason why the above works.</span>
	    <span class="p">}</span>

	    <span class="n">printArray</span> <span class="p">(</span><span class="n">count</span><span class="p">);</span>	 <span class="c1">// count reverse - subtract.</span>

	    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">.</span><span class="na">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">output</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span>
		<span class="c1">// Simply copy the output</span>
		<span class="c1">// array. You could work by value</span>
		<span class="c1">// and not reference and return</span>
		<span class="c1">// the output array instead of</span>
		<span class="c1">// copying it.</span>
	    <span class="p">}</span>

	<span class="p">}</span>

	<span class="kd">static</span> <span class="kt">void</span> <span class="nf">printArray</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="p">)</span>
	<span class="p">{</span>
	    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">.</span><span class="na">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">print</span><span class="p">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="p">);</span>
	    <span class="p">}</span>
	    <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1">// Driver code</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="p">)</span>
	<span class="p">{</span>
	    <span class="c1">//int[] arr = { -5, -10, 0, -3, 8, 5, -1, 10 };</span>

	    <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span> <span class="p">};</span>

	    <span class="c1">// Function call</span>
	    <span class="n">countSort</span><span class="p">(</span><span class="n">arr</span><span class="p">);</span>
	    <span class="n">printArray</span><span class="p">(</span><span class="n">arr</span><span class="p">);</span>
	<span class="p">}</span>
    <span class="p">}</span>
</pre></div>
</div>
</div>



<div id="outline-container-orgdd7296e" class="outline-4">
<h4 id="orgdd7296e"><span class="todo TODO">TODO</span> write on the high level about other possible solutions</h4>
<div class="outline-text-4" id="text-orgdd7296e">
<p>
You could follow <a href="https://www.freecodecamp.org/news/sorting-algorithms-explained-with-examples-in-python-java-and-c/">this arcticle</a>.
</p>
</div>
</div>
</div>
</div>
