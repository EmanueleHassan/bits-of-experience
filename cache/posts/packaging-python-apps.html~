<p>
So this post holds some information around the packaging of python
applications.
</p>

<p>
This will be handy to enter in the serious development world of the
language.
</p>

<p>
This touches a lot as well the point of going in direction DevOps and
consequently it will be foundamental to go in direction MLOps.
</p>

<!-- TEASER_END -->

<p>
So the first piece that will be important to understand in this space
is the one of the central repositories where you publish and fetch
your packages from.
</p>

<p>
It is always the same story. In docekr you have the docker registry,
in emacs you have MELPA, in java you have MavenCentral, in python you
have <code>PyPi</code>.
</p>


<div id="outline-container-orge66e30d" class="outline-2">
<h2 id="orge66e30d">PyPi</h2>
<div class="outline-text-2" id="text-orge66e30d">
<p>
(Python Package Index)- is the official repository for third-party
Python software packages. Every time you use e.g. pip to install a
package that is not in the standard it will get downloaded from the
PyPI server.
</p>

<p>
All of the packages that are on PyPI are publicly visible. So if
you upload your own package then <i>anybody can start using it</i>.
</p>
</div>
</div>


<div id="outline-container-orgd8f28e1" class="outline-2">
<h2 id="orgd8f28e1">DevPi</h2>
<div class="outline-text-2" id="text-orgd8f28e1">
<p>
Check into <a href="https://doc.devpi.net/">this</a> for more. 
</p>

<p>
This is a self hosted private Python Package server. Additionally
you can use it for testing and releasing of your own packages.
</p>

<p>
So everything you post over here is private and will not be visible
across the internet.
</p>

<p>
There are then lots of these repositories in the cloud. For
instance in the azure devops center there are private indexes where
you can publish your Python packages.
</p>

<p>
I guess, that such private repositories are nothing else than DevPi
instances provided by the cloud providers that you can use for
storing your artifacts and fetching them.
</p>
</div>
</div>


<div id="outline-container-org03d4abb" class="outline-2">
<h2 id="org03d4abb">Root Modules for packaging your Python projects</h2>
<div class="outline-text-2" id="text-org03d4abb">
<p>
Here the understanding is not 100% complete yet. You are getting
closer to it. Would need more time. As long as you do not
understand the root behind it you will fail to package everything
correctly.
</p>

<p>
You can read about the lastest of packaging in Python over <a href="https://packaging.python.org/en/latest/flow/">here</a>.
</p>

<p>
So you essentially see that the three major compoenents to this
stage are:
</p>

<ol class="org-ol">
<li><code>distutils</code> - provides support for building and installing
additional modules into a Python installation. The new modules
may be either 100%-pure Python, or may be extension modules
written in C, or may be collections of Python packages which
include modules coded in both Python and C.</li>

<li><code>setuptools</code> - Setuptools is a package development process
library designed to facilitate packaging Python projects by
enhancing the Python standard library distutils (distribution
utilities).</li>

<li><code>twine</code> - for securely publishing the relevant package.</li>
</ol>

<p>
These are the root for publishing in python. All of the different
packaging systems use these then. Read <a href="https://web.archive.org/web/20200227202149/https://zetcode.com/articles/packageinpython/">here</a> in this sense, will
help you quite much.
</p>

<p>
<a href="https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/">This</a> is a second good source. Here you will find as well a good
example for the <code>setup.py</code> file. I rewrote it partially keeping a
bit of the logic. Check at the <code>realoperations</code> and the
<code>setup_config.py</code> in there. 
</p>

<p>
In this sense, understand that what tox uses for uploading and
publishing your modules is in fact the distutils and its most
common command.
</p>

<div class="highlight"><pre><span></span><span class="w">   </span><span class="c1"># requires the build package.</span>
<span class="w">   </span>python<span class="w"> </span>-m<span class="w"> </span>build<span class="w"> </span>--sdist<span class="w"> </span>&lt;source-tree-directory&gt;<span class="w"> </span><span class="c1"># note sdist = source</span>
<span class="w">						   </span><span class="c1"># distribution while</span>
<span class="w">						   </span><span class="c1"># wheel is built</span>
<span class="w">						   </span><span class="c1"># distribution</span>
<span class="w">						   </span><span class="c1"># i.e. already in</span>
<span class="w">						   </span><span class="c1"># bytes. You do not</span>
<span class="w">						   </span><span class="c1"># need a gcc engine or</span>
<span class="w">						   </span><span class="c1"># similar to compile</span>
<span class="w">						   </span><span class="c1"># the C code etc.</span>

<span class="w">    </span>python<span class="w"> </span>-m<span class="w"> </span>build<span class="w"> </span>--wheel<span class="w"> </span>&lt;source-tree-directory&gt;<span class="w"> </span><span class="c1"># creates a wheel that</span>
<span class="w">						    </span><span class="c1"># is ready to run in</span>
<span class="w">						    </span><span class="c1"># binary</span>
</pre></div>

<p>
So you have to understand the difference with twine when you use
it. Is it simply the difference in the secure upload over HTTPS?
</p>

<p>
Yes, that is correct, in fact you see that even when using twine
you have to build the project first into an artifact locally.
</p>

<p>
Then you use twine to upload it to the server of choice, be it a
<code>PyPI</code> server a <code>DevPI</code> server or whatever.
</p>

<p>
Note that through such build systems, you will actually have the
following directories:
</p>

<ul class="org-ul">
<li><code>dist</code>: will hold the packaged package. Say wheel that you can
then upload to your server of choice.</li>

<li><code>build</code>: have to understand what is in here. From the first build
it is not that clear.</li>
</ul>
</div>
</div>


<div id="outline-container-orgbf3452a" class="outline-2">
<h2 id="orgbf3452a">Twine</h2>
<div class="outline-text-2" id="text-orgbf3452a">
<p>
Note that this is in general the recommended way for publishing
python artifacts to either PyPi or DevPi. This due to the secure
communication over HTTPS.
</p>

<p>
In general you can understand twine as a CLI for:
</p>

<ol class="org-ol">
<li>A user-facing tool for publishing on pypi.org</li>

<li>A user-facing tool for publishing on other Python package
indexes (e.g., devpi instances)</li>

<li>A useful API for other programs (e.g., zest.releaser) to call
for publishing on any Python package index</li>
</ol>

<p>
Note that in this sense you have a <code>.pypirc</code> file specifying the
servers where you would like to publish your artifact. You will as
well have the credentials necessary for publishing under this
servers.
</p>

<p>
This is actually what you are doing in the Azure DevOps
pipelines. You can see there that you are given the mentioned
credentials.
</p>

<p>
When you upload your artifacts to Azure make sure that you have the
following dependency:
</p>

<div class="highlight"><pre><span></span><span class="w">   </span>pip<span class="w"> </span>install<span class="w"> </span>twine<span class="w"> </span>keyring<span class="w"> </span>artifacts-keyring
</pre></div>
</div>
</div>


<div id="outline-container-orgcfa0dc0" class="outline-2">
<h2 id="orgcfa0dc0">Tox</h2>
<div class="outline-text-2" id="text-orgcfa0dc0">
<p>
So you can embedd in your tox pipeline the project packaging as
well.
</p>

<p>
So you can both run all of the necessary tests and package/build
the project.
</p>

<p>
You can then publish via twine just upon the successful build.
</p>

<p>
Have still to develop this exact pipeline but this is more less the
idea and general concept.
</p>
</div>


<div id="outline-container-org01174e8" class="outline-3">
<h3 id="org01174e8"><span class="todo TODO">TODO</span> understand how you can</h3>
</div>
</div>


<div id="outline-container-org719e78a" class="outline-2">
<h2 id="org719e78a"><span class="todo TODO">TODO</span> spline</h2>
<div class="outline-text-2" id="text-org719e78a">
<p>
This is the bonus section. Also go deeper into <a href="https://spline.readthedocs.io/en/latest/example.html">this</a>.
</p>

<p>
Just if you have time. 
</p>

<p>
I think this is an interesting project.
</p>

<p>
I would need more time to properly check into this.
</p>

<p>
Unfortunaltely in my current position I have no time to really go
out there and explore and push the boundaries.
</p>

<p>
It is already a miracle keeping the boat afloat and modernizing it
to the <i>current sate</i> of the technologies. 
</p>
</div>
</div>
