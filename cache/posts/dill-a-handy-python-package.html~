<div id="outline-container-orgccd8788" class="outline-2">
<h2 id="orgccd8788">Save local Environment in Ipython and continue from where you left</h2>
<div class="outline-text-2" id="text-orgccd8788">
<p>
How to save your local environment and continue from where you left on
Ipython:
</p>

<p>
<a href="https://www.reddit.com/r/IPython/comments/6reiqp/how_can_i_save_and_load_the_state_of_the_kernel/">https://www.reddit.com/r/IPython/comments/6reiqp/how_can_i_save_and_load_the_state_of_the_kernel/</a>
</p>
</div>
</div>


<div id="outline-container-org2f2577f" class="outline-2">
<h2 id="org2f2577f">Check at the source code of a function you are using in Python</h2>
<div class="outline-text-2" id="text-org2f2577f">
<div class="highlight"><pre><span></span> import dill
 import cProfile
 print(dill.source.getsource(cProfile.Profile.print_stats))
</pre></div>
</div>
</div>


<div id="outline-container-orgb08f4d2" class="outline-2">
<h2 id="orgb08f4d2">Debugging Python within Emacs</h2>
<div class="outline-text-2" id="text-orgb08f4d2">
<p>
<a href="https://www.masteringemacs.org/article/compiling-running-scripts-emacs">https://www.masteringemacs.org/article/compiling-running-scripts-emacs</a>
</p>

<p>
<code>M-x pdb</code> 
</p>

<p>
Then you enter the script you aim to debug.
</p>

<p>
<code>python3 -m pdb app_local.py</code>.
</p>

<p>
Finally you can enter <code>h</code> in the debugger to display all of the
available options for it.
</p>

<p>
<a href="https://jakevdp.github.io/PythonDataScienceHandbook/01.06-errors-and-debugging.html">https://jakevdp.github.io/PythonDataScienceHandbook/01.06-errors-and-debugging.html</a>
</p>
</div>
</div>


<div id="outline-container-orgb149c68" class="outline-2">
<h2 id="orgb149c68">Reload changed module</h2>
<div class="outline-text-2" id="text-orgb149c68">
<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">importlib</span>
<span class="n">importlib</span><span class="o">.</span><span class="n">reload</span><span class="p">(</span><span class="n">prova</span><span class="p">)</span>
</pre></div>

<p>
<a href="https://chrisyeh96.github.io/2017/08/08/definitive-guide-python-imports.html">link on how to deal with import packages</a>
</p>

<p>
Another possibility if you have two modules called in the same way
that are saved on different directories is to use the following
schema:
</p>

<div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">remove_module</span><span class="p">(</span><span class="n">module</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">module</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">modules</span><span class="p">:</span>  
	<span class="k">del</span> <span class="n">sys</span><span class="o">.</span><span class="n">modules</span><span class="p">[</span><span class="n">module</span><span class="p">]</span>
</pre></div>

<p>
This function can then be used in combination to another one where you
remove the <code>path</code> to your module first. Like this when providing the
new sys.path to import the module your Python interpreter will not do
any confusion among the two.
</p>

<p>
For instance in the snippet below I use a regular expression to remove
all the modules that match from the sys.path. Then in a second step I
delete all of the modules maintained by the interpreter.
</p>

<div class="highlight"><pre><span></span><span class="n">r</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;/Users/marcohassan/Desktop/IBM_projects/SchutzRettung/module-analytics/app/src/algorithms/.*&quot;</span><span class="p">)</span>

<span class="n">newlist</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">match</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="p">))</span> <span class="c1"># Read Note</span>

<span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">newlist</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>

<span class="n">mod</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;ranking&#39;</span><span class="p">,</span> <span class="s1">&#39;preprocessingTree&#39;</span><span class="p">,</span> <span class="s1">&#39;extract_tokens&#39;</span><span class="p">,</span>
       <span class="s1">&#39;best_next_question&#39;</span><span class="p">,</span> <span class="s1">&#39;merge&#39;</span><span class="p">,</span> <span class="s1">&#39;rank_word&#39;</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">:</span>
    <span class="n">remove_module</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</pre></div>
</div>
</div>

<div id="outline-container-orgfba8fa3" class="outline-2">
<h2 id="orgfba8fa3">Profiling in Python</h2>
<div class="outline-text-2" id="text-orgfba8fa3">
<p>
<a href="https://docs.python.org/3.2/library/profile.html">https://docs.python.org/3.2/library/profile.html</a>
</p>

<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">cProfile</span>
<span class="kn">import</span> <span class="nn">pstats</span>

<span class="n">pr</span> <span class="o">=</span> <span class="n">cProfile</span><span class="o">.</span><span class="n">Profile</span><span class="p">()</span>
<span class="n">pr</span><span class="o">.</span><span class="n">enable</span><span class="p">()</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">minimize</span><span class="p">(</span><span class="n">min_matched</span><span class="p">,</span> <span class="n">x0</span> <span class="o">=</span> <span class="n">x0</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s1">&#39;nelder-mead&#39;</span><span class="p">,</span> 
	 <span class="n">options</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;xatol&#39;</span><span class="p">:</span> <span class="mf">1e-8</span><span class="p">,</span> <span class="s1">&#39;disp&#39;</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="s1">&#39;maxiter&#39;</span> <span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
		  <span class="s1">&#39;maxfev&#39;</span> <span class="p">:</span> <span class="mi">2</span><span class="p">})</span>

<span class="n">pr</span><span class="o">.</span><span class="n">disable</span><span class="p">()</span>

<span class="n">pstats</span><span class="o">.</span><span class="n">Stats</span><span class="p">(</span><span class="n">pr</span><span class="p">)</span><span class="o">.</span><span class="n">strip_dirs</span><span class="p">()</span><span class="o">.</span><span class="n">sort_stats</span><span class="p">(</span><span class="s1">&#39;cumtime&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">print_stats</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</pre></div>

<p>
Notice that the last argument - the <code>0.01</code> above - means that you will
display only the top 1% percentile of the output. This is handy as
often there are a zillion of minor functions your python interpreter
calls that are probably not interesting to your analysis.
</p>
</div>
</div>


<div id="outline-container-org73121f7" class="outline-2">
<h2 id="org73121f7">Loops with tqdm</h2>
<div class="outline-text-2" id="text-org73121f7">
<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tqdm</span> 
</pre></div>
</div>
</div>

<div id="outline-container-org7a327cd" class="outline-2">
<h2 id="org7a327cd">Staticmethod for Class calls</h2>
<div class="outline-text-2" id="text-org7a327cd">
<p>
with staticmethod you do not have to refer to an class
object. The argument self is omitted as a variable and you
simply call it by using `unite<sub>score.scale</sub><sub>scores</sub>()'. It is
nothing more than a function defined inside a class. It is
callable without instantiating the class first. Itâ€™s definition
is immutable via inheritance.
</p>

<div class="highlight"><pre><span></span><span class="nd">@staticmethod</span>
<span class="k">def</span> <span class="nf">scale_scores</span><span class="p">(</span><span class="n">score_dictionary</span><span class="p">,</span>
		 <span class="n">scale</span> <span class="o">=</span> <span class="s2">&quot;max&quot;</span><span class="p">):</span>
</pre></div>
</div>
</div>

<div id="outline-container-org7d2660f" class="outline-2">
<h2 id="org7d2660f">User interface for data analysis</h2>
<div class="outline-text-2" id="text-org7d2660f">
<p>
see saved item on 
</p>
</div>
</div>
