<br>
<br>


<p>
This post continues the discussion started a few times ago on <a href="https://marcohassan.github.io/bits-of-experience/posts/spark-session-initalization/">RDD and
Spark</a>.
</p>

<p>
I will try to go here in the lifecycle of an RDD and will present the
major Transformation and Actions functions. I will moreover touch on
the physical implementation of Spark as this will give you the mental
tools to properly understand how to properly structure your Spark
workflow in order to optimize the performance.   
</p>

<!-- TEASER_END -->

<br>

<div id="outline-container-org0fc5299" class="outline-2">
<h2 id="org0fc5299">On RDDs</h2>
<div class="outline-text-2" id="text-org0fc5299">
<p>
A brief overview on RDDs was given in the previous post and you are
referred to it for a brief introduction.
</p>

<p>
RDDs are lazy. This, means that only if the data is needed for a
certain computation the data is read from the underlying storage
system.
</p>

<p>
An RDD in Spark is simply an immutable distributed collection of
objects. Each RDD can be split into multiple partitions, which may be
computed on different nodes of the cluster.
</p>

<p>
The typical RDD lifecycle is as follows:
</p>

<ul class="org-ul">
<li>An RDDs is first created from stable storage or by some Python objects.</li>
</ul>

<p>
RDDs offer then two types of operations: <b>transformations</b> and <b>actions</b>.
</p>

<ul class="org-ul">
<li><b>Transformations</b> create a new RDD from an existing one.
Transformations are lazy, meaning that no transformation is executed
until you execute an action.</li>

<li><b>Actions</b> compute a result based on an RDD, and either return it to
the driver program or save it to an external storage system (e.g.,
HDFS). This is the end of the lifecycle.</li>
</ul>

<p>
Transformations and actions are different because of the way Spark
computes RDDs. Although you can define new RDDs any time, Spark
computes them only in a <b>lazy</b> fashion, that is, the first time they
are used in an <b>action</b>.
</p>

<p>
For the creation of RDDs and the partitions of them please refer to
the previous post I will now briefly introduce the physical execution
of spark before illustrating some of the most the key transformations
and actions.
</p>

<br>
</div>
</div>


<div id="outline-container-org6451e01" class="outline-2">
<h2 id="org6451e01"><span class="todo TODO">TODO</span> On the physical Execution</h2>
<div class="outline-text-2" id="text-org6451e01">
<br>
</div>
</div>


<div id="outline-container-org335b177" class="outline-2">
<h2 id="org335b177">Transformations</h2>
<div class="outline-text-2" id="text-org335b177">
<p>
Following are examples of some of the common transformations
available.
</p>

<p>
For a detailed list, see <a href="https://spark.apache.org/docs/2.0.0/programming-guide.html#transformations">RDD Transformations</a>
</p>

<p>
Run some transformations below to understand this better.
</p>

<p>
<b>Note:</b> If some of the queries are taking too long to complete, try
restarting the kernel, and rerunning the cell <i>above</i>.
</p>


<div class="highlight"><pre><span></span>from pyspark.sql import SparkSession

spark = SparkSession \
    .builder \
    .master (&quot;local[8]&quot;) \
    .appName(&quot;My first Spark Session&quot;) \
    .getOrCreate()

sc = spark.sparkContext
</pre></div>


<div class="highlight"><pre><span></span>fruits = sc.textFile(&#39;wasb:///example/data/fruits.txt&#39;)
</pre></div>


<div class="highlight"><pre><span></span>fruits.collect()
</pre></div>


<div class="highlight"><pre><span></span># map
fruitsReversed = fruits.map(lambda fruit: fruit[::-1]) ## the fruit[::-1] inverts the letters of the word

# Note: the `collect` command is NOT a Transformation, it is an Action
# used here for the purposes of showing the results! Just use it when
# you know that the action will be small enough to be handled by the
# memeory of the machine you are working on. Otherwise, no chance you
# will be able to display your results and you will better have to
# save the results on a HDFS cluster.
fruitsReversed.collect()
</pre></div>

<div class="highlight"><pre><span></span># filter
shortFruits = fruits.filter(lambda fruit: len(fruit) &lt;= 5)
shortFruits.collect()
</pre></div>

<div class="highlight"><pre><span></span># flatMap
characters = fruits.flatMap(lambda fruit: list(fruit))
characters.collect()
</pre></div>

<div class="highlight"><pre><span></span># union
fruitsAndYellowThings = fruits.union(yellowThings)
fruitsAndYellowThings.collect()
</pre></div>

<div class="highlight"><pre><span></span># intersection
yellowFruits = fruits.intersection(yellowThings)
yellowFruits.collect()
</pre></div>

<div class="highlight"><pre><span></span># distinct
distinctFruitsAndYellowThings = fruitsAndYellowThings.distinct()
distinctFruitsAndYellowThings.collect()
</pre></div>

<div class="highlight"><pre><span></span># groupByKey
yellowThingsByFirstLetter = yellowThings.map(lambda thing: (thing[0], thing)).groupByKey()
for letter, lst in yellowThingsByFirstLetter.collect():
	print(&quot;For letter&quot;, letter)
	for obj in lst:
		print(&quot; &gt; &quot;, obj)
</pre></div>

<div class="highlight"><pre><span></span># reduceByKey
numFruitsByLength = fruits.map(lambda fruit: (len(fruit), 1)).reduceByKey(lambda x, y: x + y)
numFruitsByLength.collect()
</pre></div>
</div>

<div id="outline-container-orgcb6757e" class="outline-4">
<h4 id="orgcb6757e">Some quick note on reduce and reduceByKey</h4>
<div class="outline-text-4" id="text-orgcb6757e">
<p>
The logic of the reduce function is as follows
</p>

<p>
<img src="/images/Bildschirmfoto_2020-05-04_um_17.54.18.png" alt="nil"/>
</p>

<div class="highlight"><pre><span></span>  input_list = sc.parallelize(range(5))
  sum_of_squares = input_list.map(lambda x: x ** 3).reduce(lambda x, y: x + y)

  print(sum_of_squares)
</pre></div>

<p>
It is now clear from the examples below that the lambda function of
the reduce by key function below takes as x the value of the key and
as y the second value of the key. This in analogy to the reduce key
above. It performs hence essentially the same function as the reduce
option for each individual key.
</p>

<div class="highlight"><pre><span></span>  fruits = sc.parallelize([&quot;apple&quot;, &quot;orange&quot;, &quot;java&quot;, &quot;call++&quot;])

  ## Example 1 ##

  numFruitsByLength = fruits.map(lambda fruit: (len(fruit), 2))
  print(numFruitsByLength.collect())

  numFruitsByLength = numFruitsByLength.reduceByKey(lambda x, y: x + y)
  print(numFruitsByLength.collect())

  ## Example 2 ##

  numFruitsByLength = sc.parallelize([(5, 2), (6, 3), (4, 2), (6, 2)])
  print(numFruitsByLength.collect())

  numFruitsByLength = numFruitsByLength.reduceByKey(lambda x, y: x + y)
  print(numFruitsByLength.collect())
</pre></div>



<br>
</div>
</div>


<div id="outline-container-org2ae6db7" class="outline-4">
<h4 id="org2ae6db7">mapValues</h4>
<div class="outline-text-4" id="text-org2ae6db7">
<p>
How to interpret <code>mapValues</code>
</p>

<div class="highlight"><pre><span></span>print(test_entries.map(lambda x: (len(x[&quot;choices&quot;]), x[&quot;choices&quot;])).groupByKey().map(lambda x : (x[0], len(list(x[1])))).collect())

print(test_entries.map(lambda x: (len(x[&quot;choices&quot;]), x[&quot;choices&quot;])).groupByKey().mapValues(len).collect())
</pre></div>
</div>
</div>
</div>


<div id="outline-container-orgef7b5f5" class="outline-2">
<h2 id="orgef7b5f5">Actions</h2>
<div class="outline-text-2" id="text-orgef7b5f5">
</div>

<div id="outline-container-org4106627" class="outline-3">
<h3 id="org4106627">Aggregate</h3>
<div class="outline-text-3" id="text-org4106627">
<p>
<a href="https://stackoverflow.com/questions/28240706/explain-the-aggregate-functionality-in-spark/38949457">Explaination of Aggregate</a>
</p>

<div class="highlight"><pre><span></span>    seqOp = (lambda local_result, list_element: (local_result[0] + list_element, local_result[1] + 1) )
    combOp = (lambda some_local_result, another_local_result: (some_local_result[0] + another_local_result[0], some_local_result[1] + another_local_result[1]) )

    sc.parallelize([1, 2, 1, 2]).aggregate((0, 0), seqOp, combOp)
</pre></div>
</div>
</div>
</div>





<div id="outline-container-org6b19358" class="outline-2">
<h2 id="org6b19358">Literature</h2>
</div>
