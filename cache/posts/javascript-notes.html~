<p>
The time has come. It is the moment to start learning javascript. This
is a quite fundamental technology. No need to tell you why. Everyone
knows it.
</p>

<p>
For a project I might use <code>Node.js</code>. We will decide next week
but in the meanwhile I will take 1-2h now to explore javascript.
</p>

<p>
Note that these notes, are mainly taken from Javascript the Definitive
Guide - 7th edition.
</p>

<p>
After all it is quite standard and easy. The only particular thing is
the asynchronous javascript. But after your course on distributed
systems algo it should be no difficulty to make sense of all of this.
</p>

<p>
This is a must know language as being it the programming language of
the web and with the rise of <code>Node.js</code> that brought it also out of the
web into the backend it is by now the most used programming language
among Software Developers. 
</p>

<!-- TEASER_END -->

<div id="outline-container-orgb00c961" class="outline-2">
<h2 id="orgb00c961">Characteristics of Javascript</h2>
<div class="outline-text-2" id="text-orgb00c961">
<ul class="org-ul">
<li>Javascript variables are untyped.</li>

<li>To be useful, every language must have a platform, or <i>standard
library</i>, for performing things like basic input and output. The
core JavaScript language defines a minimal API for working with
<b>numbers, text, arrays, sets, maps</b>, and so on, but <b>does not include
any input or output</b> functionality. Input and output (as well as
more sophisticated features, such as networking, storage, and
graphics) are the responsibility of the “host environment” within
which JavaScript is embedded.</li>

<li>The original host environment for JavaScript was a web</li>

<li>Since 2010, another host environment has been available for
JavaScript code. Node gives JavaScript access to the entire
operating system, allowing JavaScript programs to read and write
files, send and receive data over the network, and make and serve
HTTP requests.</li>
</ul>
</div>
</div>

<div id="outline-container-org8201184" class="outline-2">
<h2 id="org8201184">First Quick Intro and Javascript in Org Babel</h2>
<div class="outline-text-2" id="text-org8201184">
<p>
Ok so usually people save their code into a javascript file, say
<code>hello.js</code> and then would run it via shell as <code>node hello.js</code>.
</p>

<p>
You can work in org babel in the following way.
</p>

<p>
See for instance the following snippet that amounts to a print
statement in python. Notice that the code will display on the
REPL. So you have to work with this opened. Could not find a way to
this stage to have a nicely formatted result in org-babel, directly
in org mode.
</p>

<div class="highlight"><pre><span></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="s2">&quot;Hello world&quot;</span><span class="p">);</span>
</pre></div>


<div class="highlight"><pre><span></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="s2">&quot;hello world&quot;</span><span class="p">);</span>
<span class="nx">x</span> <span class="o">=</span> <span class="mf">3</span><span class="p">;</span>
</pre></div>


<div class="highlight"><pre><span></span><span class="c1">// Anything following double slashes is an English-language comment.</span>
<span class="c1">// Read the comments carefully: they explain the JavaScript code.</span>

<span class="c1">// A variable is a symbolic name for a value.</span>
<span class="c1">// Variables are declared with the let keyword:</span>
<span class="kd">let</span> <span class="nx">x</span><span class="p">;</span>                     <span class="c1">// Declare a variable named x.</span>

<span class="c1">// Values can be assigned to variables with an = sign</span>
<span class="nx">x</span> <span class="o">=</span> <span class="mf">0</span><span class="p">;</span>                     <span class="c1">// Now the variable x has the value 0</span>
<span class="nx">x</span>                          <span class="c1">// =&gt; 0: A variable evaluates to its value.</span>

<span class="c1">// JavaScript supports several types of values</span>
<span class="nx">x</span> <span class="o">=</span> <span class="mf">1</span><span class="p">;</span>                     <span class="c1">// Numbers.</span>
<span class="nx">x</span> <span class="o">=</span> <span class="mf">0.01</span><span class="p">;</span>                  <span class="c1">// Numbers can be integers or reals.</span>
<span class="nx">x</span> <span class="o">=</span> <span class="s2">&quot;hello world&quot;</span><span class="p">;</span>         <span class="c1">// Strings of text in quotation marks.</span>
<span class="nx">x</span> <span class="o">=</span> <span class="s1">&#39;JavaScript&#39;</span><span class="p">;</span>          <span class="c1">// Single quote marks also delimit strings.</span>
<span class="nx">x</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>                  <span class="c1">// A Boolean value.</span>
<span class="nx">x</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>                 <span class="c1">// The other Boolean value.</span>
<span class="nx">x</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>                  <span class="c1">// Null is a special value that means &quot;no value.&quot;</span>
<span class="nx">x</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>             <span class="c1">// Undefined is another special value like null.</span>
</pre></div>
</div>
</div>

<div id="outline-container-org9e65bbd" class="outline-2">
<h2 id="org9e65bbd">JavaScript Citizens</h2>
<div class="outline-text-2" id="text-org9e65bbd">
</div>
<div id="outline-container-orgba3b3ff" class="outline-3">
<h3 id="orgba3b3ff">Object</h3>
<div class="outline-text-3" id="text-orgba3b3ff">
<p>
This is javascript most important datatype. It corresponds to the
dictionary in python. It is a collection of name/value pairs, or a
string to value  map
</p>

<div class="highlight"><pre><span></span>   <span class="kd">let</span> <span class="nx">book</span> <span class="o">=</span> <span class="p">{</span>               <span class="c1">// Objects are enclosed in curly braces.</span>
       <span class="nx">topic</span><span class="o">:</span> <span class="s2">&quot;JavaScript&quot;</span><span class="p">,</span>   <span class="c1">// The property &quot;topic&quot; has value &quot;JavaScript.&quot;</span>
       <span class="nx">edition</span><span class="o">:</span> <span class="mf">7</span>             <span class="c1">// The property &quot;edition&quot; has value 7</span>
   <span class="p">};</span>                         <span class="c1">// The curly brace marks the end of the object.</span>

   <span class="c1">// Access the properties of an object with . or []:</span>
   <span class="nx">book</span><span class="p">.</span><span class="nx">topic</span>                 <span class="c1">// =&gt; &quot;JavaScript&quot;</span>
   <span class="nx">book</span><span class="p">[</span><span class="s2">&quot;edition&quot;</span><span class="p">]</span>            <span class="c1">// =&gt; 7: another way to access property values.</span>
   <span class="nx">book</span><span class="p">.</span><span class="nx">author</span> <span class="o">=</span> <span class="s2">&quot;Flanagan&quot;</span><span class="p">;</span>  <span class="c1">// Create new properties by assignment.</span>
   <span class="nx">book</span><span class="p">.</span><span class="nx">contents</span> <span class="o">=</span> <span class="p">{};</span>        <span class="c1">// {} is an empty object with no properties.</span>
   <span class="nx">book</span><span class="p">.</span><span class="nx">contents</span><span class="p">;</span>             <span class="c1">// retrieve empty object</span>
</pre></div>

<p>
Note the following property - two objects are <b>never equal</b>
</p>

<div class="highlight"><pre><span></span>   <span class="kd">let</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="mf">1</span><span class="p">},</span> <span class="nx">p</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="mf">1</span><span class="p">};</span>  <span class="c1">// Two objects with the same properties</span>
   <span class="nx">o</span> <span class="o">===</span> <span class="nx">p</span>                      <span class="c1">// =&gt; false: distinct objects are never equal</span>
   <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">[];</span>          <span class="c1">// Two distinct, empty arrays</span>
   <span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span>                      <span class="c1">// =&gt; false: distinct arrays are never equal</span>
</pre></div>

<p>
Note however:
</p>

<div class="highlight"><pre><span></span>   <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[];</span>   <span class="c1">// The variable a refers to an empty array.</span>
   <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>    <span class="c1">// Now b refers to the same array.</span>
   <span class="nx">b</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1</span><span class="p">;</span>     <span class="c1">// Mutate the array referred to by variable b.</span>
   <span class="nx">a</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span>          <span class="c1">// =&gt; 1: the change is also visible through variable a.</span>
   <span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span>       <span class="c1">// =&gt; true: a and b refer to the same object, so they are equal.</span>
</pre></div>
</div>
</div>


<div id="outline-container-orge336c44" class="outline-3">
<h3 id="orge336c44">Arrays</h3>
<div class="outline-text-3" id="text-orge336c44">
<p>
Standard stuff. Same as python lists
</p>

<div class="highlight"><pre><span></span>   <span class="c1">// JavaScript also supports arrays (numerically indexed lists) of values:</span>
   <span class="kd">let</span> <span class="nx">primes</span> <span class="o">=</span> <span class="p">[</span><span class="mf">2</span><span class="p">,</span> <span class="mf">3</span><span class="p">,</span> <span class="mf">5</span><span class="p">,</span> <span class="mf">7</span><span class="p">];</span> <span class="c1">// An array of 4 values, delimited with [ and ].</span>
   <span class="nx">primes</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span>                  <span class="c1">// =&gt; 2: the first element (index 0) of the array.</span>
   <span class="nx">primes</span><span class="p">.</span><span class="nx">length</span>              <span class="c1">// =&gt; 4: how many elements in the array.</span>
   <span class="nx">primes</span><span class="p">[</span><span class="nx">primes</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mf">1</span><span class="p">]</span>    <span class="c1">// =&gt; 7: the last element of the array.</span>
   <span class="nx">primes</span><span class="p">[</span><span class="mf">4</span><span class="p">]</span> <span class="o">=</span> <span class="mf">9</span><span class="p">;</span>             <span class="c1">// Add a new element by assignment.</span>
   <span class="nx">primes</span><span class="p">[</span><span class="mf">4</span><span class="p">]</span> <span class="o">=</span> <span class="mf">11</span><span class="p">;</span>            <span class="c1">// Or alter an existing element by assignment.</span>
   <span class="kd">let</span> <span class="nx">empty</span> <span class="o">=</span> <span class="p">[];</span>            <span class="c1">// [] is an empty array with no elements.</span>
   <span class="nx">empty</span><span class="p">.</span><span class="nx">length</span>               <span class="c1">// =&gt; 0</span>
</pre></div>

<p>
Notice that Arrays and objects can hold other arrays and objects:
</p>

<div class="highlight"><pre><span></span><span class="kd">let</span> <span class="nx">points</span> <span class="o">=</span> <span class="p">[</span>             <span class="c1">// An array with 2 elements.</span>
    <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="mf">0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">0</span><span class="p">},</span>          <span class="c1">// Each element is an object.</span>
    <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="mf">1</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">1</span><span class="p">}</span>
<span class="p">];</span>
<span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>                 <span class="c1">// An object with 2 properties</span>
    <span class="nx">trial1</span><span class="o">:</span> <span class="p">[[</span><span class="mf">1</span><span class="p">,</span><span class="mf">2</span><span class="p">],</span> <span class="p">[</span><span class="mf">3</span><span class="p">,</span><span class="mf">4</span><span class="p">]],</span>  <span class="c1">// The value of each property is an array.</span>
    <span class="nx">trial2</span><span class="o">:</span> <span class="p">[[</span><span class="mf">2</span><span class="p">,</span><span class="mf">3</span><span class="p">],</span> <span class="p">[</span><span class="mf">4</span><span class="p">,</span><span class="mf">5</span><span class="p">]]</span>   <span class="c1">// The elements of the arrays are arrays.</span>
<span class="p">};</span>
</pre></div>

<p>
So up to now very similar syntax to Python.
</p>
</div>
</div>


<div id="outline-container-org77d4bcd" class="outline-3">
<h3 id="org77d4bcd">Shorthand Arithmetics</h3>
<div class="outline-text-3" id="text-org77d4bcd">
<div class="highlight"><pre><span></span>   <span class="c1">// JavaScript defines some shorthand arithmetic operators</span>
   <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mf">0</span><span class="p">;</span>             <span class="c1">// Define a variable</span>
   <span class="nx">count</span><span class="o">++</span><span class="p">;</span>                   <span class="c1">// Increment the variable. Weird for some</span>
			      <span class="c1">// reason it returns the number before in</span>
			      <span class="c1">// the REPL.</span>
   <span class="nx">count</span><span class="o">--</span><span class="p">;</span>                   <span class="c1">// Decrement the variable</span>
   <span class="nx">count</span> <span class="o">+=</span> <span class="mf">2</span><span class="p">;</span>                <span class="c1">// Add 2: same as count = count + 2;</span>
   <span class="nx">count</span> <span class="o">*=</span> <span class="mf">3</span><span class="p">;</span>                <span class="c1">// Multiply by 3: same as count = count * 3;</span>
   <span class="nx">count</span>                      <span class="c1">// =&gt; 6: variable names are expressions, too.</span>
</pre></div>
</div>
</div>


<div id="outline-container-org5337bec" class="outline-3">
<h3 id="org5337bec">Shorthand Declaration</h3>
<div class="outline-text-3" id="text-org5337bec">
<div class="highlight"><pre><span></span>   <span class="kd">let</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1</span><span class="p">,</span><span class="mf">2</span><span class="p">];</span>  <span class="c1">// Same as let x=1, y=2</span>
   <span class="p">[</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mf">1</span><span class="p">,</span><span class="nx">y</span><span class="o">+</span><span class="mf">1</span><span class="p">];</span>  <span class="c1">// Same as x = x + 1, y = y + 1</span>
   <span class="p">[</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="p">];</span>      <span class="c1">// Swap the value of the two variables</span>
   <span class="p">[</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">]</span>               <span class="c1">// =&gt; [3,2]: the incremented and swapped values</span>
</pre></div>
</div>
</div>


<div id="outline-container-org1bf091a" class="outline-3">
<h3 id="org1bf091a">Equality and Logical Operators</h3>
<div class="outline-text-3" id="text-org1bf091a">
<p>
Notice that in contrast to python here equality (strict equality
without conversion) is expressed by triple <i><code>=</code></i>.
</p>

<div class="highlight"><pre><span></span>   <span class="nx">x</span> <span class="o">=</span> <span class="mf">2</span><span class="p">;</span> <span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="mf">3</span><span class="p">;</span>          <span class="c1">// These = signs are assignment, not equality tests</span>
   <span class="nx">x</span> <span class="o">===</span> <span class="nx">y</span><span class="p">;</span>                   <span class="c1">// =&gt; false: equality ;; notice that does</span>
			      <span class="c1">// not type conversion.</span>
</pre></div>

<p>
For the logical operators it hold
</p>

<div class="highlight"><pre><span></span>   <span class="c1">// Logical operators combine or invert boolean values</span>
   <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="mf">2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">y</span> <span class="o">===</span> <span class="mf">3</span><span class="p">)</span>     <span class="c1">// =&gt; true: both comparisons are true. &amp;&amp; is AND</span>
   <span class="p">(</span><span class="nx">x</span> <span class="o">&gt;</span> <span class="mf">3</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">y</span> <span class="o">&lt;</span> <span class="mf">3</span><span class="p">)</span>         <span class="c1">// =&gt; false: neither comparison is true. || is OR</span>
   <span class="o">!</span><span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">y</span><span class="p">)</span>                 <span class="c1">// =&gt; true: ! inverts a boolean value</span>
</pre></div>


<p>
Notice that in Javascript there is also the usual equality. This is
the <i>==</i> operator.
</p>

<p>
The “strict equality operator,” <i><code>=</code></i>, does not consider its operands
to be equal if they are not of the same type, and this is almost
always the right operator to use when coding. But because
JavaScript is so flexible with type conversions, it also defines
the <i>==</i> operator with a flexible definition of equality. All of the
following comparisons are true, for example:
</p>

<div class="highlight"><pre><span></span>   <span class="kc">null</span> <span class="o">==</span> <span class="kc">undefined</span> <span class="c1">// =&gt; true: These two values are treated as equal.</span>
   <span class="s2">&quot;0&quot;</span> <span class="o">==</span> <span class="mf">0</span>          <span class="c1">// =&gt; true: String converts to a number before comparing.</span>
   <span class="mf">0</span> <span class="o">==</span> <span class="kc">false</span>        <span class="c1">// =&gt; true: Boolean converts to number before comparing.</span>
   <span class="s2">&quot;0&quot;</span> <span class="o">==</span> <span class="kc">false</span>      <span class="c1">// =&gt; true: Both operands convert to 0 before comparing!</span>
</pre></div>
</div>
</div>


<div id="outline-container-org661730d" class="outline-3">
<h3 id="org661730d">Casting</h3>
<div class="outline-text-3" id="text-org661730d">
<p>
In contrast to this you can work with explicit conversions directly
</p>

<div class="highlight"><pre><span></span>   <span class="nb">Number</span><span class="p">(</span><span class="s2">&quot;3&quot;</span><span class="p">)</span>    <span class="c1">// =&gt; 3</span>
   <span class="nb">String</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>  <span class="c1">// =&gt; &quot;false&quot;:  Or use false.toString()</span>
   <span class="nb">Boolean</span><span class="p">([])</span>    <span class="c1">// =&gt; true</span>
</pre></div>

<p>
Other more fancy conversion styles include
</p>

<div class="highlight"><pre><span></span>   <span class="nx">x</span> <span class="o">=</span> <span class="mf">3</span>
   <span class="nx">x</span> <span class="o">+</span> <span class="s2">&quot;&quot;</span>   <span class="c1">// =&gt; String(x)</span>
   <span class="o">+</span><span class="nx">x</span>       <span class="c1">// =&gt; Number(x); i.e. back to a numeric variable</span>
</pre></div>
</div>
</div>


<div id="outline-container-org9439310" class="outline-3">
<h3 id="org9439310">Functions Syntax</h3>
<div class="outline-text-3" id="text-org9439310">
<div class="highlight"><pre><span></span>   <span class="kd">let</span> <span class="nx">square</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Functions are values and can be assigned to vars</span>
       <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>          <span class="c1">// Compute the function&#39;s value</span>
   <span class="p">};</span>                         <span class="c1">// Semicolon marks the end of the assignment.</span>

   <span class="nx">square</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span>                  <span class="c1">// =&gt; 9: invoke the function above</span>
</pre></div>

<p>
There is also a shorthand notation for defining functions. Think of
it as a lambda function in python.
</p>

<div class="highlight"><pre><span></span>   <span class="kd">const</span> <span class="nx">square</span> <span class="o">=</span> <span class="nx">x</span> <span class="p">=&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>  <span class="c1">// The input x maps to the output x * x</span>

   <span class="nx">square</span><span class="p">(</span><span class="mf">4</span><span class="p">)</span>                   <span class="c1">// =&gt; 16</span>
</pre></div>
</div>
</div>



<div id="outline-container-org859c0f9" class="outline-3">
<h3 id="org859c0f9">Methods</h3>
<div class="outline-text-3" id="text-org859c0f9">
<p>
When functions are assigned to the properties of an object, we call
them "methods." Notice that in javascript it is not necessary to go
as far as OOP to specifiy methods. Note that this is quite a cool
feature of Javascript that is not shared with Python.
</p>

<p>
All JavaScript objects (including arrays) have methods:
</p>

<div class="highlight"><pre><span></span>   <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[];</span>                <span class="c1">// Create an empty array</span>
   <span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span><span class="mf">2</span><span class="p">,</span><span class="mf">3</span><span class="p">);</span>             <span class="c1">// The push() method adds elements to an array</span>
   <span class="nx">a</span><span class="p">.</span><span class="nx">reverse</span><span class="p">();</span>               <span class="c1">// Another method: reverse the order of elements</span>
</pre></div>

<p>
We can define our own methods, too.
</p>

<p>
The "this" keyword refers to the object on which the method is
defined: in this case, the points array from earlier. I.e. the
points object we previously defined.
</p>

<div class="highlight"><pre><span></span><span class="nx">points</span><span class="p">.</span><span class="nx">dist</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// Define a method to compute distance between points</span>
    <span class="kd">let</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="mf">0</span><span class="p">];</span>      <span class="c1">// First element of array we&#39;re invoked on</span>
    <span class="kd">let</span> <span class="nx">p2</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="mf">1</span><span class="p">];</span>      <span class="c1">// Second element of the &quot;this&quot; object</span>
    <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">p1</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>     <span class="c1">// Difference in x coordinates</span>
    <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">p2</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">p1</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>     <span class="c1">// Difference in y coordinates</span>
    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span> <span class="o">+</span> <span class="c1">// The Pythagorean theorem</span>
		     <span class="nx">b</span><span class="o">*</span><span class="nx">b</span><span class="p">);</span> <span class="c1">// Math.sqrt() computes the square root</span>
<span class="p">};</span>
<span class="nx">points</span><span class="p">.</span><span class="nx">dist</span><span class="p">()</span>              <span class="c1">// =&gt; Math.sqrt(2): distance between our 2 points</span>
</pre></div>
</div>
</div>


<div id="outline-container-orgb783ceb" class="outline-3">
<h3 id="orgb783ceb">Flow control in Javascript</h3>
<div class="outline-text-3" id="text-orgb783ceb">
<p>
Just notice the syntax
</p>

<div class="highlight"><pre><span></span>   <span class="kd">function</span> <span class="nx">abs</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>          <span class="c1">// A function to compute the absolute value.</span>
       <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&gt;=</span> <span class="mf">0</span><span class="p">)</span> <span class="p">{</span>          <span class="c1">// The if statement...</span>
	   <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>          <span class="c1">// executes this code if the comparison is true.</span>
       <span class="p">}</span>                      <span class="c1">// This is the end of the if clause.</span>
       <span class="k">else</span> <span class="p">{</span>                 <span class="c1">// The optional else clause executes its code if</span>
	   <span class="k">return</span> <span class="o">-</span><span class="nx">x</span><span class="p">;</span>         <span class="c1">// the comparison is false.</span>
       <span class="p">}</span>                      <span class="c1">// Curly braces optional when 1 statement per clause.</span>
   <span class="p">}</span>                          <span class="c1">// Note return statements nested inside if/else.</span>
   <span class="nx">abs</span><span class="p">(</span><span class="o">-</span><span class="mf">10</span><span class="p">)</span> <span class="o">===</span> <span class="nx">abs</span><span class="p">(</span><span class="mf">10</span><span class="p">)</span>       <span class="c1">// =&gt; true</span>

   <span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="p">{</span>      <span class="c1">// Compute the sum of the elements of an array</span>
       <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mf">0</span><span class="p">;</span>           <span class="c1">// Start with an initial sum of 0.</span>
       <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">x</span> <span class="k">of</span> <span class="nx">array</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// Loop over array, assigning each element to x. Same as =for i in array= in Python.</span>
	   <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">x</span><span class="p">;</span>          <span class="c1">// Add the element value to the sum.</span>
       <span class="p">}</span>                      <span class="c1">// This is the end of the loop.</span>
       <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>            <span class="c1">// Return the sum.</span>
   <span class="p">}</span>
   <span class="nx">sum</span><span class="p">(</span><span class="nx">primes</span><span class="p">)</span>                <span class="c1">// =&gt; 28: sum of the first 5 primes 2+3+5+7+11</span>

   <span class="kd">function</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>    <span class="c1">// A function to compute factorials</span>
       <span class="kd">let</span> <span class="nx">product</span> <span class="o">=</span> <span class="mf">1</span><span class="p">;</span>       <span class="c1">// Start with a product of 1</span>
       <span class="k">while</span><span class="p">(</span><span class="nx">n</span> <span class="o">&gt;</span> <span class="mf">1</span><span class="p">)</span> <span class="p">{</span>         <span class="c1">// Repeat statements in {} while expr in () is true</span>
	   <span class="nx">product</span> <span class="o">*=</span> <span class="nx">n</span><span class="p">;</span>      <span class="c1">// Shortcut for product = product * n;</span>
	   <span class="nx">n</span><span class="o">--</span><span class="p">;</span>               <span class="c1">// Shortcut for n = n - 1</span>
       <span class="p">}</span>                      <span class="c1">// End of loop</span>
       <span class="k">return</span> <span class="nx">product</span><span class="p">;</span>        <span class="c1">// Return the product</span>
   <span class="p">}</span>
   <span class="nx">factorial</span><span class="p">(</span><span class="mf">4</span><span class="p">)</span>               <span class="c1">// =&gt; 24: 1*4*3*2</span>

   <span class="kd">function</span> <span class="nx">factorial2</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>   <span class="c1">// Another version using a different loop</span>
       <span class="kd">let</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">product</span> <span class="o">=</span> <span class="mf">1</span><span class="p">;</span>    <span class="c1">// Start with 1</span>
       <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mf">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>  <span class="c1">// Automatically increment i from 2 up to n</span>
	   <span class="nx">product</span> <span class="o">*=</span> <span class="nx">i</span><span class="p">;</span>      <span class="c1">// Do this each time. {} not needed for 1-line loops</span>
       <span class="k">return</span> <span class="nx">product</span><span class="p">;</span>        <span class="c1">// Return the factorial</span>
   <span class="p">}</span>
   <span class="nx">factorial2</span><span class="p">(</span><span class="mf">5</span><span class="p">)</span>              <span class="c1">// =&gt; 120: 1*2*3*4*5</span>
</pre></div>
</div>

<div id="outline-container-orgc70efa1" class="outline-4">
<h4 id="orgc70efa1">On Using Const in Loops</h4>
<div class="outline-text-4" id="text-orgc70efa1">
<p>
This is handy and it is a further guarantee that you will not mess
up with the variable when looping.
</p>

<p>
It may seem surprising, but you can also use const to declare the
loop “variables” for for/in and for/of loops, as long as the body
of the loop does not reassign a new value. In this case, the const
declaration is just saying that the value is <b>constant for the
duration of one loop iteration</b>:
</p>

<div class="highlight"><pre><span></span>    <span class="c1">// Example</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">datum</span> <span class="k">of</span> <span class="nx">data</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">datum</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">property</span> <span class="k">in</span> <span class="nx">object</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">property</span><span class="p">);</span>
</pre></div>
</div>
</div>
</div>


<div id="outline-container-org0e9b472" class="outline-3">
<h3 id="org0e9b472">Variables Scope</h3>
<div class="outline-text-3" id="text-org0e9b472">
<p>
The scope of a variable is the region of your program source code in
which it is defined. Variables and constants declared with let and
const are block scoped. This means that they are only defined within
the block of code in which the let or const statement
appears.
</p>

<p>
JavaScript class and function definitions are blocks, and so are the
bodies of if/else statements, while loops, for loops, and so on.
</p>

<p>
Roughly speaking, if a variable or constant is declared within a set
of curly braces, then those curly braces delimit the region of code in
which the variable or constant is defined.
</p>

<p>
When a declaration appears at the top level, outside of any code
blocks, we say it is a global variable or constant and has global
scope.
</p>

<p>
In <code>Node</code> and in client-side JavaScript modules (see Chapter
10), the scope of a global variable is the <b>file that it is defined
in</b>.
</p>

<p>
In traditional client-side JavaScript, however, the scope of a
global variable is the <b>HTML document</b> in which it is defined. That
is: if one &lt;script&gt; declares a global variable or constant, that
variable or constant is defined in all of the &lt;script&gt; elements in
that document (or at least all of the scripts that execute after
the let or const statement executes).
</p>
</div>

<div id="outline-container-orgcb31005" class="outline-4">
<h4 id="orgcb31005">Warning BAD PRACTICE</h4>
<div class="outline-text-4" id="text-orgcb31005">
<p>
It is a syntax error to use the <b>same name</b> with more than one let
or const declaration <b>in the same scope</b>. It is legal (though a
practice best avoided) to declare a new variable with the same
name in a nested scope:
</p>

<div class="highlight"><pre><span></span>    <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mf">1</span><span class="p">;</span>        <span class="c1">// Declare x as a global constant</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="mf">1</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mf">2</span><span class="p">;</span>      <span class="c1">// Inside a block x can refer to a different value</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// Prints 2</span>
    <span class="p">}</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>     <span class="c1">// Prints 1: we&#39;re back in the global scope now</span>
    <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mf">3</span><span class="p">;</span>          <span class="c1">// ERROR! Syntax error trying to re-declare x</span>
</pre></div>
</div>
</div>
</div>


<div id="outline-container-orgb9c735a" class="outline-3">
<h3 id="orgb9c735a">Var vs Let - Warning quite Different</h3>
<div class="outline-text-3" id="text-orgb9c735a">
<p>
Variables declared with var <b>do not have block scope</b>. Instead, they
are scoped to the body of the containing function no matter how
deeply nested they are inside that function.
</p>

<p>
If you use var outside of a function body, it declares a global
variable. But global variables declared with var differ from
globals declared with let in an important way. Globals declared
with var are implemented as properties of the global object
(§3.7). The global object can be referenced as globalThis.
</p>

<p>
So if you write var x = 2; outside of a function, it is like you
wrote globalThis.x = 2;
</p>

<p>
Unlike variables declared with let, it is <b>legal to declare the
same variable multiple times with var</b>. I.e. <code>let</code> one time and
that was it.
</p>

<p>
One of the most unusual features of var declarations is known as
<code>hoisting</code>. When a variable is declared with var, the declaration is
<i>lifted up (or “hoisted”) to the top of the enclosing function</i>. The
initialization of the variable remains where you wrote it, but the
definition of the variable moves to the top of the function.
</p>
</div>
</div>


<div id="outline-container-org5a8f63d" class="outline-3">
<h3 id="org5a8f63d">Quick Intro to OOP in JavaScript</h3>
<div class="outline-text-3" id="text-org5a8f63d">
<div class="highlight"><pre><span></span>   <span class="kd">class</span> <span class="nx">Point</span> <span class="p">{</span>              <span class="c1">// By convention, class names are capitalized.</span>

       <span class="c1">// Notice the constructor below corresponds to the __init__ in python.</span>

       <span class="nx">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>    <span class="c1">// Constructor function to initialize new instances.</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>        <span class="c1">// This keyword is the new object being initialized.</span>
	   <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>        <span class="c1">// Store function arguments as object properties.</span>
       <span class="p">}</span>                      <span class="c1">// No return is necessary in constructor functions.</span>

       <span class="c1">// Class Method </span>
       <span class="nx">distance</span><span class="p">()</span> <span class="p">{</span>           <span class="c1">// Method to compute distance from origin to point.</span>
	   <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span>  <span class="c1">// Return the square root of x² + y².</span>
	       <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span>  <span class="c1">// this refers to the Point object on which</span>
	       <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span>    <span class="c1">// the distance method is invoked.</span>
	   <span class="p">);</span>
       <span class="p">}</span>
   <span class="p">}</span>

   <span class="c1">// Use the Point() constructor function with &quot;new&quot; to create Point objects</span>
   <span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Point</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="mf">1</span><span class="p">);</span>   <span class="c1">// The geometric point (1,1).</span>

   <span class="c1">// Now use a method of the Point object p</span>
   <span class="nx">p</span><span class="p">.</span><span class="nx">distance</span><span class="p">()</span>               <span class="c1">// =&gt; Math.SQRT2</span>
</pre></div>

<p>
<b>Note:</b> Technically, it is only JavaScript objects that have
methods. But numbers, strings, boolean, and symbol values behave as
if they have methods. In JavaScript, null and undefined are the
only values that methods cannot be invoked on.
</p>
</div>
</div>


<div id="outline-container-orgfd7f9dd" class="outline-3">
<h3 id="orgfd7f9dd">Multiline Comments</h3>
<div class="outline-text-3" id="text-orgfd7f9dd">
<div class="highlight"><pre><span></span><span class="cm">/*</span>
<span class="cm"> * This is a multi-line comment. The extra * characters at the start of</span>
<span class="cm"> * each line are not a required part of the syntax; they just look cool!</span>
<span class="cm"> */</span>
</pre></div>
</div>
</div>


<div id="outline-container-org5259ef4" class="outline-3">
<h3 id="org5259ef4">Constants</h3>
<div class="outline-text-3" id="text-org5259ef4">
<div class="highlight"><pre><span></span>   <span class="kd">const</span> <span class="nx">xx</span> <span class="o">=</span> <span class="mf">3</span><span class="p">;</span>

   <span class="nx">xx</span> <span class="o">=</span> <span class="mf">4</span>  <span class="c1">// will throw an error. constants are ment to stay</span>
	   <span class="c1">// constant. Nice feature missing from python</span>
</pre></div>
</div>
</div>


<div id="outline-container-orgd39e144" class="outline-3">
<h3 id="orgd39e144">Strings</h3>
<div class="outline-text-3" id="text-orgd39e144">
<p>
Note that strings are <b>immutable</b>. They are primitives
</p>

<div class="highlight"><pre><span></span>   <span class="nx">miele</span> <span class="o">=</span>  <span class="s1">&#39;miele&#39;</span>
   <span class="nx">miele</span>                  <span class="c1">// =&gt; miele</span>

   <span class="nx">miele</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span>               <span class="c1">// =&gt; m</span>

   <span class="nx">miele</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;r&#39;</span>         <span class="c1">// does not throw an error but does not</span>
			  <span class="c1">// update because of immutabilitiy.</span>

   <span class="nx">miele</span>                  <span class="c1">// =&gt; miele</span>

   <span class="c1">// Nonetheless you can change the entire string</span>

   <span class="nx">miele</span> <span class="o">=</span> <span class="s2">&quot;latte&quot;</span>

   <span class="nx">miele</span>                 <span class="c1">// =&gt; latte</span>

   <span class="c1">// Another example</span>
   <span class="kd">let</span> <span class="nx">s</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span><span class="p">;</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>   <span class="c1">// Returns &quot;HELLO&quot;, but doesn&#39;t alter s</span>
   <span class="nx">s</span>                  <span class="c1">// =&gt; &quot;hello&quot;: the original string has not changed</span>

   <span class="c1">// so you can use the above and assign it to a new variable</span>
   <span class="kd">let</span> <span class="nx">s1</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
   <span class="nx">s1</span>                 <span class="c1">// =&gt; &quot;HELLO&quot;</span>
</pre></div>

<p>
Note the possible syntax
</p>

<div class="highlight"><pre><span></span>   <span class="c1">// A string representing 2 lines written on one line:</span>
   <span class="s1">&#39;two\nlines&#39;</span>

   <span class="c1">// A one-line string written on 3 lines:</span>
   <span class="s2">&quot;one\</span>
<span class="s2">    long\</span>
<span class="s2">    line&quot;</span>

   <span class="c1">// A two-line string written on two lines:</span>
   <span class="sb">`the newline character at the end of this line</span>
<span class="sb">   is included literally in this string`</span>
</pre></div>


<p>
On math operators in strings. Same as python.
</p>

<div class="highlight"><pre><span></span>   <span class="kd">let</span> <span class="nx">msg</span> <span class="o">=</span> <span class="s2">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="s2">&quot;world&quot;</span><span class="p">;</span>   <span class="c1">// Produces the string &quot;Hello, world&quot;</span>

   <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Marco&#39;</span>

   <span class="kd">let</span> <span class="nx">greeting</span> <span class="o">=</span> <span class="s2">&quot;Welcome to my blog,&quot;</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
</pre></div>

<p>
Standard string methods
</p>

<div class="highlight"><pre><span></span>   <span class="kd">let</span> <span class="nx">s</span> <span class="o">=</span> <span class="s2">&quot;Hello, world&quot;</span><span class="p">;</span> <span class="c1">// Start with some text.</span>

   <span class="c1">// Obtaining portions of a string</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span><span class="mf">4</span><span class="p">)</span>        <span class="c1">// =&gt; &quot;ell&quot;: the 2nd, 3rd, and 4th characters.</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span><span class="mf">4</span><span class="p">)</span>            <span class="c1">// =&gt; &quot;ell&quot;: same thing</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mf">3</span><span class="p">)</span>             <span class="c1">// =&gt; &quot;rld&quot;: last 3 characters</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span>           <span class="c1">// =&gt; [&quot;Hello&quot;, &quot;world&quot;]: split at delimiter string</span>

   <span class="c1">// Searching a string</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">)</span>          <span class="c1">// =&gt; 2: position of first letter l</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">,</span> <span class="mf">3</span><span class="p">)</span>       <span class="c1">// =&gt; 3: position of first &quot;l&quot; at or after 3</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;zz&quot;</span><span class="p">)</span>         <span class="c1">// =&gt; -1: s does not include the substring &quot;zz&quot;</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">)</span>      <span class="c1">// =&gt; 10: position of last letter l</span>

   <span class="c1">// Boolean searching functions in ES6 and later</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s2">&quot;Hell&quot;</span><span class="p">)</span>    <span class="c1">// =&gt; true: the string starts with these</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s2">&quot;!&quot;</span><span class="p">)</span>         <span class="c1">// =&gt; false: s does not end with that</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&quot;or&quot;</span><span class="p">)</span>        <span class="c1">// =&gt; true: s includes substring &quot;or&quot;</span>

   <span class="c1">// Creating modified versions of a string</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;llo&quot;</span><span class="p">,</span> <span class="s2">&quot;ya&quot;</span><span class="p">)</span>  <span class="c1">// =&gt; &quot;Heya, world&quot;</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span>         <span class="c1">// =&gt; &quot;hello, world&quot;</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span>         <span class="c1">// =&gt; &quot;HELLO, WORLD&quot;</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">normalize</span><span class="p">()</span>           <span class="c1">// Unicode NFC normalization: ES6</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">normalize</span><span class="p">(</span><span class="s2">&quot;NFD&quot;</span><span class="p">)</span>      <span class="c1">// NFD normalization. Also &quot;NFKC&quot;, &quot;NFKD&quot;</span>

   <span class="c1">// Inspecting individual (16-bit) characters of a string</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mf">0</span><span class="p">)</span>             <span class="c1">// =&gt; &quot;H&quot;: the first character</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mf">1</span><span class="p">)</span>    <span class="c1">// =&gt; &quot;d&quot;: the last character</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mf">0</span><span class="p">)</span>         <span class="c1">// =&gt; 72: 16-bit number at the specified position</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">codePointAt</span><span class="p">(</span><span class="mf">0</span><span class="p">)</span>        <span class="c1">// =&gt; 72: ES6, works for codepoints &gt; 16 bits</span>

   <span class="c1">// String padding functions in ES2017</span>
   <span class="s2">&quot;x&quot;</span><span class="p">.</span><span class="nx">padStart</span><span class="p">(</span><span class="mf">3</span><span class="p">)</span>         <span class="c1">// =&gt; &quot;  x&quot;: add spaces on the left to a length of 3</span>
   <span class="s2">&quot;x&quot;</span><span class="p">.</span><span class="nx">padEnd</span><span class="p">(</span><span class="mf">3</span><span class="p">)</span>           <span class="c1">// =&gt; &quot;x  &quot;: add spaces on the right to a length of 3</span>
   <span class="s2">&quot;x&quot;</span><span class="p">.</span><span class="nx">padStart</span><span class="p">(</span><span class="mf">3</span><span class="p">,</span> <span class="s2">&quot;*&quot;</span><span class="p">)</span>    <span class="c1">// =&gt; &quot;**x&quot;: add stars on the left to a length of 3</span>
   <span class="s2">&quot;x&quot;</span><span class="p">.</span><span class="nx">padEnd</span><span class="p">(</span><span class="mf">3</span><span class="p">,</span> <span class="s2">&quot;-&quot;</span><span class="p">)</span>      <span class="c1">// =&gt; &quot;x--&quot;: add dashes on the right to a length of 3</span>

   <span class="c1">// Space trimming functions. trim() is ES5; others ES2019</span>
   <span class="s2">&quot; test &quot;</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span>         <span class="c1">// =&gt; &quot;test&quot;: remove spaces at start and end</span>
   <span class="s2">&quot; test &quot;</span><span class="p">.</span><span class="nx">trimStart</span><span class="p">()</span>    <span class="c1">// =&gt; &quot;test &quot;: remove spaces on left. Also trimLeft</span>
   <span class="s2">&quot; test &quot;</span><span class="p">.</span><span class="nx">trimEnd</span><span class="p">()</span>      <span class="c1">// =&gt; &quot; test&quot;: remove spaces at right. Also trimRight</span>

   <span class="c1">// Miscellaneous string methods</span>
   <span class="nx">s</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="s2">&quot;!&quot;</span><span class="p">)</span>           <span class="c1">// =&gt; &quot;Hello, world!&quot;: just use + operator instead</span>
   <span class="s2">&quot;&lt;&gt;&quot;</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="mf">5</span><span class="p">)</span>          <span class="c1">// =&gt; &quot;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;: concatenate n copies. ES6</span>
</pre></div>

<p>
F-strings equivalent
</p>

<div class="highlight"><pre><span></span>   <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Marco&quot;</span><span class="p">;</span>

   <span class="c1">// Note the special ` marks. With normal &quot; it will not work.</span>
   <span class="nx">greeting</span> <span class="o">=</span> <span class="sb">`Hello </span><span class="si">${</span> <span class="nx">name</span> <span class="si">}</span><span class="sb">.`</span><span class="p">;</span>  <span class="c1">// greeting == &quot;Hello Bill.&quot;</span>

   <span class="c1">// Everything between ${ and the matching } is interpreted as a JavaScript expression.</span>
</pre></div>
</div>
</div>


<div id="outline-container-org6181c5a" class="outline-3">
<h3 id="org6181c5a">Null and Undefined</h3>
<div class="outline-text-3" id="text-org6181c5a">
<p>
<code>null</code> is a language keyword that evaluates to a special value that is
usually used to indicate the absence of a value. Using the typeof
operator on null returns the string “object”, indicating that null can
be thought of as a special object value that indicates “no object”. In
practice, however, null is typically regarded as the sole member of
its own type, and it can be used to indicate “no value” for numbers
and strings as well as objects. Most programming languages have an
equivalent to JavaScript’s null: you may be familiar with it as NULL,
nil, or None.
</p>

<p>
JavaScript also has a second value that indicates absence of
value. The <code>undefined</code> value represents a deeper kind of absence. It is
the value of variables that have not been initialized and the value
you get when you query the value of an object property or array
element that does not exist. If you apply the typeof operator to the
undefined value, it returns “undefined”, indicating that this value is
the sole member of a special type.
</p>
</div>
</div>


<div id="outline-container-orgd94ab62" class="outline-3">
<h3 id="orgd94ab62">Infinity, NaN and other numerical values</h3>
<div class="outline-text-3" id="text-orgd94ab62">
<div class="highlight"><pre><span></span>   <span class="kc">Infinity</span>


   <span class="kc">NaN</span>

   <span class="kc">Infinity</span><span class="o">/</span><span class="kc">Infinity</span> <span class="c1">// =&gt; NaN</span>

   <span class="o">-</span><span class="mf">1</span><span class="o">/</span><span class="kc">Infinity</span> <span class="c1">// =&gt; -0; i.e. negative 0. Funny notion. Like limit.</span>

    <span class="o">-</span><span class="mf">0</span> <span class="o">===</span> <span class="mf">0</span> <span class="c1">// =&gt; true; they are equal</span>


    <span class="c1">// The following Number properties are defined in ES6. Note, Number is built-in</span>
    <span class="nb">Number</span><span class="p">.</span><span class="nb">parseInt</span><span class="p">()</span>       <span class="c1">// Same as the global parseInt() function</span>
    <span class="nb">Number</span><span class="p">.</span><span class="nb">parseFloat</span><span class="p">()</span>     <span class="c1">// Same as the global parseFloat() function</span>
    <span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>         <span class="c1">// Is x the NaN value?</span>
    <span class="nb">Number</span><span class="p">.</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>      <span class="c1">// Is x a number and finite?</span>
    <span class="nb">Number</span><span class="p">.</span><span class="nx">isInteger</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>     <span class="c1">// Is x an integer?</span>
    <span class="nb">Number</span><span class="p">.</span><span class="nb">isSafeInteger</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="c1">// Is x an integer -(2**53) &lt; x &lt; 2**53?</span>
    <span class="nb">Number</span><span class="p">.</span><span class="nx">MIN_SAFE_INTEGER</span> <span class="c1">// =&gt; -(2**53 - 1)</span>
    <span class="nb">Number</span><span class="p">.</span><span class="nx">MAX_SAFE_INTEGER</span> <span class="c1">// =&gt; 2**53 - 1</span>
    <span class="nb">Number</span><span class="p">.</span><span class="nx">EPSILON</span>          <span class="c1">// =&gt; 2**-52: smallest difference between numbers</span>
</pre></div>
</div>
</div>



<div id="outline-container-orga85f460" class="outline-3">
<h3 id="orga85f460">Regex</h3>
<div class="outline-text-3" id="text-orga85f460">
<p>
Notice the following interesting fact. When searching for Regex you
do not do it through a package. You do it by <b>declaring</b> a
variable with your regex expression. This will be interpreted as
some object. It is in fact a datatype known as RegExp and it has
several <b>methods</b> associated with it to deal with regexp stories.
</p>

<div class="highlight"><pre><span></span><span class="kd">let</span> <span class="nx">text</span> <span class="o">=</span> <span class="s2">&quot;testing: 1, 2, 3&quot;</span><span class="p">;</span>   <span class="c1">// Sample text</span>

<span class="c1">// See below how you define your regexp variable</span>
<span class="kd">let</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/\d+/g</span><span class="p">;</span>            <span class="c1">// Matches all instances of one or more digits</span>

<span class="c1">// Some methods associated to the object.</span>
<span class="nx">pattern</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span>               <span class="c1">// =&gt; true: a match exists</span>

<span class="c1">// Some methods associated with the string object</span>
<span class="nx">text</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="nx">pattern</span><span class="p">)</span>             <span class="c1">// =&gt; 9: position of first match</span>
<span class="nx">text</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">)</span>              <span class="c1">// =&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]: array of all matches</span>
<span class="nx">text</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="s2">&quot;#&quot;</span><span class="p">)</span>       <span class="c1">// =&gt; &quot;testing: #, #, #&quot;</span>
<span class="nx">text</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\D+/</span><span class="p">)</span>                <span class="c1">// =&gt; [&quot;&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]: split on nondigits</span>
</pre></div>
</div>
</div>


<div id="outline-container-org9b61a4c" class="outline-3">
<h3 id="org9b61a4c">Peculiarities of JavaScript</h3>
<div class="outline-text-3" id="text-org9b61a4c">
<p>
JavaScript differs from more static languages in that functions and
classes are not just part of the language syntax: they are
<i>themselves values that can be manipulated by JavaScript programs</i>.
</p>

<p>
Like any JavaScript value that is not a primitive value, functions
and classes are a <b>specialized kind of object</b>.
</p>

<p>
The JavaScript interpreter performs <b>automatic garbage collection</b>
for memory management. This means that a JavaScript programmer
generally does not need to worry about destruction or deallocation
of objects or other values.
</p>
</div>
</div>
</div>
