<style>
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
</style>

<p>
So new post.
</p>

<p>
This is mainly about some integration exercise. It is not simple to
set up properly integration patterns. You can refer to <a href="https://www.enterpriseintegrationpatterns.com/index.html">the following</a>
for a general overview.
</p>

<p>
So let's start to explore.
</p>

<!-- TEASER_END -->

<p>
So the basic idea is to create an integration pattern via
asynchronous API calls.
</p>

<p>
So you will need to pieces:
</p>

<ol class="org-ol">
<li>code implementation to work with that mental framework</li>

<li>asynchronous API documentation</li>
</ol>

<p>
The next two chapters deal with it.
</p>

<p>
(Update as of 10-03 - actually the best way to work in such an
asychronous way is through a ractive programming model. Check at your
notes in <a href="https://marcohassan.github.io/bits-of-experience/posts/spring/">here</a> - chapter on reactive programming. Note however that
you will not be able to write full reactive programs as the relational
model and JDBC is not being rewritten in a reactive way yet.)
</p>

<div id="outline-container-org7f1cdbd" class="outline-2">
<h2 id="org7f1cdbd">Asynchronous API - Documentation</h2>
<div class="outline-text-2" id="text-org7f1cdbd">
<p>
Apparently there is an OpenAPI counterpart for async communication.
</p>

<p>
I mean you could simply document your endpoints with OpenAPI and
keep the structure of the async communication in some documentation
somewhere else.
</p>

<p>
I like in any case the idea of using a standard. Computer science is
fun and you have to leverage on such big projects as then you can
see that there are options to visulize this general asynch
communication and more likely many other projects will start to
emerge as this is just the beginning of the entire thingy. 
</p>

<p>
Check <a href="https://www.asyncapi.com/docs/getting-started/hello-world">this</a>. You see that it is a quite intuitive scema.
</p>

<p>
Read into it <a href="https://www.asyncapi.com/blog/asyncapi_codegen_scst">here</a> to get an idea of where the market is already
moving.
</p>

<p>
I think that this will come with time. Baby steps as always. Start
easy - then expand on it. Sooner or later you will start in any case
to work more with event-driven architectures. 
</p>
</div>
</div>


<div id="outline-container-org9107a72" class="outline-2">
<h2 id="org9107a72">Coding and Designing Asynchronous Communication</h2>
<div class="outline-text-2" id="text-org9107a72">
<p>
So basically there are two options:
</p>

<ul class="org-ul">
<li>polling</li>

<li>callback</li>
</ul>

<p>
You can briefly read about the two <a href="https://sanketdaru.com/blog/polling-model-async-rest-spring-boot/">here</a>. It is clear now that the
most elegant option is the second one.
</p>
</div>

<div id="outline-container-orgcf2115b" class="outline-3">
<h3 id="orgcf2115b">Polling</h3>
<div class="outline-text-3" id="text-orgcf2115b">
<p>
W.r.t. polling you can see the following two sources:
</p>

<ul class="org-ul">
<li><a href="https://sanketdaru.com/blog/polling-model-async-rest-spring-boot/">source 1</a></li>

<li><a href="https://github.com/PheaSoy/spring-boot-async-callback">source 2</a> - note that name is misleading it is still mostly a
polling solution in my view.</li>
</ul>
</div>
</div>


<div id="outline-container-orga2dc09a" class="outline-3">
<h3 id="orga2dc09a">Callback</h3>
<div class="outline-text-3" id="text-orga2dc09a">
<p>
You can easily create callbacks with a seris of endpoints and
multi-threading on your machines.
</p>

<p>
A more solid way is to work with queues. Then you do not have to go
on multi-threading necessarily. This might simplify extensively the
development task at the cost of some resources loss.
</p>

<p>
You can then integrate queues with event-grids in order to create a
fully reactive architecture for your application that is not
polled operations dependent.
</p>

<p>
I.e. in comparison to <a href="https://github.com/PheaSoy/spring-boot-async-callback">source 2</a> you do not have the client to
continuously ask for the feedback and check if execution completed.
</p>
</div>
</div>
</div>


<div id="outline-container-org77d6412" class="outline-2">
<h2 id="org77d6412">General Architecture for creating a scalable integrated ETL service</h2>
<div class="outline-text-2" id="text-org77d6412">
</div>
<div id="outline-container-org5d8955b" class="outline-3">
<h3 id="org5d8955b">First Round of Thinking - refinements are coming</h3>
<div class="outline-text-3" id="text-org5d8955b">
<img src="../../images/callbackAsync.png" class="center">

<p>
I mean so you see that at conceptual level it is not that difficult
to set up a solution performing your desired solutions.
</p>

<p>
Have just to read a bit into it - but basically you are very much
done.
</p>

<p>
You can read over <a href="https://www.freecodecamp.org/news/how-to-scale-microservices-with-message-queues-spring-boot-and-kubernetes-f691b7ba3acf/">here</a> a basic example for such a similar solution
going more in the technological component. Note that you will
not be able to apply the exact same tech stack but the idea is
there and it is quite similar to what you had in mind. 
</p>

<p>
Another <a href="https://developer.ibm.com/tutorials/auto-scale-rabbitmq-consumers-by-queue-size-on-openshift/">source</a> for making that pattern.
</p>
</div>
</div>

<div id="outline-container-org54d998d" class="outline-3">
<h3 id="org54d998d">Second round of Thinking - gathering evidence</h3>
<div class="outline-text-3" id="text-org54d998d">
<p>
So the one above was a basic idea.
</p>

<p>
I think you have the general structure in mind. Have to become more
concrete now.
</p>

<p>
Explore better the available services in Azure and start to create
a solid architecture for it.
</p>

<p>
I.e. slowly start as well talks with your peers to see what is
doable and what is not.
</p>

<p>
Basic architectural patterns that you should consider for your
asynchronous messages are <a href="https://docs.microsoft.com/en-us/azure/architecture/guide/technology-choices/messaging">the following</a>.
</p>
</div>

<div id="outline-container-org564ef1d" class="outline-4">
<h4 id="org564ef1d">Request-Reply Pattern</h4>
<div class="outline-text-4" id="text-org564ef1d">
<p>
Essentially what you aim to set up is an async request-reply
integration pattern.
</p>

<p>
You can read about it over <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/async-request-reply">here</a>. There in the context and problem
you can see your exact situation and see how a queue is often the
solution architecture of choice for this kind of situations.
</p>

<p>
Note that the queue must be integrated with a status check.
</p>

<p>
You can see the most basic architecture to set something like this
up <a href="https://reflectoring.io/amqp-request-response/">here</a>. I think this is quite basic and I will try to construct a
more solid architecture next. 
</p>

<p>
This is what I will develop on in the next sections.
</p>
</div>
</div>

<div id="outline-container-orge962f46" class="outline-4">
<h4 id="orge962f46">Service Bus</h4>
<div class="outline-text-4" id="text-orge962f46">
<p>
This is a queue service in Azure. So it is a managed queue that it
is easy to interact with.
</p>

<p>
If you want to go fully open source check the resources
above. Note as well that service bus is quite a simple message
broker. I understand that it does not allow neither the
flexibility of an exchange as RabbitMQ nor the resiliency of the
cluster topology of Kafka. (See quick notes <a href="https://marcohassan.github.io/bits-of-experience/posts/spring/">here</a>). 
</p>

<p>
Important points for it are mentioned next. 
</p>
</div>

<ul class="org-ul">
<li><a id="org15d7f4a"></a>On operating the messages in a queue<br />
<div class="outline-text-5" id="text-org15d7f4a">
<p>
So essentially understand the following basic operations you can
do with it:
</p>

<ul class="org-ul">
<li>get messages from queue</li>

<li>delete messages from queue</li>

<li>peek messages from queue</li>
</ul>
</div>
</li>

<li><a id="org6e9ff49"></a>Getting the Messages<br />
<div class="outline-text-5" id="text-org6e9ff49">
<p>
Check at the following get operation for a message in the queue.
</p>

<blockquote>
<p>
When a message is retrieved from the queue, the response includes
the message and a pop receipt value, which is required to delete the
message (have an API call for it).
</p>

<p>
The message is <b>not automatically deleted from the queue</b>, but after
it has been retrieved, it is <b>not visible to other clients</b> for the time
interval specified by the <b>visibilitytimeout parameter</b>.
</p>
</blockquote>

<p>
Note that upon getting a message from the queue the <code>delivery
     count</code> is increased. This is of paramount importance to deal with
faulty messages and a first class citizen for the concept of <a href="#org98977cc">Dead
Latter</a>. 
</p>

<p>
So in this way you can keep track of what was processed and what
still needs to be processed. You have a state machine as long as
the queue is reliable. Have to discuss with V. in this sense to
question how important is that 0.01% of non-availability. I guess
that for us is not a major concern as worst you do the operation
again. Have to have a logging mechanismus keeping track of
everything nonetheless. 
</p>

<p>
Now the only thing is that in such a way you need polling from
the queue.
</p>

<p>
The other possibility is to set an event-grid or an azure
function trigger in between.
</p>
</div>
</li>

<li><a id="orgc9eace1"></a>Peeking the Messages<br />
<div class="outline-text-5" id="text-orgc9eace1">
<p>
This function essentially works as the get orperator with the
difference that <code>delivery count</code> is <b>not increased</b>:
</p>

<blockquote>
<p>
Service Bus allows a consumer to peek the queue and lock a message
from other consumers.
</p>

<p>
It's the responsibility of the consumer to <b>report the processing
status</b> of the message.
</p>

<p>
Only when the consumer marks the message as consumed, Service Bus
removes the message from the queue.
</p>

<p>
If a failure, timeout, or crash occurs, Service Bus unlocks the
message so that other consumers can retrieve it. This way messages
aren't lost in transfer.
</p>
</blockquote>
</div>
</li>

<li><a id="orga29d65b"></a>Deleting the Messages<br />
<div class="outline-text-5" id="text-orga29d65b">
<p>
As mentioned above in the two cases what you actually do in the
above is reading messages out of the queue.
</p>

<p>
You do not delete such from there. You just acquire a lock over
them for a limited amount of time.
</p>

<p>
Then you have to manually delete upon the successful processing
of a message.
</p>

<p>
You can well understand that this is very good as in such a case
you have an actual state machine about the messages that are
still to be completed.
</p>

<p>
The question is rather how you log finished jobs. I guess that
you are still interested in keeping track of that.
</p>

<p>
Need to couple the thing with a store then.
</p>
</div>
</li>

<li><a id="org98977cc"></a>Dead Latter<br />
<div class="outline-text-5" id="text-org98977cc">
<p>
See <a href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues">here</a>.
</p>

<p>
This is essentially a queue within the queue where unprocessed or
errors-bounded messages are being stored.
</p>

<p>
There are multiple reasons that make messages qualify as
dead-latter messages.
</p>

<p>
The most interesting one - among the many others - for your
application logic is the following:
</p>

<ul class="org-ul">
<li><p>
Maximum delivery count
</p>

<p>
Recall that when you get the message out of the queue its count-value
is incremented by one.
</p>

<p>
Then after a given amount of times that you tried to process
the message without success&#x2026; i.e. when the count value is
large enough - you start to push the message 
</p></li>
</ul>
</div>
</li>

<li><a id="orgf4247e2"></a>Note that there are ways to inspect the size of your queue<br /></li>

<li><a id="org2059292"></a>Check-pointing for long running jobs<br />
<div class="outline-text-5" id="text-org2059292">
<p>
That is exactly the other bit that you need.
</p>

<p>
You can set the state for a session and get the state.
</p>

<p>
So with it you would already have a solution for the UI to get
the relevant information about the processing status of a job.
</p>

<p>
For more refer to the relevant section over <a href="https://docs.microsoft.com/en-us/azure/architecture/guide/technology-choices/messaging">here</a>.
</p>
</div>
</li>
</ul>
</div>

<div id="outline-container-org3bab13c" class="outline-4">
<h4 id="org3bab13c">Putting it all together</h4>
<div class="outline-text-4" id="text-org3bab13c">
<img src="../../images/ETLstateMachine.png" class="center">


<p>
If you go for a push model you have to solve the following points:
</p>

<ul class="org-ul">
<li>pushing out of the queue - how do you trigger the eventGrid
event if the message in the queue was not processed?</li>

<li>polling you can do it yourself by implementing ETL jobs pulling
out from the queue. See the basic API of the bus.</li>

<li><p>
check as well the option to work with Azure functions. It
probably makes most sense to work in such a way.
</p>

<p>
Check <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-storage-blob-triggered-function">this documentation</a> in this sense. (actually the event Grid
also mentioned <a href="https://stackoverflow.com/questions/47570207/message-from-azure-blob-storage-to-azure-service-bus">here</a>). So in any case you are on the right track
to construct your solution architecture. Check at <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-storage-queue-triggered-function">this</a>
documentation.
</p></li>

<li>you need to check at the costs. you need Premium Service Bus if
you want to go down the full road. Check if this makes sense but
yeah probably makes sense to work with functions.</li>
</ul>
</div>

<ul class="org-ul">
<li><a id="orgc10bf7a"></a>on service bus - eventgrid integration<br />
<div class="outline-text-6" id="text-orgc10bf7a">
<p>
See the <a href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-to-event-grid-integration-concept?tabs=event-grid-event-schema">following page</a>.
</p>
</div>
</li>

<li><a id="org57cb95c"></a><span class="todo TODO">TODO</span> open questions - how to make the service resilient<br /></li>
</ul>
</div>
</div>

<div id="outline-container-org67b4d13" class="outline-3">
<h3 id="org67b4d13">Third Round of Thinking</h3>
<div class="outline-text-3" id="text-org67b4d13">
<p>
So going back to it now.
</p>

<p>
The issue is that I was told that we have to make everything fit
in our VNet for security reasons.
</p>

<p>
Makes well sense to me. The only thing that is disturbing is that
there is the general statement of staying within the existing stack
and not using additional services.
</p>

<p>
That of course makes little sense. If the cloud provides
you 100. Use it. Plus services makes you very agile and take lots
of pain from you away.
</p>

<p>
Continue in this sense to explore them. Just check if they can be
integrated in the VNet at a reasonable cost. If that is the case go
for it cause as long as the explanation is the one above makes
little sense not to move in that direction and move faster by doing
so.
</p>

<p>
Note now that the Service Bus might be a too costly service. We
would need the premium thing in order to integrate it in the VNet
and obviously it is not indispensable to this stage. So I will
think about something different. Meaning for instance Azure
Functions as said above. There I will as well to convince some
people and make them see the point for it. Cause they argue too
much on a lower level. I agree that on that level you do not really
need it. Meaning you can make it work with a general application
that is more portable across cloud.
</p>

<p>
However, then in that case forget pure event-driven
architectures. So it is a choice of design of a system. And it is
clear that one is slow and cumbersome. The other is integrated and
seamless and event-driven with more lock-in and more pain in a
future migration.
</p>

<p>
Trade-off in life.
</p>

<p>
Now proceed as follows in the coming week.
</p>

<ul class="org-ul">
<li><p>
You already talked and got the approval to use eventgrid.
</p>

<p>
Use this. Just check quickly how to integrate it into the VNet
and the cost. Just out of curiosity. 
</p></li>

<li><p>
You already downloaded that Azure functions tool to develop these
on your local machine.
</p>

<p>
Try to explore this. Should you start to get issue in designing a
pure event-grid architecture integrated with a webapp on the
backend.
</p></li>
</ul>

<p>
Understand as well if that fits the asynchronous logic that should
be there. 
</p>
</div>
</div>
</div>

<div id="outline-container-org80a317a" class="outline-2">
<h2 id="org80a317a">On EventGrid</h2>
<div class="outline-text-2" id="text-org80a317a">
<p>
So this is becoming a message-driven post. Giving an overview of how
to do it. But whatever&#x2026; fine by me.
</p>

<p>
So anyways the todos for the week are the following:
</p>

<ul class="org-ul">
<li>integrate eventgrid with Blob. How to generate a message when a
new file arrives over there.</li>

<li>consume eventgrid event. Check at the Java SDK for interacting
with EventGrid. Probably the info you are looking for is over
there.</li>

<li><p>
publish eventgrid event. Is it possible for an application to
publish there?
</p>

<p>
I can think of good use-cases in this sense. So start to explore
it. 
</p>

<p>
Check at the Java SDK for interacting with EventGrid. Probably the
info you are looking for is over there.
</p></li>
</ul>
</div>

<div id="outline-container-org0a0100f" class="outline-3">
<h3 id="org0a0100f">EventGrid and VNets</h3>
<div class="outline-text-3" id="text-org0a0100f">
<p>
So in order to properly understand this, you have to understand
where EventGrid live in terms of infrastructure.
</p>

<p>
Cause if you want to mask them from the outside world they must
live in some protected subnet.
</p>

<p>
At least that is my initial guess. But let's see cause I am not
that sure about it.
</p>

<hr />

<p>
So you see that in order to well understand the cloud you should
think it in boxes. Or these lego component. As soon as you enter
the security section of the service you are back to the <a href="https://docs.microsoft.com/en-us/azure/event-grid/network-security">security
concepts</a> of Azure.
</p>

<p>
I.e. for instance service tags, IP firewall options etc. So makes
little sense probably to study it over there. Have to find the time
at some to approach it as a unity.
</p>

<p>
Just upon tackling the thing in such a way you might be able to
come out of it successful. You will have a clear understanding of
which box is what. And you will have the chance to work
accordingly.
</p>

<p>
So do not spend too much time with it right now. You will have to
make Azure certifications in order to get the broad understanding
at high level.
</p>

<p>
Then you will be mentally ready to set everything in the right
buckets. 
</p>

<hr />

<p>
That said it is obvious that the service will integrate with our
existing architecture through the use of private endpoints.
</p>

<blockquote>
<p>
You can use private endpoints to allow ingress of events directly
from your virtual network to your topics and domains securely over
a private link without going through the public internet. A private
endpoint is a special network interface for an Azure service in
your VNet.
</p>

<p>
When you create a private endpoint for your topic or domain, it
provides secure connectivity between clients on your VNet and your
Event Grid resource.
</p>

<p>
The private endpoint is assigned an IP address from the IP address
range of your VNet. The connection between the private endpoint and
the Event Grid service uses a secure private link.
</p>
</blockquote>

<p>
So this is the idea I guess. Check at the following:
</p>

<img src="../../images/Screenshot 2022-03-29 120745.png" class="center">

<p>
Then EventGrid does not live in your private Subnet.
</p>

<p>
The concept is that as it is not a store even when cracked at any
given point of time there will be nothing in there. It is a
serverless service so there might even be no active runtime at a
given moment.
</p>

<p>
Then you generate messages but these are immediately transferred
through your private link. I guess there should also be encryption
at transfer on the top of it.
</p>

<p>
So you see that generally it is quite a secure service even if
living outside of your subnet.
</p>

<p>
So now the question is generally on how to create that private
endpoint through a webapp and how to connect it to EventGrid in
order to consume and generate events.
</p>

<p>
The idea at the end is essentially the same. Set up event-driven
architectures.
</p>
</div>
</div>


<div id="outline-container-org1f9987f" class="outline-3">
<h3 id="org1f9987f">Concepts</h3>
<div class="outline-text-3" id="text-org1f9987f">
<p>
So it is important to master <a href="https://docs.microsoft.com/en-us/azure/event-grid/event-schema">this section</a>. Always start from here
when exploring a new service. At the end the structure of Azure is
this one. So exploit it. 
</p>

<p>
Especially important will be concept of topics.
</p>

<p>
You have to create a solid logic for all of the different topics.
</p>

<p>
Just upon this it will be able for you to get the relevant
information.
</p>

<p>
Basically understand that there are essentially two types of
topics, which we will explore next. There is then the concept of
partner topic - this will not be that important to you.
</p>
</div>

<div id="outline-container-org132193a" class="outline-4">
<h4 id="org132193a">System Topics</h4>
<div class="outline-text-4" id="text-org132193a">
<p>
These are built-in topics provided by Azure services such as Azure
Storage, Azure Event Hubs, and Azure Service Bus. You can create
system topics in your Azure subscription and subscribe to them.
</p>

<p>
These will be of first order importance to you. Especially at the
beginning. You want to create an event driven mechanism in order
to process files on Blob.
</p>

<p>
So that is basically it. You can then check at the different
system topics on the official websites. See for instance Azure
Blob store <a href="https://docs.microsoft.com/en-us/azure/event-grid/event-schema-blob-storage?tabs=event-grid-event-schema">here</a>.
</p>
</div>
</div>

<div id="outline-container-org7bb2412" class="outline-4">
<h4 id="org7bb2412">Custom Topics</h4>
<div class="outline-text-4" id="text-org7bb2412">
<p>
Are application and third-party topics. When you create or are
assigned access to a custom topic, you see that custom topic in
your subscription.
</p>

<p>
When designing your application, you have flexibility when
deciding how many topics to create. For large solutions, create a
custom topic for each category of related events.
</p>
</div>
</div>

<div id="outline-container-org0a4da2f" class="outline-4">
<h4 id="org0a4da2f">Partner Topics</h4>
<div class="outline-text-4" id="text-org0a4da2f">
<p>
The Partner Events feature allows a third-party SaaS provider to
publish events from its services to make them available to
consumers who can subscribe to those events. The SaaS provider
exposes a topic type, a partner topic, that subscribers use to
consume events.
</p>
</div>
</div>
</div>


<div id="outline-container-org2459593" class="outline-3">
<h3 id="org2459593">Publish and Consume EventGrid - Java SDK</h3>
<div class="outline-text-3" id="text-org2459593">
<p>
All good. The relevant information for understanding the concept
and start to apply it, can be found <a href="https://docs.microsoft.com/en-us/java/api/com.azure.messaging.eventgrid?view=azure-java-stable">here</a>.
</p>

<p>
Check as well the following in order to get up and running in a
<a href="https://github.com/Azure-Samples/event-grid-java-publish-consume-events/tree/master/eventgrid-manage-producer-consumer">fast way</a>. Check as well <a href="https://github.com/Azure-Samples/event-grid-java-publish-consume-events/blob/master/eventgrid-manage-producer-consumer/src/main/java/com/microsoft/azure/eventgrid/samples/EventGridSample.java">here</a> for understanding it better. <a href="https://medium.com/microsoftazure/azure-event-grid-the-whole-story-4b7b4ec4ad23">This</a> is
as well an walkthrough.
</p>

<p>
So note that all of the solutions you found online put a broker
between the event-producer and consumer. 
</p>

<p>
I.e. note that there in between the event publisher - event grid -
and consumer - java app - sits an <i>event ingestor</i>. I..e a
component to decouple the production of an event stream from the
consumption of these events. So similar to the other solutions you
thought about that far.
</p>

<p>
You just have to make mental order and distinguish the following 3
services that can act as <i>event ingestors</i>:
</p>

<ul class="org-ul">
<li><code>EventHub</code></li>

<li><code>Service Bus</code></li>

<li><code>Azure Storage Queue</code></li>
</ul>

<p>
Understand then for each the scope, merits and drawbacks.
</p>
</div>

<div id="outline-container-orgfb881cf" class="outline-4">
<h4 id="orgfb881cf"><span class="todo TODO">TODO</span> understand if you manage to consume directly in java w/o an event ingestor</h4>
<div class="outline-text-4" id="text-orgfb881cf">
<p>
In theory that should be possible.
</p>

<p>
I could imagine the following scenario:
</p>

<ul class="org-ul">
<li>for each new event that arrives TOMCAT starts a new thread that
processes the event.</li>
</ul>

<p>
You note in any case that without an even ingestor you have a
couple of drawback at the solution level.
</p>

<ul class="org-ul">
<li>What happens to messages that your runtime does not manage to
process?</li>

<li>What happens if TOMCAT has not the capacity of processing a new
request? If you properly set up your cloud infra this should be
no issue on a theoretical level.</li>
</ul>

<p>
I guess that as always in IT you can find workarounds for these
limitations.
</p>

<p>
Nonetheless, it might well be that the different providers pose
restrictions / do not make such dirty architectures possible in
order to force well rounded solutions on the users.
</p>

<p>
Let's see.
</p>

<p>
Yes so what you basically want to do is the <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-event-quickstart">following</a>. So stop
jumping around and dig a little bit lower on that thing. Even if
it is not clear what is happening there, it is clear that this has
to happen. So spend time to understand that properly.
</p>

<p>
No so even there if you follow the path you end up using an
event ingestor. So forget about it.
</p>
</div>

<ul class="org-ul">
<li><a id="org1848e84"></a><span class="todo TODO">TODO</span> test if you can use a simple rest endpoint for managing the webhook call.<br />
<div class="outline-text-5" id="text-org1848e84">
<p>
This seems to be an option based <a href="https://stackoverflow.com/questions/53609070/how-to-have-my-java-application-as-an-endpoint-for-webhook">on this</a>.
</p>

<p>
So check at this option.
</p>

<p>
In order to fulfill this you can use the following:
</p>

<ul class="org-ul">
<li>make a webhook publishing to your application endpoint.</li>
</ul>

<p>
Good.
</p>

<p>
Seems clear how you can create that topic. The issue is that at
the creation time you have to enter the endpoint for the webhook.
</p>

<p>
So create that endpoint on your dummy helloworld machine. Then
check if everything is working out of the box. 
</p>
</div>

<ul class="org-ul">
<li><a id="org55b7c72"></a><span class="todo TODO">TODO</span> create an eventgridTopic<br />
<div class="outline-text-6" id="text-org55b7c72">
<p>
So start from here. 
</p>

<p>
Check at that reference app that you have on that webpage.
</p>

<p>
You can forget most of the things. Just get the relevant
endpoint that is interesting to you.
</p>
</div>

<ul class="org-ul">
<li><a id="orgfad03f5"></a>Consuming a System Topic<br />
<div class="outline-text-7" id="text-orgfad03f5">
<p>
So basically here what happens is the following.
</p>

<p>
You get the event as a Json. Then the thing is that this is not
a native first-class citizen in Java.
</p>

<p>
This in constrast to Python where you have for instance the
dictionary object through which you can parse all of that in a
quick way.
</p>

<p>
So in order to transform everything into objects and have
everything out of the box in the first-class citizens of the
lanaguage what happens is the following:
</p>

<ul class="org-ul">
<li><p>
You get your json, you use libraries such as Jackson or Gson
to convert the thing into an Object and you work from there
in the first class citizens of Java.
</p>

<p>
However, note that you have to have a Class with the relevant
fields such that you can create objects out of it.
</p>

<p>
That might be painful to create. I.e. it is work that you can
save and this is actually what Microsoft did for you. 
</p></li>

<li><p>
In this sense if you check at the Java SDK you will
ultimately find that bit of the thing.
</p>

<p>
Check for instance at <a href="https://docs.microsoft.com/en-us/java/api/com.azure.messaging.eventgrid.systemevents.storageblobcreatedeventdata?view=azure-java-stable">the following</a>. Then you see that this
is nothing else than a class in which you can store the json
you receive and through which you ultimately have <i>getters</i> and
<i>setters</i> for each field.
</p>

<p>
Similar classes are available for all of the system topics available.
</p></li>
</ul>
</div>
</li>
</ul>
</li>

<li><a id="org1179947"></a><span class="todo TODO">TODO</span> make the blob - evidgridtopic connection.<br />
<div class="outline-text-6" id="text-org1179947">
<p>
Should be fine. Looking at the documentation.
</p>
</div>
</li>
</ul>
</li>
</ul>
</div>

<div id="outline-container-orgfe9bc85" class="outline-4">
<h4 id="orgfe9bc85"><span class="todo TODO">TODO</span> Eventgrid Java SDK</h4>
<div class="outline-text-4" id="text-orgfe9bc85">
<p>
So basically looking at the SDK I see a lot of models. I.e. you
have all of these in order to properly map the things.
</p>

<p>
Now you just have to understand how to set up that relevant
endpoint and parse the json you receive.
</p>

<p>
So first idea to test if the webhook thing is working is to say:
</p>
</div>

<ul class="org-ul">
<li><a id="org58d1421"></a><span class="todo TODO">TODO</span> test simply if the eventgrid is publishing to the endpoint<br />
<div class="outline-text-5" id="text-org58d1421">
<ul class="org-ul">
<li><p>
hit my endpoint - save the json as a string and return the
string.
</p>

<p>
in such a way you can at least test if the communication is ok.
then all of the rest will follow.
</p></li>
</ul>
</div>
</li>

<li><a id="org34ae333"></a><span class="todo TODO">TODO</span> use the sdk to deserialize the message and put it into objects<br />
<div class="outline-text-5" id="text-org34ae333">
<p>
Idea: from there on you are in your Java first class citizens
world. 
</p>

<div class="highlight"><pre><span></span>     <span class="n">List</span><span class="o">&lt;</span><span class="n">EventGridEvent</span><span class="o">&gt;</span> <span class="n">eventGridEventList</span> <span class="o">=</span> <span class="n">EventGridEvent</span><span class="p">.</span><span class="na">fromString</span><span class="p">(</span><span class="n">eventGridEventJsonString</span><span class="p">);</span>
     <span class="n">EventGridEvent</span> <span class="n">eventGridEvent</span> <span class="o">=</span> <span class="n">eventGridEventList</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
     <span class="n">BinaryData</span> <span class="n">eventGridEventData</span> <span class="o">=</span> <span class="n">eventGridEvent</span><span class="p">.</span><span class="na">getData</span><span class="p">();</span>

     <span class="n">User</span> <span class="n">objectValue</span> <span class="o">=</span> <span class="n">eventGridEventData</span><span class="p">.</span><span class="na">toObject</span><span class="p">(</span><span class="n">User</span><span class="p">.</span><span class="na">class</span><span class="p">);</span>  <span class="c1">// If data payload is a User object.</span>
     <span class="kt">int</span> <span class="n">intValue</span> <span class="o">=</span> <span class="n">eventGridEventData</span><span class="p">.</span><span class="na">toObject</span><span class="p">(</span><span class="n">Integer</span><span class="p">.</span><span class="na">class</span><span class="p">);</span>  <span class="c1">// If data payload is an int.</span>
     <span class="kt">boolean</span> <span class="n">boolValue</span> <span class="o">=</span> <span class="n">eventGridEventData</span><span class="p">.</span><span class="na">toObject</span><span class="p">(</span><span class="n">Boolean</span><span class="p">.</span><span class="na">class</span><span class="p">);</span>  <span class="c1">// If data payload is boolean.</span>
     <span class="n">String</span> <span class="n">stringValue</span> <span class="o">=</span> <span class="n">eventGridEventData</span><span class="p">.</span><span class="na">toObject</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="na">class</span><span class="p">);</span>  <span class="c1">// If data payload is String.</span>
     <span class="n">String</span> <span class="n">jsonStringValue</span> <span class="o">=</span> <span class="n">eventGridEventData</span><span class="p">.</span><span class="na">toString</span><span class="p">();</span>  <span class="c1">// The data payload represented in Json String.</span>
</pre></div>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-orge652011" class="outline-3">
<h3 id="orge652011"><span class="todo TODO">TODO</span> Integrate EventGrid with Blob</h3>
</div>
</div>

<div id="outline-container-org1c4da37" class="outline-2">
<h2 id="org1c4da37">On storage Queue</h2>
<div class="outline-text-2" id="text-org1c4da37">
<p>
Note that this is for sure available as we already have a storage
account in the VNet and as that lives in these spaces 1+1=2.
</p>

<p>
Now it is a way to store the messages. So in theory you can use it.
</p>

<p>
The only question here is how the messages are saved? Ordered or
not?
</p>

<p>
Similar concepts to ServiceBus? Where are the differences?
</p>
</div>
</div>


<div id="outline-container-orgaa1c256" class="outline-2">
<h2 id="orgaa1c256">On Azure Functions</h2>
<div class="outline-text-2" id="text-orgaa1c256">
<p>
Very nice way to integrate with the two services you want to use:
</p>

<ul class="org-ul">
<li>Blob</li>

<li>Service Bus</li>
</ul>

<p>
Check here the <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-service-bus">possible triggers</a>.
</p>

<p>
In such a way you do not have to go Premium on Event Grid and I
think that for the extent of our workloads it is more than enough to
work in such a way without going too big on services.
</p>

<p>
Start to test your workflow with Azure Functions Core Tools as soon
as you get the green light from IT to install it.
</p>
</div>
</div>


<div id="outline-container-org8d6d558" class="outline-2">
<h2 id="org8d6d558">On issues when working in such a fragmented Networking driven space</h2>
<div class="outline-text-2" id="text-org8d6d558">
</div>
<div id="outline-container-orgadfa5d7" class="outline-4">
<h4 id="orgadfa5d7">Circuit Breaker</h4>
<div class="outline-text-4" id="text-orgadfa5d7">
<p>
This is an important concept that you have to keep in mind when
you develop your distributed system solution. 
</p>

<p>
The idea is that as information is more distributed it might be
more difficult to revert a given app bit of logic in case of
errors.
</p>

<p>
So you have always to keep in mind how to break the circuit in
case of faults and how to revert every distributed component
affected.
</p>

<p>
You might as well think in terms of <b>compensating transaction</b>
patterns.
</p>

<p>
What is needed to track and trigger compensating transactions?
</p>

<p>
This is in fact probably the one and major issue of setting up
everything properly in a distributed system way. All the rest is a
gain in my humble opinion. Especially on the long run. 
</p>

<p>
Note that you can use DBs to manage state. You can think for
instance of the solution
</p>

<p>
Another possibility - and this a thing that in any case you will
have to dig more into it - is the one of using frameworks as
<a href="#org7d78985">Jaeger</a>.
</p>

<p>
This might help you not simply for circuit breakers but as well to
debug a distributed application and understand where issues and
triggers are. 
</p>
</div>
</div>


<div id="outline-container-org7d78985" class="outline-4">
<h4 id="org7d78985">Jaeger</h4>
<div class="outline-text-4" id="text-org7d78985">
<p>
Helps to set up proper circuit breakers.
</p>

<p>
The idea is that with Jaeger you can trace the calls back and
implement your circuit breaker on the top of it.
</p>

<p>
See the <a href="https://www.jaegertracing.io/">official documentation</a>. Check as well other source as the <a href="https://reflectoring.io/spring-boot-tracing/">following</a> for instance.
</p>

<p>
Sooner or later if you start to have serious work in distributed
environment that bit will come. 
</p>
</div>
</div>
</div>
