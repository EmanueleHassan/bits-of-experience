<style>
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
</style>

<p>
Java should become my major programming lanaguage in the next
years. The goal is to get proficient at in a couple of months.
</p>

<p>
I think it is a good thing cause as a programmer the fact that I was
never was exposed to Java was in fact a pity. Many of the most
interesting software of 21st century is written in Java (think of
Hadoop stack, Kafka &amp; Co.). While coming from the world of data
science I see the point for python I must say that once you have
extremely wide productive systems it might very well make sense to use
a more structured language as Java. Plus you should get up to speed
the functional language possibilities of Java available from Java 8
on. I think that this might boost even more the Java lanaguage and
make it a strong candidate for python-alike workflows.
</p>

<p>
That said let's go. Enjoy this new ride and absorb the language.
</p>

<p>
Note that all of the notes about the general syntax of the language
come from "Java the complete reference - 7th edition (Herbert
Schildt)" publicly available on the world wide web at <a href="https://gfgc.kar.nic.in/sirmv-science/GenericDocHandler/138-a2973dc6-c024-4d81-be6d-5c3344f232ce.pdf">this url</a>.
</p>

<!-- TEASER_END -->

<div id="outline-container-orgb14dc3a" class="outline-2">
<h2 id="orgb14dc3a">Index</h2>
<div class="outline-text-2" id="text-orgb14dc3a">
<p>
<a href="#org5c98cd0">History</a>
</p>

<ul class="org-ul">
<li><a href="#orgfaac89c">Java Applets</a></li>

<li><a href="#org833aebd">The JVM</a></li>

<li><a href="#orgc59a30f">Servlets</a></li>
</ul>

<p>
<a href="#org8e7994a">Important Notes</a>
</p>

<p>
<a href="#org2bc0aeb">Syntax</a>
</p>

<ul class="org-ul">
<li><a href="#orga9497af">if</a></li>
<li><a href="#orga2d0d1b">for</a></li>
<li><a href="#orgef6accf">java key-words</a></li>
<li><a href="#org32d180b">primitive types</a></li>
<li><a href="#orgaeef94b">casting</a></li>
<li><a href="#orgdbd796e">automatic type promotion</a></li>
<li><a href="#orgfd8b82b">Array</a></li>
<li><a href="#org76c1855">Multidimensional Array</a></li>
<li><a href="#orge808b5e">Math oprator</a></li>
<li><a href="#org0472e6c">? Operator</a></li>
<li><a href="#org4d61bdb">Do-while</a></li>
<li><a href="#org6c2f840">Scope of variables within Iterators</a></li>
<li><a href="#org8e9862d">For iterations with comma</a></li>
<li><a href="#orgc74c087">For-each type</a></li>
<li><a href="#org3d7f861">break as form of goto</a></li>
<li><a href="#orge190fe0">print and println</a></li>
<li><a href="#orge240639">Classes</a></li>
<li><a href="#org5c0f839">Constructors</a></li>
<li><a href="#org3c62d2a">Copies of Objects</a></li>
<li><a href="#orgd188574">this keyword in classes</a></li>
<li><a href="#org2a54445">finalize () method</a></li>
<li><a href="#org3c76a18">Nested Classes</a></li>
<li><a href="#orgdcd6c34">Variable number of arguments</a></li>
<li><a href="#orgcf24682">Inheritance</a>
<ul class="org-ul">
<li><a href="#org7d6b9c3">Superclass reference Subclass</a></li>
</ul></li>
<li><a href="#orgf60ff6e">on the super keyword</a></li>
<li><a href="#orge66b0e9">Method overloading vs overwriting in class hierarchies</a></li>
<li><a href="#orge599417">On overwritten Methods and dynamic method dispatch</a></li>
<li><a href="#org09338c2">Annotations</a>

<ul class="org-ul">
<li><a href="#org902f556">@Override</a></li>
<li><a href="#orga1a08ad">@Retention</a></li>
<li><a href="#org6daaf61">@Inherited</a></li>
<li><a href="#org5a0c8f0">@Deprecated</a></li>
<li><a href="#org460db8d">@SuppressWarnings</a></li>
<li><a href="#org21636b7">@FunctionalInterface</a></li>
</ul></li>

<li><a href="#org9588886">Abstract Classes</a></li>
<li><a href="#org05223b1">Object Class</a></li>
<li><a href="#org4fa9d6a">Interfaces</a></li>
<li><a href="#org31ae64f">On Functional Programming - Available since Java 8</a></li>
<li><a href="#org713f02c">enumerations</a></li>
<li><a href="#orge47d67a">Autoboxing</a></li>
<li><a href="#org50adcb8">Generics</a></li>
<li><a href="#orga9bf237">Text Blocks Feature</a></li>
<li><a href="#org3d0f666">Try with resource statements</a></li>
</ul>


<p>
&#x2026; many others I still have to insert. keep it as a todo.
</p>
</div>
</div>


<div id="outline-container-org5c98cd0" class="outline-2">
<h2 id="org5c98cd0">History</h2>
<div class="outline-text-2" id="text-org5c98cd0">
<p>
Java primary motivation was the need for a platform-independent
(that is, architecture-neutral) language that could be used to
create software to be embedded in various consumer electronic
devices, such as microwave ovens and remote controls.
</p>

<p>
This was in fact the revolution and what JVM brought about on the
table.
</p>

<p>
The idea is the following. The previous languages such as C
(giving a high level language that was both flexible and powerful
to the world) and C++ (i.e. C with classes - giving the possibility
to maintain the complexity of expanding code via OOP concepts) was
the compiling limitations.
</p>

<p>
As you can probably guess, many different types of CPUs are used as
controllers. The trouble with C and C++ (and most other languages)
is that they are designed to be compiled for a specific
target. Although it is possible to compile a C++ program for just
about any type of CPU, to do so requires a full C++ <i>compiler
targeted for that CPU</i>.
</p>

<p>
The idea was then to create a platform-independent language that
could be used to produce code that would run on a variety of CPUs
under differing environments. This is ultimately how <i>Java</i> came
about.
</p>

<p>
Note that while this was the major point through which Java came
about another important point for Java was the rise of the
internet. In fact Java gave the possibility to program in a way
that was suitable to deal with the different specifications of the
systems spanning the conundrum of systems existing across the world
wide web.
</p>


<p>
Java innovated a new type of networked program called the applet
that changed the way the online world thought about content. Java
also addressed some of the thorniest issues associated with the
Internet: <b>portability</b> and <b>security</b>.
</p>

<p>
In this sense we will check next at Java Applets to understand how
Java addressed that issues.
</p>
</div>

<div id="outline-container-orgfaac89c" class="outline-3">
<h3 id="orgfaac89c">Java Applets</h3>
<div class="outline-text-3" id="text-orgfaac89c">
<blockquote>
<p>
An applet is a special kind of Java program that is designed to be transmitted over the
Internet and automatically executed by a Java-compatible web browser.
</p>

<p>
Furthermore, an applet is downloaded on demand, without further
interaction with the user. 
</p>
</blockquote>

<p>
So you can see that this was the <i>strength</i> of Java.
</p>

<p>
In this sense the <i>applet</i> was the first kind of <b>active</b> program
available in the world wide web. I.e. you were running programs
and not simply fetch passive data.
</p>

<blockquote>
<p>
The applet is a dynamic, self-executing program.  Such a program is an
active agent on the client computer, yet it is initiated by the
server.
</p>
</blockquote>

<p>
From it the question of <b>security</b>.
</p>

<p>
Obviously, a program that <i>downloads and executes automatically</i> on
the client computer must be prevented from doing harm.
</p>

<p>
With respect to portability the case is clear. JVM gave the
possibility of running such applets across platforms and were in
the sense architecture independent.
</p>
</div>
</div>


<div id="outline-container-org833aebd" class="outline-3">
<h3 id="org833aebd">The JVM</h3>
<div class="outline-text-3" id="text-org833aebd">
<blockquote>
<p>
The key that allows Java to solve both the security and the
portability problems just described is that the output of a Java
compiler <i>is not executable code</i>. Rather, it is <b>bytecode</b>.
</p>

<p>
<b>Bytecode</b> is a highly optimized <i>set of instructions</i> designed to be
executed by the <b>Java run-time system</b>, which is called the <b>Java Virtual
Machine (JVM)</b>.
</p>

<p>
In essence, the original <b>JVM</b> was designed as an <b>interpreter for
bytecode</b>.
</p>
</blockquote>

<p>
So that is basically the story of Java.
</p>


<blockquote>
<p>
Once the run-time package exists for a given system, any Java program
can run on it. Remember, although the details of the JVM will differ
from platform to platform, all understand the same Java bytecode. <b>If
a Java program were compiled to native -executable- code</b> , then <b>different versions
of the same program would have to exist</b> for each type of CPU
connected to the Internet. This is, of course, not a feasible
solution. Thus, the execution of bytecode by the JVM is the easiest
way to create truly portable programs.
</p>
</blockquote>

<p>
So now you understand the important piece that Java brought about
on the table.
</p>

<p>
Note now that Java - as other interpreter languages - will have a
lower performance in comparison to the C++ cousin. This is natural
given that your output is not executable code.
</p>

<p>
However, with Java, the <i>differential between the two is not so
great</i>. This becasue bytecode has been highly optimized.
</p>

<p>
This because Java has another <b>secret skill</b>.
</p>


<p>
Although Java was <i>designed as an interpreted language</i>, there is
nothing about Java that prevents <b>on-the-fly compilation of
bytecode into native code</b> in order to boost performance.
</p>

<p>
Such on the fly compilation technologiy was developed into the
<b>Just-In-Time (JIT)</b> compiler for bytecode.
</p>

<blockquote>
<p>
When a JIT compiler is part of the JVM, selected portions of
bytecode are compiled into executable code in real time, on a
piece-by-piece, demand basis.
</p>
</blockquote>

<p>
So that badaboom. You have very strong performace. 
</p>
</div>
</div>


<div id="outline-container-orgc59a30f" class="outline-3">
<h3 id="orgc59a30f">Servlets</h3>
<div class="outline-text-3" id="text-orgc59a30f">
<p>
Not long after the initial release of Java, it became obvious that
Java would also be useful on the server side. The result was the
servlet. <i>A servlet is a small program that executes on the
server</i>. Just as applets dynamically extend the functionality of a
<b>web browser</b>, servlets dynamically extend the functionality of a
web server. Thus, with the advent of the servlet, Java spanned
both sides of the client/server connection.
</p>

<p>
Servlets are used to create dynamically generated content that is
then served to the client.
</p>

<p>
The very same idea of applets and of Java applies to
<i>servlets</i>. Because servlets (like all Java programs) are compiled
into bytecode and executed by the JVM, they are highly
portable. Thus, the <i>same servlet can be used in a variety of
different server</i> environments.
</p>
</div>
</div>
</div>


<div id="outline-container-org8e7994a" class="outline-2">
<h2 id="org8e7994a">Important Notes</h2>
<div class="outline-text-2" id="text-org8e7994a">
<p>
Note that in Java all code must reside <b>into a class</b>.
</p>

<p>
One tricky thing is that you have to name the file after the class
it specfies. Otherwise the java compiler will not be able to deal
and understand the dependencies of it.
</p>

<p>
Once you have specified a source file with the corresponding naming
notation as described above you can compile it with the <code>javac</code>
command. The result will be a <code>.class</code> file. Note that this is not
executable code, rather it is Bytecode as described above.
</p>

<p>
The reason why you should name the file as your class is the way
the java runtime executes the code:
</p>

<blockquote>
<p>
When Java source code is compiled, each individual class is put into
its own output file named after the class and using the .class
extension. This is why it is a good idea to give your Java source
files the same name as the class they contain—the name of the source
file will match the name of the .class file. When you execute java as
just shown, you are actually specifying the name of the class that you
want to execute. It will automatically search for a file by that name
that has the .class extension.
</p>
</blockquote>

<p>
It is then straightforward that due to this structure you should
<b>always name your source code file after your class</b>.
</p>
</div>
</div>


<div id="outline-container-org2bc0aeb" class="outline-2">
<h2 id="org2bc0aeb">Syntax</h2>
<div class="outline-text-2" id="text-org2bc0aeb">
</div>
<div id="outline-container-orga9497af" class="outline-3">
<h3 id="orga9497af">if</h3>
<div class="outline-text-3" id="text-orga9497af">
'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>

<div id="outline-container-orga2d0d1b" class="outline-3">
<h3 id="orga2d0d1b">for</h3>
<div class="outline-text-3" id="text-orga2d0d1b">
'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>

<div id="outline-container-orgef6accf" class="outline-3">
<h3 id="orgef6accf">java key-words</h3>
<div class="outline-text-3" id="text-orgef6accf">
<p>
here an overview of all of the available java-keywords.
</p>

<img src="../../images/Screenshot 2021-09-08 155756.png" class="center">

<p>
In addition to the above emacs reserves the following <b>true</b>,
<b>false</b>, <b>null</b>.
</p>
</div>
</div>

<div id="outline-container-org32d180b" class="outline-3">
<h3 id="org32d180b">primitive types</h3>
<div class="outline-text-3" id="text-org32d180b">
<p>
8 primitive types of data: <b>byte, short, int, long, char, float,
double, and boolean</b>.
</p>

<p>
recall the standard difference among them:
</p>


<img src="../../images/Screenshot 2021-09-08 160537.png">


<img src="../../images/Screenshot 2021-09-08 160659.png">
</div>
</div>

<div id="outline-container-orgaeef94b" class="outline-3">
<h3 id="orgaeef94b">casting</h3>
<div class="outline-text-3" id="text-orgaeef94b">
<p>
you specify the casting to a variable by entering the type wihtin parentheses.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>

<div id="outline-container-orgdbd796e" class="outline-3">
<h3 id="orgdbd796e">automatic type promotion</h3>
<div class="outline-text-3" id="text-orgdbd796e">
<p>
consider the following example
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
The result of the intermediate term <i>a * b</i> easily exceeds the range
of either of its byte operands. To handle this kind of problem,
Java automatically promotes each byte, short, or char operand <i>to
int</i> when evaluating an expression.
</p>

<p>
Note that this automatic type promotion might even give rise to
errors as the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
In such a case you might need to specify some casting to go back
to the desired type
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note as well the following type promotion rule.
</p>


<img src="../../images/Screenshot 2021-09-08 161942.png">
</div>
</div>

<div id="outline-container-orgfd8b82b" class="outline-3">
<h3 id="orgfd8b82b">Array</h3>
<div class="outline-text-3" id="text-orgfd8b82b">
<p>
Group of like-typed variables. Note that array are static data
objects. I.e. they do not increase automatically in
size. I.e. they are not dynamic objects that can change the memory
allocation on the fly. For this reason it is often suggested to
work with <code>lists</code> data objects. They are not built-in though.
</p>

<p>
Creation of array
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Although this declaration establishes the fact that <i>month<sub>days</sub> is
an array variable, no array actually exists</i>. In fact, the value of
month<sub>days</sub> is set to null, which represents an array with no
value. To link month<sub>days</sub> with an actual, physical array of
integers, you must allocate one using new and assign it to
month<sub>days</sub>. <code>new</code> is a special operator that <b>allocates memory</b>.
</p>

<p>
So in order to create the actual array and allocate memory use:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
You can as well combine the two steps above doing the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Finally you can also use an <i>array initializer</i> by passing a list
of dates to it. Say the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
<b>Note</b> that when doing the above there is no need to specify the
<code>new</code> variable with it.    
</p>

<p>
You can then assign a value to a specific entry in the array in a
python-alike notation
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>

<div id="outline-container-org76c1855" class="outline-3">
<h3 id="org76c1855">Multidimensional Array</h3>
<div class="outline-text-3" id="text-org76c1855">
<p>
Same as before. just muplitiple dimensions. You are very used to
it from your python data science background. 
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
You can then populate it as follows:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that it is as well possible to allocate the memory
sequentially. I.e. you can first allocate the memory of your first
dimension of the array and then subsequently pass the dimension of
the other.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that in such a way it is possible to allocate arrays of
different dimensions to the second dimension of the
multi-array. This is not possible when specifying directly the
dimension of the second dimension as a single argument.
</p>

<p>
You can then populate such an array as usual via for loops.
</p>

<p>
Another possibility is to populate the array by directly passing
lists of arguments.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that when instantiating multiple arrays what you can actually
do is to use the following notation with the parentheses <code>[]</code>
immediately following the type and not following the array.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>

<div id="outline-container-orge808b5e" class="outline-3">
<h3 id="orge808b5e">Math oprator</h3>
<div class="outline-text-3" id="text-orge808b5e">
<p>
This is also fairly standard. All of the math operations can be
performed with the usual shortcuts.
</p>

<p>
The only tricky point is the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
In this case, <b>y is set to 43</b> as you would expect, because the
increment occurs before x is assigned to y.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
the value of x is obtained before the increment operator is
executed, so the value of <b>y is 42</b>.
</p>


'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>

<div id="outline-container-org0472e6c" class="outline-3">
<h3 id="org0472e6c">? Operator</h3>
<div class="outline-text-3" id="text-org0472e6c">
<p>
The general idea is the following:
</p>

<blockquote>
<p>
expression1 ? expression2 : expression3
</p>
</blockquote>

<p>
expression1 = boolean expression.
</p>

<p>
-&gt; if true = evaluate expression2
</p>

<p>
-&gt; if false = evaluate expression3
</p>

<p>
Both expression2 and expression3 are required to return the same
type, which can’t be void.
</p>
</div>
</div>

<div id="outline-container-orgb8494a9" class="outline-3">
<h3 id="orgb8494a9">Switch</h3>
<div class="outline-text-3" id="text-orgb8494a9">
<p>
Note that this is the usual stuff. On the top of it you have a
default condition:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
i is zero.
i is one.
i is two.
i is three.
i is greater than 3.
i is greater than 3.
</p>
</div>
</div>

<div id="outline-container-org4d61bdb" class="outline-3">
<h3 id="org4d61bdb">Do-while</h3>
<div class="outline-text-3" id="text-org4d61bdb">
<p>
This is a feature of many other languages I have never used that
much but it is in fact practical as if I think about my classical
development pattern I often come into such a situation where I
write some piece of code <b>out of the while loop</b>. Think for
instance at instantiating some variables. 
</p>

<p>
Another option is to use this <i>do-while</i> notation. I think that
this <i>improves readability</i>.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
In such a way you guarantee that the execution of the do statement
is performed at least 1 time as the condition is executed <i>before</i>
the while condition.
</p>
</div>
</div>

<div id="outline-container-org6c2f840" class="outline-3">
<h3 id="org6c2f840">Scope of variables within Iterators</h3>
<div class="outline-text-3" id="text-org6c2f840">
<p>
Recall the classical point when working with operators.
</p>

<p>
When you declare a variable inside a for loop, there is one
important point to remember: the <b>scope of that variable ends when
the for statement does</b>.
</p>
</div>
</div>

<div id="outline-container-org8e9862d" class="outline-3">
<h3 id="org8e9862d">For iterations with comma</h3>
<div class="outline-text-3" id="text-org8e9862d">
<p>
Note that it is as well possible to include multiple operations
int the for statement separated by a comma in <code>java</code>.
</p>

<p>
Think for instance to the following piece of code
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
a = 1
b = 4
a = 2
b = 3
</p>
</div>
</div>

<div id="outline-container-orgc74c087" class="outline-3">
<h3 id="orgc74c087">For-each type</h3>
<div class="outline-text-3" id="text-orgc74c087">
<p>
Note that when you work with data-structures that <b>are iterable</b> you
do not need to work with conditions in the iterators. I.e. you can
work directly with the following syntax
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.


<p>
Note that you can even use it
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Value is: 1
Value is: 2
Value is: 3
Value is: 4
Value is: 5
Value is: 2
Value is: 4
Value is: 6
Value is: 8
Value is: 10
Value is: 3
Value is: 6
Value is: 9
Value is: 12
Value is: 15
Summation: 90
</p>
</div>
</div>

<div id="outline-container-org3d7f861" class="outline-3">
<h3 id="org3d7f861">break as form of goto</h3>
<div class="outline-text-3" id="text-org3d7f861">
<p>
Note that you can <b>notate pieces of code</b>. Then you can use the
<i>break</i> statement to break out of a particular piece of code.
</p>

<p>
Check for instance at the following example.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Before the break.
This is after second block.
</p>

<p>
This is a nice feature that I never encounterd that far.
</p>

<p>
This might for instance be useful when you have multiple levels of
nestedness in loops. You can declare such loops and break out on
different levels.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>

<div id="outline-container-orge190fe0" class="outline-3">
<h3 id="orge190fe0">print and println</h3>
<div class="outline-text-3" id="text-orge190fe0">
<p>
note that these two are essentially the same. the first does not
append a <i>newline</i> at the end while the second does. Note that both
lets you pass built-in java data types to them.
</p>
</div>
</div>

<div id="outline-container-orge240639" class="outline-3">
<h3 id="orge240639">Classes</h3>
<div class="outline-text-3" id="text-orge240639">
<p>
Specify a class 
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Then you instantiate objects of it via the following syntax
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.


<p>
Note that you can also simply assign a <i>reference to an object</i>
without instantiating the object itself and assigning memory to
it.
</p>

<p>
To understand that understand the following:
</p>


<img src="../../images/Screenshot 2021-09-09 093617.png">


<p>
Note that such <b>references</b> allow the possibility to have two
variables referencing the same object.
</p>

<p>
Think for instance at the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that b2 will not store a copy of the b1 object. It will
rather have a <b>reference</b> to the existing b1 object in the
memory.
</p>

<p>
Note now the following illustration and <i>important point</i>.
</p>

<img src="../../images/Screenshot 2021-09-09 095508.png">
</div>
</div>

<div id="outline-container-org5c0f839" class="outline-3">
<h3 id="org5c0f839">Constructors</h3>
<div class="outline-text-3" id="text-org5c0f839">
<p>
A <b>constructor</b> initializes an object immediately upon
creation. It has the <i>same name as the class in which it resides
and is syntactically similar to a method</i>.
</p>

<p>
Note that constructor methods do not have any return type - <b>not
even void</b>. This is because the implicit return type of a class’
constructor is the class type itself.
</p>

<p>
Example of constructor syntax
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Constructing Box
Constructing Box
Volume is 1000.0
Volume is 1000.0
</p>

<p>
Note that the standard case is to use <b>parameterized</b> versions of
the constructors.
</p>

<p>
I.e. you would specify something like
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
And then you would instantiate a new object with the desired
properties via the following syntax:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note then the classical <i>overloading</i> property that you so often
use in constructors. You can specify multiple constructors and
based on the parameters you pass when creating the <b>new</b> object
the correct constructor is called.
</p>

<p>
For instance a basic example of constructors overloading
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>

<div id="outline-container-org3c62d2a" class="outline-3">
<h3 id="org3c62d2a">Copies of Objects</h3>
<div class="outline-text-3" id="text-org3c62d2a">
<p>
A clasical way to copy obejcts to a new one is to specify a
constructor that takes an object as parameter.
</p>

<p>
To understand this check at the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.


<p>
So note that this is a <b>copy</b> and <b>not a reference</b>.    
</p>
</div>
</div>

<div id="outline-container-orgd188574" class="outline-3">
<h3 id="orgd188574">this keyword in classes</h3>
<div class="outline-text-3" id="text-orgd188574">
<p>
Note that this is similar to the <i>self</i> in python.
</p>

<p>
<code>this</code> can be used inside any method to refer to the current
object.
</p>

<p>
Note that this is particularly useful when you have <b>local
variables</b> that you use within methods or in methods parameters
that overlap with <b>instance variables</b> of the class.
</p>

<p>
In that case within a method local variables will <b>overwrite the
instance variables</b>. This is where <code>this</code> comes at rescue as in
sucha way it will be possible to differentiate among the two and
actually refer to the <b>instance variables/ methods</b>.
</p>

<p>
In order to understand that check at the example above. There we
used <code>w = width, h = height, d = depth</code> in order to avoid this
kind of confusion among local and instance variables.
</p>

<p>
Note however that it is as well possible to avoid that confusion
by:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>

<div id="outline-container-org2a54445" class="outline-3">
<h3 id="org2a54445">finalize () method</h3>
<div class="outline-text-3" id="text-org2a54445">
<p>
Sometimes an object will need to <b>perform some action when it is
destroyed</b>. For example, if an object is <i>holding some non-Java
resource such as a file handle</i> or character font, then you might
want to make sure these resources are freed before an object is
destroyed.
</p>

<p>
In order to do that you use the <code>finialize</code> method. Then when the
run-time garbage collector wants to release an object it will
first execute such <code>fianlize ()</code> method.
</p>

<p>
In order to specify it use the following syntax
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>

<div id="outline-container-org3c76a18" class="outline-3">
<h3 id="org3c76a18">Nested Classes</h3>
<div class="outline-text-3" id="text-org3c76a18">
<p>
Recall that if if class B is a nested class defined within class
A, then B does not exist independently of A. A nested class has
access to the members, including private members, of the class in
which it is nested. <b>However, the enclosing class does not have
access to the members of the nested class.</b> So this is the added
modeling possibility allowed through nested classes.
</p>

<p>
The most important type of nested class is the <i>inner class</i>. An
inner class is a non-static nested class. It has <b>access to all of
the variables and methods of its outer class</b> and may refer to them
directly in the same way that other non-static members of the
outer class do.
</p>

<p>
Note as well the following important property. It is important to
realize that an <b>instance of Inner can be created only within the
scope of class Outer</b>. The Java compiler generates an error message
if any code outside of class Outer attempts to instantiate class
Inner.
</p>

<p>
<i>Basic Example</i>:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
display: outer<sub>x</sub> = 100
</p>

<p>
Note that <b>syntactically</b> you can instantiate an object of the
inner class by <b>dotted notation</b>. I.e. you can declare a <code>new
   Outer.Inner</code> object. This is useful when you want to instantiate
an object outside of the Outer class source file.
</p>
</div>
</div>

<div id="outline-container-orgdcd6c34" class="outline-3">
<h3 id="orgdcd6c34">Variable number of arguments</h3>
<div class="outline-text-3" id="text-orgdcd6c34">
<p>
That is also one of the classics in programming and is often
useful.
</p>

<p>
Avariable-length argument is specified by three periods
<code>(...)</code>. For example, here is how vaTest( ) is written using a
vararg:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
This syntax tells the compiler that vaTest( ) can be <b>called with
zero or more arguments</b>. As a result, <b>v is implicitly declared as
an array of type int[ ]</b>. Thus, inside vaTest( ), <b>v is accessed
using the normal array syntax</b>.
</p>

<p>
<i>Example</i>:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Number of args: 1 Contents: 10 
Number of args: 3 Contents: 1 2 3 
Number of args: 0 Contents:
</p>

<p>
Note that the dotted notation implements everything as an
<b>array</b>.
</p>

<p>
First, as explained, inside vaTest( ), v is operated on as an
array. This is because v is an array. The <code>...</code> syntax simply
tells the compiler that a variable number of arguments will be
used, and that these <b>arguments will be stored in the array
referred to by v</b>. <b>The arguments are automatically put in an
array and passed to v</b>. In the case of no arguments, the length of
the array is zero.
</p>

<p>
Amethod can have “normal” parameters along with a variable-length
parameter. However, the variable-length parameter <b>must be the last
parameter</b> declared by the method.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Then when you call <code>doIt</code>, the first three parameters are mapped
to the first three arguments and the others go in the array
<code>vals</code>.
</p>
</div>
</div>

<div id="outline-container-orgcf24682" class="outline-3">
<h3 id="orgcf24682">Inheritance</h3>
<div class="outline-text-3" id="text-orgcf24682">
<p>
Recall general terminology. Subclass -&gt; class that is
inheriting. Superclass -&gt; reference class.
</p>

<p>
<i>Basic Syntax</i>:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Contents of superOb: 
i and j: 10 20
</p>

<p>
Contents of subOb: 
i and j: 7 8
k: 9
</p>

<p>
Sum of i, j and k in subOb:
i+j+k: 24
</p>

<p>
Note that <i>subclasses</i> has access to all of the <b>members</b> of the
<i>superclass</i>. This is why you have access to <i>i, j, showij</i>.
</p>
</div>

<div id="outline-container-org7d6b9c3" class="outline-4">
<h4 id="org7d6b9c3">Superclass reference Subclass&#xa0;&#xa0;&#xa0;<span class="tag"><span class="reference_variable">reference_variable</span></span></h4>
<div class="outline-text-4" id="text-org7d6b9c3">
<p>
It is possible for a superclass <b>object</b> to refer to a subclass
object.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Volume of weightbox is 105.0
Weight of weightbox is 8.37
</p>

<p>
Volume of plainbox is 105.0
</p>

<p>
Note that even if you assign a reference to Boxweight object you
cannot access all of the members of it as the <b>type of the
assignment ultimately determines what you can access and not</b>.
</p>

<p>
Note that you <b>cannot access members</b> of the referenced object that
are not implemented in the superclass though. 
</p>
</div>
</div>
</div>

<div id="outline-container-orgf60ff6e" class="outline-3">
<h3 id="orgf60ff6e">on the super keyword</h3>
<div class="outline-text-3" id="text-orgf60ff6e">
<p>
This is useful in the case you would not want to expose the entire
logic of an application to the end user. I.e. in the case you want
to keep some of the variables of the subclass private and
instantiate them via the superclass.
</p>

<p>
In practice you can use the <code>super</code> keyword in two ways to achieve
that goal. The first <b>calls the superclass’ constructor</b>. The
second is used to <b>access a member of the superclass that has been
hidden by a member of a subclass</b>.
</p>


<p>
<i>On calling the superclass constructor</i>:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note now that as you do not have to initialize the <code>w, h, d</code>
directly in the subclass you do not have to grant access to the
members to the subclass. I.e. you can safely define them as
<b>private</b> in the superclass as such variables will always be
instatiated by the superclass even when calling the constructor of
the subclass.
</p>

<p>
Note that when you overload the constructor and have multiple
initalizer for it you can use in a similar way multiple
constructors for the subclass. You can then pass the <code>super()</code>
with the different parameters reflecting the desired arguments of
the superclass constructor.
</p>

<p>
The only constructor where you should pay attention in the
subclass in inheritance cases is the one of:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
i.e. the constructor by passing the reference to an object. Here
it is important to realize that you pass an object of type
<b>BoxWeight</b> not <b>Box</b>. Here super still calls the constructor
<code>Box(Box ob)</code>.
</p>

<p>
As mentioned earlier, a superclass variable can be used to
reference any object derived from that class. Thus, we are able to
pass a BoxWeight object to the Box constructor.
</p>

<p>
<i>On the use of super to access superclass members:</i>
</p>

<p>
This is used when the member names of the <i>subclass</i> hide members
by the same name in the superclass.
</p>

<p>
Consider this simple hierarchy
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
i in superclass: 1
i in subclass: 2
</p>

<p>
So you see that you can access the members of the superclass from
the subclass which might be useful at times.
</p>
</div>
</div>

<div id="outline-container-orge66b0e9" class="outline-3">
<h3 id="orge66b0e9">Method overloading vs overwriting in class hierarchies</h3>
<div class="outline-text-3" id="text-orge66b0e9">
<p>
Note that when you have subclasses you overwrite <code>methods</code> just
when the method has <b>exactly the same name and arguments</b> of the
superclass. If you have a method with the same name but different
arguments you simply overload that method.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
This is k: 3
i and j: 1 2
</p>
</div>
</div>

<div id="outline-container-orge599417" class="outline-3">
<h3 id="orge599417">On overwritten Methods and dynamic method dispatch</h3>
<div class="outline-text-3" id="text-orge599417">
<p>
Note that Java can resolve overwritten methods at run-time;
i.e. it decides at run time which methods to run.
</p>

<p>
This is done by checking the <b>type of the object being referred
to</b> and not the <b>type of reference variable</b>.(Note that this is in
contrast to the case when the type of the reference variable say a
superclass object - determines which methods are available for
it).
</p>

<p>
In order to see this check at the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Inside A's callme method
Inside B's callme method
Inside C's callme method
</p>

<p>
So you see that despite the reference variable is of type <code>A</code> the
methods of the subclasses are called when the reference variable
refer to them.
</p>
</div>
</div>

<div id="outline-container-org09338c2" class="outline-3">
<h3 id="org09338c2">Annotations</h3>
<div class="outline-text-3" id="text-org09338c2">
<p>
Index :
</p>

<p>
<a href="#org902f556">@Override</a>
<a href="#orga1a08ad">@Retention</a>
<a href="#org07a5e52">@Documented</a>
<a href="#org1e105eb">@Target</a>
<a href="#org6daaf61">@Inherited</a>
<a href="#org5a0c8f0">@Deprecated</a>
<a href="#org460db8d">@SuppressWarnings</a>
<a href="#org21636b7">@FunctionalInterface</a>
</p>



<p>
You have built-in Annotations that you can use out of the box.
</p>

<p>
On the top of it, you have user-defined Annotations that we will
explore next.
</p>
</div>

<div id="outline-container-orgea87c63" class="outline-4">
<h4 id="orgea87c63">Built-in Annotations</h4>
<div class="outline-text-4" id="text-orgea87c63">
</div>
<ul class="org-ul">
<li><a id="org902f556"></a>@Override<br />
<div class="outline-text-5" id="text-org902f556">
<p>
This is powerful notation construct. Note that it is not mandatory
to use for the correct syntax of the program. I noted though that
this is quite extensively used in our team.
</p>

<p>
It is quite practical in fact. With it you specify that a method
will be overrriden next. This will be useful in two ways:
</p>

<ol class="org-ol">
<li>if you make a mistake when spelling out the name of the method
or you pass a wrong number of arguments such that you will
ultimately not override the method you will be thrown an error
at compile time. It is hence a <b>safety check</b>. You are telling
the compiler that the next method should be an overrriden method.</li>

<li>the second way it helps is by navigating the code. it is then
useful to see what went wrong.</li>
</ol>

<p>
<i>Example</i>
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Message is: Hey!!
</p>
</div>
</li>

<li><a id="org5a0c8f0"></a>@Deprecated<br />
<div class="outline-text-5" id="text-org5a0c8f0">
<p>
@Deprecated annoation marks that this method is deprecated so
<b>compiler prints warning</b>. It informs user that it may be removed in
the future versions. So, it is better not to use such methods.
</p>
</div>
</li>

<li><a id="org460db8d"></a>@SuppressWarnings<br />
<div class="outline-text-5" id="text-org460db8d">
<p>
@SuppressWarnings annotation: is used to suppress warnings issued
by the compiler.
</p>
</div>
</li>
</ul>
</div>





<div id="outline-container-org4e1d93d" class="outline-4">
<h4 id="org4e1d93d">User defined Annotations</h4>
<div class="outline-text-4" id="text-org4e1d93d">
<p>
So first of all you have to understand how you define your
user-specific annotations.
</p>
</div>


<ul class="org-ul">
<li><a id="orgc7c0da1"></a>Syntax<br />
<div class="outline-text-5" id="text-orgc7c0da1">
<p>
In order to define an interface you can use the following
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that such custom annotations can just be used under the
following settings:
</p>

<ul class="org-ul">
<li>annotated method should not have any throws clauses</li>
<li>method should return one of the following:
<ol class="org-ol">
<li>primitives</li>
<li>String</li>
<li>Class</li>
<li>enum</li>
<li>array</li>
</ol></li>
<li>method should not have any parameter</li>
</ul>

<p>
Note now the following general constructs:
</p>

<ul class="org-ul">
<li><p>
an annotation that has no method is called a <code>marker</code>.
</p>

<p>
for instance the following
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that the built-in annotations above are all markers.
</p></li>

<li><p>
<code>single-value</code> annotation
</p>

<p>
an annotation that <i>has one method</i>.
</p>

<p>
see for instance the following
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
or the following
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
You can then set the value for the single methods
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.</li>

<li><p>
<code>multi-value</code> annotation
</p>

<p>
for instance the following
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.</li>
</ul>


<p>
<b>Recall:</b> albeit you have members within the annotation when an
annotation member is passed a value when instantiating it, only its
name is used.
</p>

<p>
For instance in the above, as was the case of single-value.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</li>

<li><a id="orga1a08ad"></a>@Retention<br /></li>



<li><a id="org07a5e52"></a>@Documented<br /></li>
<li><a id="org1e105eb"></a>@Target<br /></li>
<li><a id="org6daaf61"></a>@Inherited<br /></li>
<li><a id="org21636b7"></a>@FunctionalInterface<br />
<div class="outline-text-5" id="text-org21636b7">
<p>
You can use this annotation to specify that an interface fulfills
the properties of the functional interface. 
</p>

<p>
Note that these are important, as these are the basical logical
construct for <b>functional programming in Java</b>.
</p>

<p>
Functional interfaces are now simply defined as any interface
with a sinlge abstract method.
</p>

<p>
Note that this is the basis of functional programming as the
implementation of the single abstract method is then the lambda
expression you can use in your lambda function.      
</p>

<p>
If a method takes a functional interface as a parameter - note
that this is the case of functional programming -, then we can
pass the following:
</p>

<ul class="org-ul">
<li>An anonymous inner class, the old-fashioned way - meaning not
functional - (but why would we?). This is for instance the
example you have in these notes in the <code>forEach</code> loop.</li>

<li>A lambda expression, like the map() method</li>

<li>A method or constructor reference</li>
</ul>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-org9588886" class="outline-3">
<h3 id="org9588886">Abstract Classes</h3>
<div class="outline-text-3" id="text-org9588886">
<p>
<b>Important</b> Concrete methods are still <i>allowed in abstract classes</i>.
</p>

<p>
There are situations in which you will want to define a superclass
that declares the structure of a given abstraction without
providing a complete implementation of every method. That is,
sometimes you will want to create a superclass that only defines a
generalized form that will be shared by all of its subclasses,
<i>leaving it to each subclass to fill in the details</i>.
</p>

<p>
So the classical idea is to determine a class that will pose the
structure and <b>determines the structure that a subclass must
implement</b>.
</p>

<p>
In order to do that you can use the <b>abstract</b> keyword to a method
of the superclass that specifies that such method <b>must be
overrriden</b> by the subclasses.
</p>

<p>
<b>Important Note:</b> <i>Any class that contains one or more abstract
methods must also be declared abstract</i>. To declare a class
abstract, you simply use the abstract keyword in front of the
class keyword. <b>There can be no objects of an abstract
class</b>. Also, <b>you cannot declare abstract constructors, or
abstract static methods</b>.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
B's implementation of callme.
This is a concrete method.
</p>

<p>
Although abstract classes cannot be used to instantiate objects,
they <i>can be used to create object references</i>, because Java’s
approach to run-time polymorphism is implemented through the use
of superclass references.
</p>

<p>
So consider this general last example on how to use abstract
classes
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Inside Area for Rectangle.
Area is 45.0
Inside Area for Triangle.
Area is 40.0
</p>
</div>
</div>


<div id="outline-container-org05223b1" class="outline-3">
<h3 id="org05223b1">Object Class</h3>
<div class="outline-text-3" id="text-org05223b1">
<p>
There is one special class, Object, defined by Java. <b>All other
classes are subclasses of Object</b>.
</p>

<p>
That is, Object is a superclass of all other classes. This means
that a <b>reference variable of type Object can refer to an object of
any other class</b>. Also, since arrays are implemented as classes, a
variable of type Object can also refer to any array.
</p>
</div>
</div>


<div id="outline-container-org4fa9d6a" class="outline-3">
<h3 id="org4fa9d6a">Interfaces</h3>
<div class="outline-text-3" id="text-org4fa9d6a">
<p>
Index:
</p>

<p>
<a href="#orga17a325">General idea</a>
<a href="#org5fbfd75">Definition</a>
<a href="#org29933c0">Addition since Java 8</a>
<a href="#org9f7075e">On reference variables using interafaces</a>
<a href="#orge013211">Partial Implementations</a>
<a href="#orgf372936">Nested Interfaces</a>
<a href="#orgfb1ad71">Variables in Interfaces</a>
<a href="#orgf2129d5">Interface Inheritance</a>
</p>
</div>


<div id="outline-container-orga17a325" class="outline-4">
<h4 id="orga17a325">General idea</h4>
<div class="outline-text-4" id="text-orga17a325">
<p>
Using the keyword interface, you can fully abstract a class'
interface from its implementation.
</p>

<p>
I.e. using <b>interface</b> you specify what a class must do, but <i>not
how it does it</i>.
</p>

<p>
Note that due to the rather declarative notion of interfaces, the
latter are <b>specified without any instance variables</b> and with
<b>empty methods bodys</b>.
</p>

<p>
So they are essentially <b>relatives</b> of abstract classes with an
important difference:
</p>

<blockquote>
<p>
Once it is defined, any number of classes can implement an
interface. Also, one class can implement any number of interfaces.
While, in contrast, you have tighter relation among the classes
relation in Java that bound your flexibility in specfying subclasses
that can import from multiple superclasses. 
</p>
</blockquote>

<p>
To implement an interface, a class must <b>create the complete set of
methods</b> defined by the interface.
</p>

<p>
However, <i>each class is free to determine the details of its own
implementation</i>. It is both permissible and common for classes
that implement interfaces <i>to define additional members of their
own</i>.
</p>

<p>
By providing the interface keyword, Java allows you to fully
utilize the “one interface, multiple methods” aspect of
polymorphism.
</p>

<p>
Interfaces <b>add most of the functionality</b> that is required for
many applications that would normally resort to using <b>multiple
inheritance</b> in a language such as C++. I talked with Sergio and
apparently from a given version of Java you even have multiple
inheritance - so you would have to understand in this sense what
Java developers use ourtime when programming and what the best
practice for organizing the code is.
</p>
</div>
</div>

<div id="outline-container-org5fbfd75" class="outline-4">
<h4 id="org5fbfd75">Definition</h4>
<div class="outline-text-4" id="text-org5fbfd75">
<p>
The general syntax for generating interfaces is the following:
</p>

<pre class="example" id="orgd6a8fa6">
access interface name {
return-type method-name1(parameter-list);
return-type method-name2(parameter-list);
type final-varname1 = value;
type final-varname2 = value;
// ...
return-type method-nameN(parameter-list);
type final-varnameN = value;
}
</pre>

<p>
So you see that this is the usual story. with methods with empty
bodies.
</p>

<p>
Note that when you define interfaces you should your file names
where the interface is specfied after the name of the interface.
</p>

<p>
<b>Note</b> that all of the methods and variables are implicitly
<i>public</i>.
</p>

<p>
<b>Note</b> that you can have as well variables defined in
interfaces. They are implicitly and must be <b>final</b> and
<b>static</b>. I.e. they define general global variables that would
ultimately apply to the classes referring to the interfaces. 
</p>

<p>
The syntax to <b>implement</b> an interface is the following:
</p>

<pre class="example" id="orgf02d3df">
class classname [extends superclass] [implements interface [,interface...]] {
// class-body
}
</pre>

<p>
The methods that implement an interface must be declared <b>public</b>.
</p>

<p>
<b>Note</b> that top-level interfaces that are not implemented within a
class or nested in another interface must be declared as <b>public</b>
as well.
</p>
</div>
</div>

<div id="outline-container-org29933c0" class="outline-4">
<h4 id="org29933c0">Addition since Java 8</h4>
<div class="outline-text-4" id="text-org29933c0">
<p>
There was an important addition in Java 8. That is you can
specify a body for a method that you want to implement and then
you can pass it to <i>implementing</i> the interface as the <b>default</b>
method.
</p>

<p>
The syntax for doing this is for instance the following
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
The default boolean is false
</p>
</div>
</div>

<div id="outline-container-org9f7075e" class="outline-4">
<h4 id="org9f7075e">On reference variables using interafaces&#xa0;&#xa0;&#xa0;<span class="tag"><span class="reference_variable">reference_variable</span></span></h4>
<div class="outline-text-4" id="text-org9f7075e">
<p>
This is convenient. Recall that it was possible to define
reference variables as superclasses and to reference then objects
of subclasses. It was then possible to call the different abstract
methods of the superclass that would then trigger the right call
to the actual implementation of it in the subclass.
</p>

<p>
In a similar way it is possible to create reference variables as
interfaces and point then to the different objects of classes
implementing such interface.
</p>

<p>
<b>Any instance of any class that implements the declared interface
can be referred to by such a variable</b>.
</p>

<p>
The exact way the interface is implemented depends then on the
type of object that the reference interface variable points
at. This in a very similar way to what was already explained for
the case of superclass reference variable.
</p>

<p>
<b>Note:</b> interestingly when you implement a reference variable of
type interface and then refer to an object of some class referring
to that interface you can access all of the methods specified by
the interface via the reference variable but <b>you cannot access
any other members defined in the class</b> implementing the
interface.
</p>

<p>
The method to be executed is looked up dynamically at run time,
allowing classes to be created later than the code which calls
methods on them.
</p>

<blockquote>
<p>
CAUTION Because dynamic lookup of a method at run time incurs a
significant overhead when compared with the normal method invocation
in Java, you should be careful not to use interfaces casually in
performance-critical code.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-orge013211" class="outline-4">
<h4 id="orge013211">Partial Implementations</h4>
<div class="outline-text-4" id="text-orge013211">
<p>
This is as well a very powerful tool.
</p>

<p>
Recall that a class that implements an interface should implement
all of its methods if you want to instantiate objects out of it.
</p>

<p>
When you create a class that implements an interface but does not
implement all of its methods, then it should be an abstract class
and you should classify it as that.
</p>

<p>
Then further classes inheriting from such an abstract class should
implement the interface methods that were not implemented in the
abstract class if you want to instantiate objects out of them.
</p>
</div>
</div>

<div id="outline-container-orgf372936" class="outline-4">
<h4 id="orgf372936">Nested Interfaces</h4>
<div class="outline-text-4" id="text-orgf372936">
<p>
In comparison to top-level interfaces a nested interface can be
implemented as <code>public</code>, <code>private</code> or <code>protected</code>.
</p>

<p>
When a nested interface is used <b>outside of its enclosing scope</b>, it
<b>must be qualified</b> by the name of the class or interface of which
it is a member. Thus, outside of the class or interface in which a
nested interface is declared, its name must be <b>fully qualified</b>.
</p>

<p>
So understand that nested interfaces do not alter the extent to
which interfaces operate. They rather allow a <b>finer degree of
access modeling possibilities</b> as they are not restricted to be
public interfaces.
</p>

<p>
<i>Example</i>
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
10 is not negative
</p>

<p>
So note that the above does not differ extensively from the
top-level interface. It just differ in the way you can refer to
the interface. Try to replace the type of interface from <code>public</code>
to <code>private</code> and see what happens though. 
</p>
</div>
</div>

<div id="outline-container-orgfb1ad71" class="outline-4">
<h4 id="orgfb1ad71">Variables in Interfaces</h4>
<div class="outline-text-4" id="text-orgfb1ad71">
<p>
This is equal to creating a large number of constants in C++ via
the <code>#defined</code> operation.
</p>

<p>
The idea is to implement an interface containing all of the
global constants you want to define.
</p>

<p>
When you include that interface in a class, all of those variable
names will be in scope as constants.
</p>

<p>
Note that when you include that interface in a class (that is,
when you “implement” the interface), <b>all of those variable names
will be in scope as constants</b>.
</p>

<p>
It is as if that class were importing the constant fields into
the class name space as <code>final</code> variables.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Later
Yes
Soon
Yes
</p>

<p>
Have to test if such a pattern for interface variables is valid
even in the case where some methods are specified.
</p>

<p>
Pretty much sure it is the case. I.e. variables always enter the
case as <b>final</b> general constants.
</p>
</div>
</div>

<div id="outline-container-orgf2129d5" class="outline-4">
<h4 id="orgf2129d5">Interface Inheritance</h4>
<div class="outline-text-4" id="text-orgf2129d5">
<p>
Note that it is possible for one interface to extend another as
in the usual case for classes.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>
</div>




<div id="outline-container-org31ae64f" class="outline-3">
<h3 id="org31ae64f">On Functional Programming - Available since Java 8</h3>
<div class="outline-text-3" id="text-org31ae64f">
<p>
You can check <a href="https://java-8-tips.readthedocs.io/en/stable/streamsapi.html">at these notes</a>. They are not just about functional
programming. But generally on Java 8. I like this cause it is short
and compact and you can quickly get up and running with it.
</p>

<p>
Sinced Java 8 there are some new possibilities of programming in a
functional programming way.
</p>

<p>
Basically here is where your pythonic way of working comes into
play.
</p>

<p>
There you basically iterate across some iterable object with a new
kind of iterator and apply calssical <code>maps</code> and <code>reduce</code> functions
through the use of lambda functions as you already encountered them
in the past.
</p>

<p>
Note that programming in such a way will bring to you several
advantages:
</p>

<ul class="org-ul">
<li>Nicely composed, not cluttered</li>

<li>Free of low-level operations</li>

<li>Easier to enhance or change the logic</li>

<li>Iteration controlled by a library of methods</li>

<li>Efficient; lazy evaluation of loops. I.e. it can decide to
perform them lazily, in any order, and exploit parallelism as it
sees fit.</li>

<li>Easier to parallelize where desired</li>
</ul>

<p>
It is easy to see why that holds true by programming a bit with
them. It is also pretty quick then to understand the benefit of it.
</p>

<p>
I like this concept:
</p>

<blockquote>
<p>
Functional-style code has a <b>higher signal-to-noise ratio</b>; we write fewer lines
of code, but each line or expression achieves more.
</p>
</blockquote>

<p>
Note as well the following fundamental reasonings:
</p>

<blockquote>
<p>
The functional version can easily be parallelized. If the computation
was time consuming, we can easily run it concurrently for each element
in the list. If we parallelized the imperative version, we’d have to
worry about concurrent modification of the totalOfDiscountedPrices
variable. In the functional version we gain access to the variable
only after it’s fully baked, which removes the thread-safety concerns
</p>
</blockquote>

<p>
That is most likely the root from which the map-reduce and Hadoop
frameworks developed and how it is implemented in Java. Java-8 must
have been a huge revolution in this sense.
</p>

<p>
The functional style is not counter to object-oriented programming
(OOP). The real paradigm shift is from the imperative to the
declarative style of programming. With Java 8, we can now intermix
functional and OO styles of programming quite effectively. We can
continue to use the OOP style to model domain entities, their
states, and their relationships. In addition, we can model the
behavior or state transformations, business workflows, and data
processing as a series of functions to form a function composition.
</p>

<p>
So basically that is the ultimate way you program in Java and where
its benefit is unleashed. I must say that coming from the Python
world I still see it as inferior to Java for the data processing,
but with that it solves quite some fundamental constrains.
</p>

<p>
<b>Important:</b> Now the above is all at the meta-level. In order to
properly understand the stuff you should understand the concept of
@functionalInterface. I have an entry in this post for that. You
can in general refer to <a href="https://www.baeldung.com/java-8-lambda-expressions-tips">this website</a>. They host good content in
this sense.
</p>
</div>

<div id="outline-container-orgf81a82f" class="outline-4">
<h4 id="orgf81a82f">Syntax</h4>
<div class="outline-text-4" id="text-orgf81a82f">
<p>
The syntax is very close to the one you know yourself.
</p>

<p>
Consider the following    
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
The forEach() is a higher-order function that <i>accepts a lambda
expression</i> or block of code to execute in the context of each
element in the list.
</p>

<p>
The variable <code>name</code> is bound to each element of the collection
during the call. So that is the <code>lambda x</code> of your python
code. There you specify what your lambda parameters are. Here you
specify them within the <code>()</code> before the arrow <code>-&gt;</code>. So that is
basically the syntax and you already know and love that way of
programming.
</p>

<p>
<b>Note</b>: the above is not the only way to implement lambda
functions in Java. It is nonetheless the most type safe ways of
doing it.
</p>

<p>
Other possible ways involve the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
here you do not specify a type for the name. This is automatically
inferred by looking at the signature of the called method.
</p>

<p>
<b>Important Note:</b> We can also use type inference if a lambda
expression takes multiple parameters, but in that case we must
leave out the type information for all the parameters; we have to
<b>specify the type for none or for all of the parameters</b> in a lambda
expression.
</p>

<p>
The last way to specify the lambda function is the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that here you have no <code>()</code>. This is a corner case.
</p>

<p>
The Java compiler treats single-parameter lambda expressions as
special: we can leave off the parentheses around the parameter if
the parameter’s type is inferred. Note this cause some of your
colleagues are using this way of coding.
</p>

<p>
<b>Design choice:</b> Keep unity in your code and forget about it. Always work with <code>()</code>
for consistency reasons.
</p>
</div>
</div>




<div id="outline-container-org379c0e2" class="outline-4">
<h4 id="org379c0e2">Nice benefit of working in a functional way</h4>
<div class="outline-text-4" id="text-org379c0e2">
<p>
Note the following benefit of lambda expressions. You never
thought in these terms and it is clear that there are high
benefits in working in such a way.
</p>

<p>
Consider the following - old fashioned way of working with java
and code. 
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Then the issue is that multiple errors could occur in the
following part:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
such that you might not get to the roll-back code part.
</p>

<p>
This causes issues. A way to fix this is via the classical
<code>try-catch</code> methods.
</p>

<p>
Another way of doing this is via functional programming. Think of
the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
In such a way you encapsulate everything.
</p>

<p>
The policy to check the status and update the audit trails is
abstracted and encapsulated within the <code>runWithinTransaction()</code>
method. To this method we send a piece of code that needs to run
in the context of a transaction. We no longer have to worry about
forgetting to perform the steps or about the exceptions being
handled well.
</p>
</div>
</div>


<div id="outline-container-org6959178" class="outline-4">
<h4 id="org6959178">On the forEach method</h4>
<div class="outline-text-4" id="text-org6959178">
<p>
This was introduced in Java 8 and I think it is one interesting
big point for working with collections. Moreover, it makes the
point for functional programming without going in the arrow
notation above.
</p>

<p>
You can understand by looking at the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
so the syntax is the above, and as simply stated in Javadoc:
Performs the given action for each element of the Iterable until
all elements have been processed or the action throws an
exception.
</p>

<p>
So one example is the following, you have an <b>Iterable</b> object -
say a list of friends and you apply the action in the following
syntax.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>


<div id="outline-container-orge77e8fa" class="outline-4">
<h4 id="orge77e8fa">Stream</h4>
<div class="outline-text-4" id="text-orge77e8fa">
<p>
The method <code>stream()</code> is available on all collections in JDK 8 and
it wraps the collection into an instance of Stream.
</p>

<p>
A Stream is much like an iterator on a collection of objects and
provides some nice <i>fluent functions</i>. Using the methods of this
interface, we can compose a sequence of calls so that the code
reads and flows in the same way we’d state problems, making it
easier to read.
</p>

<p>
Among the classical fluent functions there are the classical <i>map</i>
and <i>reduce</i> functions. In general it looks as if all of the
methods you were using in pyhtona in the lambda expression are the
same as the ones available here under this paradigm. So double
check and make sense of all of this.
</p>
</div>
</div>


<div id="outline-container-orgac7b949" class="outline-4">
<h4 id="orgac7b949">Method Reference</h4>
<div class="outline-text-4" id="text-orgac7b949">
<p>
As mentioned in the notes regarding the @FunctionalInterface, what
is important for the functional paradigma is that a
@FunctionalInterface is implemented.
</p>

<p>
So in order to do that you can either use a <code>lambda</code> function
which obviously uses such interface, or you can as well pass a
<i>reference to a method where an implementation of a functional
interface</i> is expected. Think for instance of
<code>String::toUpperCase</code>, such that the following two work in the
same way:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Finally, note that method reference is possible, as the target
object and parameters are derived from the parameters passed to
the synthesized method. This makes the code with method references
much more concise than the code with lambda expressions.
</p>

<p>
<b>Important:</b> So note that if lambda functions simply pass the
parameters through to the method we can replace them always with
reference methods. If you do some transformation then of course
that is not possible/ you would have to create a new method for it
but then it is opinable if that makes sense - i.e. depends on the
amount of transformation involved.
</p>
</div>
</div>


<div id="outline-container-orgdbbdfca" class="outline-4">
<h4 id="orgdbbdfca">Behavior paramterization</h4>
<div class="outline-text-4" id="text-orgdbbdfca">
<p>
This is a nice feature in Java. You can pass functions to the
lambda expressions in the following way:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
So you see you can pass your functions to the forEach.
</p>

<p>
You can even pass your self defined function as paramter
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
You can then pass any function of choice as parameter to your
lambda functions.
</p>
</div>
</div>


<div id="outline-container-orgfc3d4f3" class="outline-4">
<h4 id="orgfc3d4f3"><span class="todo TODO">TODO</span> understand better the functionalInterface</h4>
</div>
</div>



<div id="outline-container-org713f02c" class="outline-3">
<h3 id="org713f02c">enumerations</h3>
<div class="outline-text-3" id="text-org713f02c">
<p>
Created using <code>enum</code>.
</p>

<p>
Example for an enumeration
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
The identifiers of such a collection: Jonathan, GoldenDel
etc&#x2026; are called <i>enumeration constants</i>. They are implicitly
defined as <b>static final</b> members. (recall static - you can call
them without first initiating an <code>Apple</code> object). Moreover note
that they are <b>constants</b>.
</p>

<p>
Once you have defined an enumeration, you can <i>create a variable
of that type</i>.
</p>

<p>
However, even though enumerations define a class type, you do not
instantiate an enum using new. Instead, you declare and use an
enumeration variable in much the same way as you do one of the
primitive types.
</p>

<p>
Note that enumerations <b>are not</b> a <i>struct</i> as you
encounterd it in C++. You do not assign to an object <code>enum</code> the
entire possible list of variables. You just assign <b>one</b> of the
possible constants. Basically <code>enum</code> objects can just be assigned
to one of the available enumerated options.
</p>

<p>
I.e. you can then for instance perform an assignment via:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
A typical use case is then the one of using such enumerators in
combination with switch statements
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that there are two <code>built-in</code> methods: <code>values</code> and
<code>valueOf</code>.
</p>

<p>
Their type if of the follwoing form:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
<b>Note</b> that being a class you can easily extend your enum class
types with constructors etc. That is the strength of java in
comparison to other languages.
</p>

<p>
Check for instance the following <code>enum</code> class:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Winesap costs 15 cents.
All apple prices:
Jonathan costs 10 cents.
GoldenDel costs 9 cents.
RedDel costs 12 cents.
Winesap costs 15 cents.
Cortland costs 8 cents.
</p>
</div>
</div>


<div id="outline-container-orge47d67a" class="outline-3">
<h3 id="orge47d67a"><span class="todo TODO">TODO</span> Autoboxing</h3>
</div>


<div id="outline-container-org50adcb8" class="outline-3">
<h3 id="org50adcb8">Generics</h3>
<div class="outline-text-3" id="text-org50adcb8">
<p>
Note that this is a very powerful element of the
language. Understand it properly as it will give you strong
modeling possibilities when writing your code.
</p>
</div>

<div id="outline-container-org9582b81" class="outline-4">
<h4 id="org9582b81">Syntax and Logic</h4>
<div class="outline-text-4" id="text-org9582b81">
<p>
Note that these resembles much the C++ templates at an intuitive level. 
</p>

<p>
Through the use of generics, it is possible to <b>create classes,
interfaces, and methods</b> that will <b>work in a <i>type-safe</i> manner with
various kinds of data</b>. Many algorithms are logically the same no
matter what type of data they are being applied to.
</p>

<p>
With generics, you can <i>define an algorithm once, independently of
any specific type of data</i>, and then apply that algorithm to a
wide variety of data types without any additional effort.
</p>

<p>
Note that prior to Java 5 you used to implement algorithms working
with multiple types of data by operating through references of
type Object. I.e. you were passing object references as
arguments. Given the fact that an Object could then contain
different types of data you had implemented your general algorithm
working with mulitple data types. The issue with such an approach
is that you could not have any <b>type safety</b>. This is what
Generics brought to the table.
</p>

<p>
Example of generic class
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Type of T is java.lang.Integer
value: 88
</p>

<p>
Type of T is java.lang.String
value: Generics Test
</p>

<p>
<b>Note</b> the above syntax. <b>Whenever a type parameter is declared,
it is specified within angle brackets</b>.
</p>

<p>
<b>Note</b> that the above uses the <i>Integer</i> class type not its
primitive. When declaring an instance of a generic type, the type
argument passed to the <b>type parameter must be a class type</b>. You
cannot use a primitive type, such as int or char. For example,
with Gen, it is possible to pass any class type to T, but you
cannot pass a primitive type to a type parameter. Therefore, the
following declaration is illegal: Gen&lt;int&gt; strOb = new
Gen&lt;int&gt;(53); // Error, can't use primitive type.
</p>

<p>
Of course, not being able to specify a primitive type is not a
serious restriction because you can use the type wrappers (as the
preceding example did) to encapsulate a primitive type.  Further,
Java’s autoboxing and auto-unboxing mechanism makes the use of the
type wrapper transparent.
</p>
</div>
</div>


<div id="outline-container-org4ca3191" class="outline-4">
<h4 id="org4ca3191">Bounded Types</h4>
<div class="outline-text-4" id="text-org4ca3191">
<p>
Note that it is possible to impose restrictions on the types of
parameters you can enter in generics. It is in this sense a
<i>bounded</i> generics.
</p>

<p>
Look at the following example making the case for such an
optionality.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
The reason because the above fails is that the class is too
generic. I.e. Once you try to call the method <code>doubleValue()</code> you
get an error as this is just defined for all of the subclasses of
<code>Number</code>. I.e. for <code>Double</code>, <code>Integer</code> etc.
</p>

<p>
So the above would work if you would just specify the above for
subclasses of the <code>Number</code> class. This is ultimately your idea as
you do not want to perform the above on general objects.
</p>

<p>
So this is where <i>bounded types</i> come at rescue. Here you specify
the superclass of the class that you pass. I.e. you are
explicitely telling that the class passed to the generics must be
a subclass of the specified superclass.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
iob average is 3.0
dob average is 3.3
</p>

<p>
The above works without any issues.
</p>

<p>
You can even specifiy multiple classes and <b>interfaces</b> as
bounds.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
In the above case any type argument passed to T must be a
subclass of MyClass and implement MyInterface.
</p>
</div>
</div>


<div id="outline-container-org583af32" class="outline-4">
<h4 id="org583af32">wildcard argument</h4>
<div class="outline-text-4" id="text-org583af32">
<p>
Note that despite type safety is generally useful and desired
there might be situations where this will limit your modeling
possibilities.
</p>

<p>
There is a good example in the book in this sense. Think of the
follwoing. You have a generics Stats&lt;T&gt; generics and you want to
create a method that compares the average of two objects. Note
that the objects might be of different types.
</p>

<p>
I.e. for your application is totally fine to compare averages of
objects involving <i>integers</i> and <i>doubles</i>.
</p>

<p>
Note however that it will not be possible to create a method in
the generics as the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
This because as soon as you pass to the method an object that
does not match the type of the object initalizing the generics
the parameter argument does not match the specified type-safed
object and an error results.
</p>

<p>
In order to deal with the above <b>wildcards</b> were created. Check
at the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that this is the difference. Here, <code>Stats&lt;?&gt;</code> matches any
Stats object, allowing any two Stats objects to have their
averages compared. And it does not just have to match the type T
you specified when instantiating an object from that generics
class.
</p>

<p>
In order to see this in an example check at the follwoing:
</p>


'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
iob average is 3.0
dob average is 3.3
fob average is 3.0
Averages of iob and dob differ.
Averages of iob and fob are the same.
</p>
</div>
</div>


<div id="outline-container-orgd3c8aea" class="outline-4">
<h4 id="orgd3c8aea">bounded wildcard argument</h4>
<div class="outline-text-4" id="text-orgd3c8aea">
<p>
this is as well a very interesting feature.
</p>

<p>
Note that here the bounded name is a bit misleading. It does in
fact bound the specified method within a generics but not in the
way that you would expect. In the sense that on the top of
bounding the method to some special object instantiation it also
tells the generics to execute exactly that method and not a
different one if the passed object belongs to the class or
subclass of the bounding class condition.
</p>

<p>
Note that the bounding condition can either be an <b>upper</b> or
<b>lower</b> bound. I.e. with the <b>upper</b> bound you will impöement the
method to any object belonging to the class or below. In the
<b>lower</b> bound you specfiy exactly the opposite.. i.e. if the
object is higher in the class hierachy than the one specfied then
apply the method to it.  
</p>

<p>
<i>Example</i> to make this clear:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Contents of tdlocs.
X Y Coordinates:
0 0
7 9
18 4
-1 -23
</p>

<p>
Contents of fdlocs.
X Y Coordinates:
1 2
6 8
22 9
3 -2
</p>

<p>
X Y Z Coordinates:
1 2 3
6 8 14
22 9 4
3 -2 -23
</p>

<p>
X Y Z T Coordinates:
1 2 3 4
6 8 14 8
22 9 4 9
3 -2 -23 17
</p>

<p>
<b>Important note</b>:
</p>

<p>
The above is an example of an <b>upper bound</b>. Note that the
general syntax is the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Moreover, note that in the above as mentioned the superclass is
<b>included</b> in the bounding condition.
</p>

<p>
The syntax for the <b>lower</b> bound is the follwoing.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that in the above the subclass is <b>excluded</b>.
</p>
</div>
</div>



<div id="outline-container-orgdcc47d6" class="outline-4">
<h4 id="orgdcc47d6">Generics Methods</h4>
<div class="outline-text-4" id="text-orgdcc47d6">
<p>
You basically already saw the usage of generics in methods in the
previous sections. Note that such methods were citizens of some
generics classes.
</p>

<p>
You can even have generics methods inside of non-generics
classes.
</p>

<p>
Such methods are useful and important cause in such a way you can
implement generic methods. For instance a method performing an
operation on any array - independently of its type -.
</p>

<p>
Note that there is as well quite an important difference among
what is shown <i>here and in the previous section</i>.
</p>

<p>
I.e. you define the <b>type parameters</b> - i.e. the parameters for
the type <b>before</b> the return type of the method. 
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note as well that due to autoboxing you do not have to always
specify the type of the arguements when calling such methods.
</p>
</div>
</div>


<div id="outline-container-org0721c3c" class="outline-4">
<h4 id="org0721c3c">Generic Constructros</h4>
<div class="outline-text-4" id="text-org0721c3c">
<p>
here the idea is that you can creeate generics constructors even
if the class is not generic.
</p>

<p>
that might be sometimes useful and is best illustrated according
to the following example:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
So you have at the end a <code>double val</code> specifying that
constraints. However you can reach that value from any object
deriving from <code>Numbers</code> such that you leave the user the
possibility of specifying multiple input formats for it.
</p>
</div>
</div>


<div id="outline-container-orga444d93" class="outline-4">
<h4 id="orga444d93">Generics Interfaces</h4>
<div class="outline-text-4" id="text-orga444d93">
<p>
This is again the same thing. You can check in the book how that
is defined.
</p>

<p>
The idea is always the same. You specify a method without writing
the implementation for it but you keep the return type of such
method open using <b>type parameters</b>.
</p>

<p>
<b>Note</b> that due to logical reasons: In general, if a class
implements a generic interface, then that class must also be
generic, at least to the extent that it takes a type parameter
that is passed to the interface.
</p>

<p>
The generic interface offers <b>two benefits</b>.
</p>

<ul class="org-ul">
<li>First, it can be implemented for different types of data.</li>

<li>Second, it allows you to put constraints (that is, bounds) on
the types of data for which the interface can be implemented.</li>
</ul>

<p>
so recall as well the second method when you are working with interfaces.
</p>
</div>
</div>
</div>


<div id="outline-container-orga9bf237" class="outline-3">
<h3 id="orga9bf237">Text Blocks Feature</h3>
<div class="outline-text-3" id="text-orga9bf237">
<p>
This was your goto way to write longer query to be embedded in
application logic. It is just available for Java 15 onwards.
</p>

<p>
We are not there yet. Cannot use it in this sense.
</p>

<p>
I use the alternative way for writing multiline queries as this is
to my humble opinion the best way to have the overview of the
screen.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>


<div id="outline-container-org3d0f666" class="outline-3">
<h3 id="org3d0f666">Try with resource statements</h3>
<div class="outline-text-3" id="text-org3d0f666">
<p>
This is implemented since Java 7. You can read the official
documentation in <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">here</a>.
</p>

<p>
The idea is the following&#x2026; check this function snippet
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
then the idea is to say try to perform the batch-query as specified
within parenthesis.
</p>

<p>
A <code>resource</code>, i.e. the thing you pass within <code>()</code> after the <code>try</code>
expression, is an object that <b>must be closed</b> after the program is
finished with it. The try-with-resources statement ensures that
each resource is closed at the end of the statement.
</p>

<p>
Note that form such a statement it does not seem that you implement
the closing clause automatically. You have to make sure that you
close the resource.
</p>

<p>
Mmm&#x2026; this looks weird to me. Note the follwoing:
</p>

<blockquote>
<p>
Any object that implements java.lang.AutoCloseable, which includes all
objects which implement java.io.Closeable, can be used as a resource.
</p>
</blockquote>

<p>
I saw that autocloseable thing into an <code>interface</code> at some point
when navigating our libraries. so I think that is the logic.
</p>

<p>
probably our batchSQL objects implement that interface and then you
are pretty much done. -&gt; double checked. this is in fact the case
see that it in fact implements that interface.
</p>

<p>
I am pretty much sure that then such close statement is called if
the try-statement fails with that syntax. Double checked with
colleagues and yeah. That is how it works. 
</p>
</div>
</div>


<div id="outline-container-orgce79bbd" class="outline-3">
<h3 id="orgce79bbd">On Strings Parsing</h3>
<div class="outline-text-3" id="text-orgce79bbd">
<p>
Have to structure the documentation more at some point and check at
which library implements everything and understand a bit its API.
</p>

<p>
In the meanwhile here some ways of working with it.
</p>

<p>
Basically you have <code>String.format()</code> way of working where you work
as in the f-strings you saw in multiple programming languages.
</p>

<p>
The idea is simply to pass some data types to the string. Moreover
it is interesting that you can impose some structure to the string
in such a way.
</p>

<p>
This is especially important cause in such a way you can perform
the necessary checks in your data pipelines.
</p>

<p>
Consider for instance the following 
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
in such a way you can pad with 0, the desired amount of times. This
will be useful for instance to keep the RUC number consistent.
</p>
</div>
</div>


<div id="outline-container-org0a641e3" class="outline-3">
<h3 id="org0a641e3">F-strings similars</h3>
<div class="outline-text-3" id="text-org0a641e3">
<p>
Check at the below. This was your standard pyhton way of using
parameterized strings. 
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>



<div id="outline-container-org8f2661f" class="outline-3">
<h3 id="org8f2661f">Java Beans</h3>
<div class="outline-text-3" id="text-org8f2661f">
<p>
You will have to make proper notes about it at some later
point. You come across it multiple times in the Java world
paradigm.
</p>

<p>
A JavaBean is just a standard
</p>

<p>
All properties are private (use getters/setters).
</p>

<p>
A public no-argument constructor Implements Serializable.
</p>

<p>
That's it. It's just a convention. Lots of libraries depend on it
though.
</p>

<p>
The standard allows libraries to programmatically do things with
class instances you define in a predefined way. For example, if a
library wants to stream any object you pass into it, it knows it
can because your object is serializable (assuming the library
requires your objects be proper JavaBeans).
</p>
</div>
</div>
</div>


<div id="outline-container-orgcb9372d" class="outline-2">
<h2 id="orgcb9372d">Iterator Interface</h2>
<div class="outline-text-2" id="text-orgcb9372d">
<p>
Check at that interface and its method cause all of the most
important data structures in the Collection Framework implement
such an interface and that is actually the interface that will
allow you to quickly navigate throughout all of your important
data-structures and this in a much more convenient way than doing
that through indexing operations.
</p>

<p>
Note that the for-each loop is a valid subsititute to the iterator
interface in the case you want to iterate in the existing order of
the data structure. <b>Know the both of them well</b> in any case.
</p>

<p>
Recall that any data-structure of the Collections framework
implements the Iterators interface and provides an <code>iterator()</code>
method that returns an iterator at the start of the collection. That
means that you can use the following iterator methods to work with
it:
</p>

<img src="../../images/Screenshot 2021-10-25 101403.png" class="center">

<p>
You can then see that you can cycle across classes of the Collection
framework by using such iterators. This in a very similar taste to
what you used to do when working in C++.
</p>

<p>
You can find basic examples next:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
Original contents of al: C A E B D F 
Modified contents of al: C+ A+ E+ B+ D+ F+ 
Modified list backwards: F+ D+ B+ E+ A+ C+ 
</p>

<p>
Note that you have to instantiate an <code>iterator</code> object out of the
Collection class in order to call the iterator methods.
</p>

<p>
The for-each alternative is more your pythonic way of doing
things. Check at the functional methods to work as lambda
expressions were a great killer in Python in this sense. 
</p>
</div>
</div>


<div id="outline-container-org8e1cecc" class="outline-2">
<h2 id="org8e1cecc">argument Passing</h2>
<div class="outline-text-2" id="text-org8e1cecc">
<p>
Note that this is as well similar as with C++. When you pass
arguments to a subrutine you have to possibilities.
</p>

<ul class="org-ul">
<li><i>call-by-value</i>: here you pass the value itself to the
method. note that here the method will copy the value of an
argument into the parameter of the subrutine. You will then
ultimately operate on the copy of that value such that changes in
the method will not affect the argument passed.</li>

<li><i>call-by-reference</i>: a reference to an argument (not the value of
the argument) is passed to the parameter. Here the parameter will
reference the argument and the method will apply changes to it
directly.</li>
</ul>

<p>
In order to cristallize this consider the following example:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
a and b before call: 15 20
a and b after call: 15 20
</p>

<p>
In comparison passing by <b>reference</b> can be performed by passing
objects and applying changes directly to the data encapsulated in
such methods.
</p>

<p>
An example for that is the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
<p>
ob.a and ob.b before call: 15 20
ob.a and ob.b after call - passing by reference - : 30 10
</p>
</div>
</div>


<div id="outline-container-org67e1151" class="outline-2">
<h2 id="org67e1151">Garbage Collection</h2>
<div class="outline-text-2" id="text-org67e1151">
<p>
Since objects are dynamically allocated by using the new operator,
you might be wondering how such objects are destroyed and their
memory released for later reallocation. In some languages, such as
C++, dynamically allocated objects must be manually released by use
of a delete operator. Java takes a different approach; it handles
deallocation for you automatically.  The technique that
accomplishes this is called garbage collection.
</p>

<p>
It works like this: when no references to an object exist, that
object is assumed to be no longer needed, and the memory occupied
by the object can be reclaimed
</p>

<p>
Note that when Garbage collection is performed depend on the
different Java run-times etc.
</p>
</div>
</div>


<div id="outline-container-org2a04bfd" class="outline-2">
<h2 id="org2a04bfd">Packages</h2>
<div class="outline-text-2" id="text-org2a04bfd">
</div>
<div id="outline-container-orgfa55847" class="outline-3">
<h3 id="orgfa55847">General definition</h3>
<div class="outline-text-3" id="text-orgfa55847">
<p>
These define namespaces. All of the classes defined in a package
will be in that namespace so to say.
</p>

<p>
In order to define a package jsut include the package command as
the first statement in a Java source file.
</p>

<p>
In order to see this consider the following
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Java uses <i>file system directories to store packages</i>. For
example, the <code>.class</code> files for any classes you declare to be part
of MyPackage must be <code>stored in a directory called MyPackage</code>.
</p>

<p>
<i>More than one file can include the same package statement</i>. The
package statement simply specifies to which package the classes
defined in a file belong.
</p>

<p>
Note that a hierarchy of packages is also possible and this is
what is usually done.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that the package hierarchy must be <b>reflected in the file
system</b> of your Java development system.
</p>

<p>
For example, a package declared as
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
needs to be stored in <code>java\awt\image</code> in a Windows environment.
</p>

<p>
So recall this in Java as there are quite some requrirements in
how you have to structure your file system.
</p>

<p>
<b>Note</b> that once you specify java source file as being part of a
package you cannot run them anymore directly.
</p>

<p>
In order to see this understand the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Then you must store such a file as <b>AccountBalance.java</b> in a
<b>MyPack</b> directory. Then in order to run the file you must be in
the directory one level higher than MyPack. You can then run
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
<b>Important</b>: Note that you <b>cannot run AccountBalance directly</b>
anymore even if you are wihtin the <code>MyPack</code> directory in your file
system.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>



<div id="outline-container-org4e0c514" class="outline-3">
<h3 id="org4e0c514">Package and Access Control of classes</h3>
<div class="outline-text-3" id="text-org4e0c514">
<p>
note that in Java zou have essentially 4 categories of visibility
for class members:
</p>

<ul class="org-ul">
<li>sublcasses in the same packages</li>

<li>non-subclasses in the same packages</li>

<li>subclasses in different packages</li>

<li>classes that are neither subclasses nor part of the package</li>
</ul>

<p>
we will see how to manage access control in the 4 different cases.
</p>

<p>
in order to understand how Java behaves in the 4 different cases
above think at the following table:
</p>

<img src="../../images/Screenshot 2021-09-14 115124.png">

<p>
no modifier means simply that the element is defined without the
specification of any <code>private</code>, <code>protected</code> or <code>public</code> keyword.
</p>
</div>
</div>


<div id="outline-container-org6ce618f" class="outline-3">
<h3 id="org6ce618f">Importing Packages</h3>
<div class="outline-text-3" id="text-org6ce618f">
<p>
Note that in Java there are <b>no core</b> classes in the unnamed
default package.
</p>

<p>
Note that as you do not want to access classes by appending it to
the package it is contained in you use the <b>import</b> statement in a
similar way as you do in Python.
</p>

<p>
import statements occur immediately following the package
statement (if it exists) and before any class definitions.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that <code>*</code> is the usual wildcard. You import all of the classes
from the package in such a way. Otherwise you can specify the
particular classes you are willing to import.
</p>

<p>
You can then refer to the specfic class simply by name after you
imported it correctly.
</p>
</div>
</div>


<div id="outline-container-org2a06de4" class="outline-3">
<h3 id="org2a06de4">Standard Classes</h3>
<div class="outline-text-3" id="text-org2a06de4">
<p>
All of the standard Java classes are stored in a package called
<b>java</b>.
</p>

<p>
The basic language functions are stored in a package inside of the
java package called <i>java.lang</i>. This is implicitly imported by
the compiler for all programs.
</p>
</div>
</div>


<div id="outline-container-org1cd9c6f" class="outline-3">
<h3 id="org1cd9c6f">Logger Package</h3>
<div class="outline-text-3" id="text-org1cd9c6f">
<p>
As you know, this is a quite fundamental component when writing
your apps.
</p>
</div>

<div id="outline-container-orge694cca" class="outline-4">
<h4 id="orge694cca">Logger Object Configuration</h4>
<div class="outline-text-4" id="text-orge694cca">
<p>
In order to create a Logger object zou can use the following:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
What the above does is actually to implement a hierarchy of
loggers.
</p>

<p>
To understand what the above sentence means understand the
following:
</p>

<p>
If for instance you specify a logger for the <code>com.example</code>
package, that logger would be a child of the <code>com</code> Logger, which
is itself a child of the <code>String</code> Logger (default). 
</p>
</div>
</div>

<div id="outline-container-org2ab813b" class="outline-4">
<h4 id="org2ab813b">Levels</h4>
<div class="outline-text-4" id="text-org2ab813b">
<p>
The module works the same way your logger in python used to
work. This means that you have multiple levels of logging.
</p>

<ul class="org-ul">
<li>SEVERE (highest)</li>
<li>WARNING</li>
<li>INFO</li>
<li>CONFIG</li>
<li>FINE</li>
<li>FINER</li>
<li>FINEST</li>
<li>OFF (turns the logger off)</li>
<li>ALL (log everything)</li>
</ul>

<p>
You can choose the level of your log in the following way:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
In the case above log levels <code>INFO</code> and above will be automatically
written to the console. This in a very similar way to the logger in
python you have used multiple times.
</p>

<p>
Note that through the <code>LogManager</code> it is possible to set the
logging levels for a set of packages at once. 
</p>
</div>
</div>

<div id="outline-container-orga183ec9" class="outline-4">
<h4 id="orga183ec9">Formatter</h4>
<div class="outline-text-4" id="text-orga183ec9">
<p>
Here again in a similar way than python you can specify the output
for the logger and how logged entry are returned / logged in the
console.
</p>

<p>
It is common practice to use the fully qualified name of each
class whose activity is being logged as a message category,
because this allows developers to fine-tune log settings for each
class.
</p>

<p>
Make sure this is the case in your team.
</p>
</div>
</div>
</div>


<div id="outline-container-org4bc276b" class="outline-3">
<h3 id="org4bc276b"><span class="todo TODO">TODO</span> Hiberante</h3>
<div class="outline-text-3" id="text-org4bc276b">
<p>
Check at it. Everybody talks about it.
</p>
</div>
</div>


<div id="outline-container-orgab9bf99" class="outline-3">
<h3 id="orgab9bf99"><span class="todo TODO">TODO</span> H2</h3>
<div class="outline-text-3" id="text-orgab9bf99">
<p>
Apparently a good module to talk with the SQL DB. 
</p>
</div>
</div>


<div id="outline-container-orgc1de37a" class="outline-3">
<h3 id="orgc1de37a">Project Lombok</h3>
<div class="outline-text-3" id="text-orgc1de37a">
<p>
You can read more about it <a href="https://www.baeldung.com/intro-to-project-lombok">here</a>.
</p>

<p>
It is basically a way to short-circuit all of the getters, setters
and equals stuff that you so often use in Java.
</p>

<p>
You can read about it online. Check how stable is the framework as
here you are dealing with code that has to survive over very long
periods of time.
</p>

<p>
I mean if it is stable it is quite handy as through it you will
manage Java-Beans quite easily and these will be very readable.
</p>

<p>
Nice as it also handles Logger and adds it to the class in case of
need.
</p>
</div>
</div>
</div>


<div id="outline-container-org8f57ec4" class="outline-2">
<h2 id="org8f57ec4">Frameworks</h2>
<div class="outline-text-2" id="text-org8f57ec4">
</div>
<div id="outline-container-orge14660d" class="outline-3">
<h3 id="orge14660d">Collection Frameworks</h3>
<div class="outline-text-3" id="text-orge14660d">
<p>
note that some of the most important data structures that you will
use when coding are implemented in the <code>java.util</code> module.
</p>

<p>
I am pretty sure that this is not a library implemented by them. I
would have to understand where they did get this library from. It
is not included in the <code>gradle</code> set-up files. Maybe ask Sergio
tomorrow.
</p>

<p>
That is in fact correct. The java library is in fact similar to
the standard library implemented in C. Based on this you will have
a lot of the most basic functionality of the language that make
the operability of it possible.
</p>


'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
So you see that there are a lot of basic data structures.
</p>

<p>
First understand that the <code>java.util</code> package implements many
different classes and interfaces of first-order importance.
</p>

<p>
Among the others - the follwoing <b>classes</b> are implemented:
</p>

<img src="../../images/Screenshot 2021-09-21 154011.png">

<p>
And the follwoing <b>interfaces</b> are implemented 
</p>

<img src="../../images/Screenshot 2021-09-21 154313.png">

<p>
Note that we will describe next methods and interfaces from the
<code>java.util</code> being part of the <b>Collection Framework</b>.
</p>

<p>
This is a collection of java <b>classes</b> and <b>interfaces</b> that has
been developed in an homogenous way in order to assure a basic
common operability of the classes and interfaces.
</p>

<p>
Note that there are some basic functionalities that such
collections must guarantee such that you can then generally extend
and build on the top of them. You can think of them as a set of
rules or as an software API defining how you interact with such
collection objects.
</p>

<p>
Note for instance that each collection object <b>implements</b> an
<code>iterator interface</code>. Note therefore that you can always iterate
across the objects of such a collection.
</p>

<p>
We will explore next the basic interfaces of the <b>collections
framework</b> on which the collections framework classes will build
upon for implementing the most important data structures. 
</p>
</div>


<div id="outline-container-org2da0cb0" class="outline-4">
<h4 id="org2da0cb0">Collections Frameworks - Interfaces</h4>
<div class="outline-text-4" id="text-org2da0cb0">
<p>
We start by discussing the most important interfaces in the
collections frameworks.
</p>

<p>
We start with the interfaces as the collection classes will
actually base on such interfaces.
</p>

<p>
The basic interfaces are:
</p>

<img src="../../images/Screenshot 2021-09-21 163450.png">

<p>
In addition to the above collection methods also use:
</p>

<ul class="org-ul">
<li>Comparator</li>

<li>RandomAccess</li>

<li>Iterator</li>

<li>ListIterator</li>
</ul>

<p>
so in order to totally understand such framework a basic
understanding of the above interfaces is necessary.
</p>

<p>
We will explore next all of these different interfaces.
</p>
</div>


<ul class="org-ul">
<li><a id="org1a2ef35"></a>Collection Interfaces<br />
<div class="outline-text-5" id="text-org1a2ef35">
<p>
The Collection interface is the foundation upon which the
Collections Framework is built because <i>it must be implemented by
any class that defines a collection</i>.
</p>

<p>
Definition of the collection interface
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that <code>E</code> defines the type of object the collection will
hold.
</p>

<p>
Note that the interface <b>collection extends the iterator
interface</b>. This means that collection can be cycled though using
the <code>for-each</code> type of loop.
</p>

<p>
You can check then in the book - but I guess also easily online
all of the different types of errors you can make when creating a
collection.
</p>

<p>
Methods of that interface:
</p>

<ul class="org-ul">
<li><code>add( )</code>: add an object to a collection. takes an argument of
type E, which means that objects added to a collection must be
compatible with the type of data expected by the collection.</li>

<li><code>addAll()</code>: add the entire contents of one collection to another
one.</li>

<li><code>remove( )</code>: pops an object from the collection.</li>

<li><code>clear ()</code>: empty an entire collection.</li>

<li><code>contains( )</code>: check if an object is within a collection.</li>

<li><code>containsAll( )</code>: determines if a collection contains all of the
obejcts of another one.</li>

<li><code>isEmpty()</code>: checks if collection is empty.</li>

<li><code>size()</code>: returns the collection size.</li>

<li><code>toArray( )</code>: return an array with the objects of the collection.</li>

<li><code>iterator( )</code>: returns an iterator to a collection</li>
</ul>
</div>
</li>

<li><a id="orga888e83"></a>List Interface<br />
<div class="outline-text-5" id="text-orga888e83">
<p>
This is an <i>interface</i>. It extends the <b>Collection</b> and declares
the behavior that stores a sequence of elements. Note that
indexing start as 0 as was the case in python.
</p>

<p>
<b>List</b> is a <i>generic</i> interface that has this declaration:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
note that this is in the generic notation and once again E
specify the class type that the list will contain.
</p>

<p>
You can check then online the methods available for it but that
is the common data structure.
</p>
</div>
</li>

<li><a id="org4ebb8cd"></a>Set Interface<br />
<div class="outline-text-5" id="text-org4ebb8cd">
<p>
It extends the collection and specfies the behaviour of the set
data structure. I.e. a data structure that does not allow
duplicates.
</p>

<p>
Definition
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</li>

<li><a id="org86dcd38"></a>Sorted Set Interface<br />
<div class="outline-text-5" id="text-org86dcd38">
<p>
It is a data structure that does not allow duplicates and that
sorts the objects in ascending order. Again it extends a
collection and the interfaces specifies its methods.
</p>
</div>
</li>

<li><a id="org16d290d"></a>NavigableSet Interface<br />
<div class="outline-text-5" id="text-org16d290d">
<p>
It extends SortedSet and declares the behavior of a collection
that <b>supports the retrieval of elements based on the closest
match</b> to a given value or values.
</p>
</div>
</li>

<li><a id="orgdbd520e"></a>Queue Interface<br />
<div class="outline-text-5" id="text-orgdbd520e">
<p>
The Queue interface extends Collection and declares the behavior
of a queue, <b>which is often a first-in, first-out list</b>.
</p>

<p>
You can then check the general methods associated with it.
</p>

<p>
Note that the benefit is that it imposes some ordering in the way
the elements int he Queue are processed. I.e. you can just
proceed the head of the Queue etc.
</p>
</div>
</li>

<li><a id="org16c0ebc"></a>Deque Interface<br />
<div class="outline-text-5" id="text-org16c0ebc">
<p>
It extends Queue and declares the behavior of a double-ended
queue. <b>Double-ended queues</b> can function as standard, first-in,
first-out queues <b>or as last-in, first-out stacks</b>.
</p>
</div>
</li>
</ul>
</div>











<div id="outline-container-org600e536" class="outline-4">
<h4 id="org600e536">Collections Frameworks - Classes</h4>
<div class="outline-text-4" id="text-org600e536">
<p>
These classes implements the interfaces above and poses the basic
data structures you will often work with in your coding exercises.
</p>

<p>
Here an overview of such classes
</p>

<img src="../../images/Screenshot 2021-09-24 144205.png">

<p>
We will explore the above in little bit more detail next.
</p>
</div>

<ul class="org-ul">
<li><a id="orgff7653e"></a>ArrayList<br />
<div class="outline-text-5" id="text-orgff7653e">
<p>
This extends <code>AbstractList</code> and implements the <code>List</code>
interface. Note that it is a <b>generic</b> class.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that Arrays as in every language you used that far are of
fixed length as they do not allow dynamic memory management and
reallocation. ArrayList comes into play at this stage.
</p>

<p>
That is the exact strength of it. It supports dynamic arrays that
can grow as needed. Note that as in common lanaguages <code>ArrayList</code>
are created with an initial size. When this size is exceeded the
collection is automatically enlarged. When objects are removed,
the array can be shrunk. Check at standard data structures books
in order to check the exact operation of it.
</p>

<p>
Different <b>constructors</b> for it.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note that you can avoid expensive reallocations at runtime be
ensuring a minimum capacity to the array. You can check at the
methods of the object in the Java documentation to understand
that.
</p>

<p>
You can also trim its size such that the memory associated to it
is exactly equal to the number of elements it contains.
</p>

<p>
Note that sometimes it is convenient for you to transform
<code>ArrayList</code> objects to <code>Arrays</code> when performing some
computations. Say for instance mathematical operations. This
because of some low-level stories you would need to check and
understand at a later point.
</p>

<p>
Note that in theory collections can jsut store references to and
not values of primitive types. You can however pass directly
primitive types to <code>add</code> as <b>autoboxing</b> will perform the
necessary casting for you.
</p>
</div>
</li>

<li><a id="orgca9efe4"></a>LinkedList<br />
<div class="outline-text-5" id="text-orgca9efe4">
<p>
The LinkedList class extends AbstractSequentialList and
implements the List, Deque, and Queue interfaces.
</p>

<p>
Note the beauty of using interfaces in the design as it allows
you to perform the modularity of the logic as above and to
understand at a high level the functionalities implemented by a
class. Very beautiful way to keep everything regular.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<img src="../../images/Screenshot 2021-09-24 151553.png">

<p>
Then as mentioned you have all of the methods of the queue
interfaces to navigate such a linked<sub>list</sub> and read from the head
and tail etc. 
</p>
</div>
</li>

<li><a id="org38aca64"></a>HashSet<br />
<div class="outline-text-5" id="text-org38aca64">
<p>
This is a class that implements a Set that is referenced via a
Hashtable.
</p>

<p>
recall the strength of the hash-table. For each key you generate
a hash that defines where the obejct is stored. This comes with
great gain in terms of search time as that is independent of the
size of the set. 
</p>

<p>
Note that this implementes the <code>Set</code> interface.
</p>

<p>
So basically this is a Set where independently of the size the
performance of the methods should remain constant.
</p>
</div>
</li>

<li><a id="org5e7c85c"></a>LinkedHashSet<br />
<div class="outline-text-5" id="text-org5e7c85c">
<p>
It is basically a Hashset were on the top of it a <b>linked list</b> of
the entries in the set, in the order in which they were inserted,
is mantained.
</p>

<p>
This allows insertion-order iteration over the set. That is, when
cycling through a LinkedHashSet using an iterator, the elements
will be returned in the order in which they were inserted.
</p>
</div>
</li>

<li><a id="org4889131"></a>TreeSet<br />
<div class="outline-text-5" id="text-org4889131">
<p>
TreeSet extends <code>AbstractSet</code> and implements the <code>NavigableSet</code>
interface.
</p>

<p>
The collection uses a <b>tree</b> data structure for <b>storage</b>.
</p>

<p>
This is similar to the idea that you saw in the database lecture
when looking at B+-trees. Actually B+-trees are a tree data
structure so that the above does not specify exactly which
tree-data strucutre that uses behind.
</p>

<p>
You have probably to read a book about data structures if you
want to get such details.
</p>

<p>
Anyways: <b>TreeSet an excellent choice when storing large amounts
of sorted information that must be found quickly</b>.
</p>

<p>
Because TreeSet stores its elements in a tree, they are
automatically arranged in sorted order, as the output
confirms. This is as well the ultimate reason why it implements
the <code>NavigableSet</code> Interface. 
</p>
</div>
</li>

<li><a id="orgb752489"></a>PriorityQueue<br />
<div class="outline-text-5" id="text-orgb752489">
<p>
This is a queue where the order is not based on a general <code>FIFO</code>
concept but it rather bases on some comparator.
</p>

<p>
You can specify the comparator yourself. Then the object will be
ordered in the queue in the right way depending on the
comparator.
</p>

<p>
Note that you can construct the <code>PriorityQueue</code> in the following way
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
<b>Note:</b> If no comparator is specified when a PriorityQueue is
constructed, then the default comparator for the type of data
stored in the queue is used. The default comparator will order
the queue in ascending order. Thus, the head of the queue will be
the smallest value.
</p>
</div>
</li>

<li><a id="orgb85c202"></a>ArrayDeque<br />
<div class="outline-text-5" id="text-orgb85c202">
<p>
That is a dynamic array which size shrinks and augments
dynamically. Moreover it implements the deque operator such that
you can ultimately implement an <b>stack</b> with it or in general any
deque method.
</p>
</div>
</li>

<li><a id="org0e48409"></a>EnumSet<br />
<div class="outline-text-5" id="text-org0e48409">
<p>
EnumSet extends AbstractSet and implements Set. It is
<b>specifically for use with keys of an enum type</b>.
</p>

<p>
Recall that in enum you specify a given set of constants among
you choose an instantion from. This is an especially used data
structure within my team as there is a lot of cases where you
actually choose among the set of available securities etc.
</p>

<p>
You call this in the following way:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Notice that E must <b>extend</b> <code>Enum&lt;E&gt;</code>, which enforces the requirement
that the elements must be of the specified enum type.
</p>

<p>
Note that constructurs are a bit special for such a data class.
</p>

<p>
You can use the following:
</p>

<img src="../../images/Screenshot 2021-09-24 161528.png">
</div>
</li>
</ul>
</div>



<div id="outline-container-org9d08ce3" class="outline-4">
<h4 id="org9d08ce3">Collection Algorithms</h4>
<div class="outline-text-4" id="text-org9d08ce3">
<p>
Note that the Collection Framework has a set of algorithm that are
usable across the classes of the framework. You can have an
overview of such algorithms in the following table:
</p>

<p>
They are a tons of methods. The syntax is the one of the
Generics. So nothing special just a more solid type-safe
implementation of them. You can read more in detail into them in
the book if interested.
</p>

<p>
Keep the follwoing tables as a reference and come back here in case of you want to
do one search and withdrawal, ordering operation in order to see
how to do it at best:
</p>


<img src="../../images/Screenshot 2021-10-25 105112.png" class="center">

<img src="../../images/Screenshot 2021-10-25 105126.png" class="center">

<img src="../../images/Screenshot 2021-10-25 105141.png" class="center">
</div>
</div>
</div>









<div id="outline-container-org00ac255" class="outline-3">
<h3 id="org00ac255">Maps Frameworks</h3>
<div class="outline-text-3" id="text-org00ac255">
<p>
Note that these are the functions for performing the classical
<code>key-value</code> operations.
</p>

<p>
Recall their importance in the hadoop ecosystem. As you will
likely work with it in the next recent future understand such
structures correctly.
</p>

<p>
Note that when performing mapping operations the <b>key</b> must be
unique.
</p>

<p>
Note that maps are not collections such that you cannot apply
<code>iterators</code> or <code>for-each</code> loops to them.
</p>

<p>
However, note that there options to <b>collect the views</b> of maps
that will result in collection objects such that you can apply your
usual workflow for iterating and dealing with results.
</p>
</div>

<div id="outline-container-org490584f" class="outline-4">
<h4 id="org490584f">Maps Frameworks - Interfaces</h4>
<div class="outline-text-4" id="text-org490584f">
<p>
Note that there exists the follwoing interfaces to Maps
</p>

<img src="../../images/Screenshot 2021-09-24 170632.png">

<p>
Let's discuss the following interfaces
</p>
</div>

<ul class="org-ul">
<li><a id="orgd406ae7"></a>Maps<br />
<div class="outline-text-5" id="text-orgd406ae7">
'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
this is the interface for the map data structure. The interface
implements the following:
</p>

<p>
it throws exceptions when an object is incompatible with the
elements in a map - i.e. for instance if the keys are not unique.
</p>

<p>
The basic methods are the <code>get()</code> method, to get a value given a
key, and the <code>put ()</code> method, to add a key-value pair.
</p>

<p>
To get the <b>Collection</b> view of a map you can leverage the
<code>entrySet()</code> method. It returns a set that contains the elements
inthe map. You can even get a set for the keys of the map via the
<code>keySet()</code> method.
</p>

<p>
You have on the top of it some more methods that you can check online.
</p>
</div>
</li>

<li><a id="org9413df0"></a>SortedMaps<br />
<div class="outline-text-5" id="text-org9413df0">
'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
This <b>extends</b> the Map interface.
</p>

<p>
Sorted maps allow very efficient manipulations of submaps (in
other words, subsets of a map). To obtain a submap, use headMap(
), tailMap( ), or subMap( ). To get the first key in the set, call
firstKey( ). To get the last key, use lastKey( )
</p>
</div>
</li>

<li><a id="orgae763f7"></a>NaviagableMaps<br />
<div class="outline-text-5" id="text-orgae763f7">
'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
It extends SortedMap and declares the behavior of a map that
supports the retrieval of entries based on the closest match to a
given key or keys.
</p>
</div>
</li>

<li><a id="orgf286113"></a>Map.Entry<br />
<div class="outline-text-5" id="text-orgf286113">
'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
The <code>Map.Entry</code> interface enables you to work with a map
entry. Recall that the <code>entrySet( )</code> method declared by the Map
interface returns a Set containing the map entries. Each of these
set elements is a Map.Entry object.
</p>

<p>
You have then functions as <code>getKey</code>, <code>getValue</code> etc..
</p>
</div>
</li>

<li><a id="org25358e9"></a>Unmodifiable Map<br />
<div class="outline-text-5" id="text-org25358e9">
<p>
Interesting is this concept and similar. You can read about it
<a href="https://www.geeksforgeeks.org/collections-unmodifiablemap-method-in-java-with-examples/">here</a>. So nice feature of collection in java is that you can
specify such unmodifiable objects.
</p>

<p>
Note that I had this question when reading about it: <i>what is
added on the top of a declaration with final</i>. The answer is
always the same and it is <a href="https://stackoverflow.com/questions/7996499/creating-hashtable-as-final-in-java">this one</a>. I.e. you have to recall and
make explicit your understanding of what is a final reference and
an obejct. You should start thinking in these terms when you
program given the new lanaguage paradigm shift.
</p>
</div>
</li>
</ul>
</div>


<div id="outline-container-org1472d54" class="outline-4">
<h4 id="org1472d54">Maps Frameworks - Classes</h4>
<div class="outline-text-4" id="text-org1472d54">
<p>
This is the general overview
</p>

<img src="../../images/Screenshot 2021-09-24 175633.png">

<p>
Notice that <code>AbstractMap</code> is a superclass for all concrete map implementations.
</p>

<p>
<code>WeakHashMap</code> implements a map that uses “weak keys,” which allows an element in
a map to be <i>garbage-collected</i> when its key is otherwise unused. This class is not discussed
further here.
</p>
</div>

<ul class="org-ul">
<li><a id="org24e836a"></a>HashMap<br />
<div class="outline-text-5" id="text-org24e836a">
<p>
Creates a hash-table to store the map. This is especially useful
for the computational benefit of using hash-maps.
</p>

<p>
Note that you can have a single key-value pair in your hash-table
as the Map data structure requires the keys to be unique.
</p>

<p>
So if you <code>put()</code> into the hash-map two times the same key the
second one will overwrite the entry of the first. 
</p>
</div>
</li>

<li><a id="org2fd38fc"></a>TreeMap<br />
<div class="outline-text-5" id="text-org2fd38fc">
<p>
Implements <code>AbstractMap</code> and implements the <code>NavigableMap</code>
interface.
</p>

<p>
Note once more that the TreeMap uses a tree data structure for
storing the Map. It therefore provides an efficient means of
storing key/value pairs in sorted order and allows rapid
retrieval.
</p>
</div>
</li>

<li><a id="orgaa6c523"></a>LinkedHashMap<br />
<div class="outline-text-5" id="text-orgaa6c523">
<p>
<code>LinkedHashMap</code> extends <code>HashMap</code>. It maintains a <i>linked list</i> of the
entries in the map, <i>in the order in which they were inserted</i>. This
allows insertion-order iteration over the map. That is, when
iterating through a collection-view of a LinkedHashMap, the
elements will be returned in the order in which they were
inserted.
</p>
</div>
</li>

<li><a id="org985497b"></a>IdentityHashMap<br />
<div class="outline-text-5" id="text-org985497b">
<p>
IdentityHashMap extends AbstractMap and implements the Map
interface. It is similar to HashMap except that it uses <b>reference
equality</b> when comparing elements.
</p>
</div>
</li>

<li><a id="orgf382821"></a>EnumMap<br />
<div class="outline-text-5" id="text-orgf382821">
<p>
<code>EnumMap</code> extends <code>AbstractMap</code> and implements Map. It is
specifically for use with keys of an <code>enum</code> type.
</p>
</div>
</li>
</ul>
</div>
</div>



<div id="outline-container-orgfaed9c1" class="outline-3">
<h3 id="orgfaed9c1">Comparators</h3>
<div class="outline-text-3" id="text-orgfaed9c1">
<p>
that is an important class that will allow you to specify the
ordering of the elements of your objects implementing the
<code>NavigableSet=/=NavigableMap</code> interfaces.
</p>

<p>
You can define the comporator yourself. 
</p>
</div>
</div>
</div>


<div id="outline-container-org8f986cd" class="outline-2">
<h2 id="org8f986cd">On The RandomAcess Interface</h2>
<div class="outline-text-2" id="text-org8f986cd">
<p>
This is a quite fun interface. It is an <b>interface that implements
no methods</b>.
</p>

<p>
However, by implementing this interface, a collection signals that
it supports efficient random access to its elements.
</p>

<p>
By checking for the RandomAccess interface, client code can
determine at run time whether a collection is suitable for certain
types of random access operations—especially as they apply to large
collections. (You can use instanceof to determine if a class
implements an interface.) RandomAccess is implemented by ArrayList
and by the legacy Vector class, among others.
</p>

<p>
So very interesting way of setting up your project. Keep that in
mind when setting up your projects.
</p>
</div>
</div>


<div id="outline-container-orga58a236" class="outline-2">
<h2 id="orga58a236">On the main method</h2>
<div class="outline-text-2" id="text-orga58a236">
<p>
Note that as in <code>C++</code> all Java applicaitons begin execution by
calling <code>main( )</code>.
</p>

<p>
Note that the <code>main ()</code> method is always static. This is necessary
since <code>main( )</code> is called by the Java Virtual Machine before any
objects are made.
</p>
</div>
</div>


<div id="outline-container-org2ed86b7" class="outline-2">
<h2 id="org2ed86b7">Doc Comments and JavaDocs</h2>
<div class="outline-text-2" id="text-org2ed86b7">
<p>
One of the most powerful tools in python was the docstrings
available in there.
</p>

<p>
There you could well document all of your python functions. You
could even run tests through it.
</p>

<p>
Moreover given your lsp-ui module it was helpful to quickly refer
to the documentation you had written.
</p>

<p>
The counterpart of that in java are <code>doc comments</code>. There you can
specify the parameters for your functions etc. and add a good layer
of documentation in your code.
</p>

<p>
Moreover through <code>JavaDoc</code> it is apparently possible to generate
html to see the visualize such doc-comments.
</p>

<p>
You should then read more carefully in detail about it.
</p>

<p>
I am testing it out even with Java lsp integration and it works
like a charm.
</p>

<p>
Note that you should keep the notation on the top of the classes -
i.e. for instance here:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
You will then get displayed such a documentation when howering over
the class.
</p>

<img src="../../images/Screenshot 2021-09-15 111541.png" class="center">

<p>
Note that you can get an idea of the created documentation by
<code>JavaDoc</code> <a href="https://www.tutorialspoint.com/java/index.html">here</a>. This looks very similar to the one you created in
C++. I do not recall the name of the program to do that there.
</p>

<p>
In order to use doc-comments properly in Java you should learn the
<a href="https://www.tutorialspoint.com/java/java_documentation.htm">avaiable tags</a> properly.
</p>

<p>
<b>Note</b> that there is a function to run <code>JavaDoc</code> in Eclipse. You
should understand that at some point. You also have the option to
generate such <code>JavaDocs</code> from within your built-tool.
</p>

<p>
You can find an example of generated <code>JavaDocs</code> <a href="https://docs.gradle.org/current/javadoc/index.html">here</a>.
</p>
</div>

<div id="outline-container-org9e8b3ae" class="outline-3">
<h3 id="org9e8b3ae">Important parameters to properly write java-docs</h3>
<div class="outline-text-3" id="text-org9e8b3ae">
<p>
So in order to start to properly document your code you have to
interiorize the following java-doc annotations.
</p>

<p>
Do it and all of your team-mates will be thankful to you in a
couple of years.
</p>

<p>
Before starting with all of the different tags, understand the
following basics distinction:
</p>

<ul class="org-ul">
<li>if a tag is of the form <code>@tag</code>, then it is a <i>stand-alone</i>
tag. I.e. you must use it on a single line. I.e. the line must
start with the tag.</li>

<li>if a tag is of the form <code>{@tag}</code>, then it is a <i>in-line</i>
tag. This means you can embed it in your general comments.</li>
</ul>

<hr />

<p>
I continue here with a set of tags that you can and should use when
writing your documentation.
</p>


<ol class="org-ol">
<li><p>
<code>@author</code>:
</p>

<p>
so this is of the follwoing form
</p>

<p>
<code>@author description</code>
</p>

<p>
note that the description is usually your name. You have to add
a tag when generating docstrings if you want to have this
compoenent included.
</p></li>

<li><p>
<code>@param</code>:
</p>

<p>
documents a parameter type to the method.
</p>

<p>
<code>@param parameter-name explanation</code>
</p>

<p>
Here, parameter-name specifies the name of a parameter. The
meaning of that parameter is described by explanation.
</p>

<p>
Note that you do not specify the type of parameter by default.
</p></li>

<li><p>
<code>@deprecated</code>:
</p>

<p>
Deprecated specifies that a class, interface, or a member is
deprecated.
</p>

<p>
You then usually include the <code>@see</code> or <code>{@link}</code> tags in order
to point to the alternatives.
</p>

<p>
<code>@deprecated description</code>
</p>

<p>
note that this tag can be used in documentation for variables,
methods, classes, and interfaces.
</p></li>

<li><p>
<code>@exception</code>:
</p>

<p>
this tag describes an exception to a method.
</p>

<p>
It has the following syntax:
</p>

<p>
<code>@exception exception-name explanation</code>
</p>

<p>
Here, the fully qualified name of the exception is specified by
<code>exception-name</code> say IOException etc., and explanation is a string
that describes how the exception can occur.
</p>

<p>
I like the standard of including then the error documentation as
a reference via <code>@see</code>.
</p>

<p>
For instance:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.</li>

<li><p>
<code>@return</code>:
</p>

<p>
here you specify what the method returns.
</p></li>

<li><p>
<code>@see</code>:
</p>

<p>
this is an important one, as with this tag you can specify
references to other packages.
</p>

<p>
you can use it as follows:
</p>

<p>
<code>@see anchor</code>
</p>

<p>
<code>@see pkg.calss#member text</code>
</p>

<p>
so you see that in its second form it is the same as the
<code>{@link}</code> below. read that in order to understand it. Note that
you can also specify references to entire packages simply by
excluding the <code>#member</code> piece from the above.
</p>

<p>
In the first form you pass an URL.
</p>

<p>
Usually you use this in combination with <code>{@link}</code>. In this way
your doc-strings will be properly set up with the correct amount
of visibility, as your references will be saved in the <i>See
Also</i> section.
</p></li>

<li><p>
<code>@serial</code>:
</p>

<p>
this is just there since <b>java 14</b>. you are using 11. so just
consider it if you are updating.
</p></li>

<li><p>
<code>@serialData</code>:
</p>

<p>
A class that customizes the serialization format by implementing
<code>writeObject( )</code> or <code>writeExternal( )</code> should annotate those
methods with an @serialData tag explaining in detail the format
written.
</p>

<p>
<code>@serialData description</code>
</p>

<p>
where in the description you document what is written for that
data etc. 
</p></li>
</ol>


<ol class="org-ol">
<li><p>
<code>@serialField</code>:
</p>

<p>
should be there since java 11. I do not see it in my IDE as an
available tag. Intersting - undestand it at some point.
</p>

<p>
For a class that <b>implements Serializable</b>, the @serialField tag
provides comments for an ObjectStreamField component.
</p>

<p>
<code>@serialField name type description</code>
</p></li>

<li><p>
<code>@since</code>:
</p>

<p>
this specifies that a class or member was introduced in a
specific release.
</p>

<p>
<code>@since release</code>
</p></li>

<li><p>
<code>@throws</code>:
</p>

<p>
this has the same meaning as the <code>@exception</code> tag.
</p></li>

<li><p>
<code>@version</code>:
</p>

<p>
this is the usual way to write the version of it. 
</p></li>

<li><p>
<code>{@code}</code>
</p>

<p>
this allos you to embed a code snippet into a comment.
</p>

<p>
<code>{@code code-snippet}</code>
</p></li>
</ol>


<ol class="org-ol">
<li><p>
<code>{@value}</code>
</p>

<p>
It has two forms.
</p>

<p>
The first displays the value of the constant that it precedes,
which must be a <i>static</i> field.
</p>

<p>
In this case the usage form is simple
</p>

<p>
<code>{@value}</code>
</p>

<p>
have still to understand better how to use this. Would be
useful to get an example in this sense.
</p></li>

<li><p>
<code>{@docRoot}</code>
</p>

<p>
it specifies the root repository of the document. you will not
use it much.
</p></li>

<li><p>
<code>{@inheritDoc}</code>
</p>

<p>
so this is used when you inherit in order to inherit the
documentation of the inherited class/method as well.
</p></li>

<li><p>
<code>{@link}</code>
</p>

<p>
It provides an in-line link to additional information.
</p>

<p>
<code>{@link pkg.class#member text}</code>
</p>

<p>
The <code>pkg.class#member</code> specifies the name of a class or method
to which a link is added, and <code>text</code> is the string that is
displayed.
</p>

<p>
Note that the above is not that well explained. In the sense
that you have to include <code>()</code> to the member as well write the
parameter types of it in order for it to work properly.
</p>

<p>
Understand it properly. Another time when including the
arguments it was not accepted. Do some trial and error. 
</p></li>

<li><p>
<code>{@linkplain}</code>
</p>

<p>
this is the same as the <code>{@link}</code> above. It just creates input
in a different format when creating the java-doc. Can try to
esperiment the difference among the two at some point.
</p></li>

<li><p>
<code>{@literal}</code>
</p>

<p>
this is another javadoc rendering thing. this is not that
important to me at this stage. check at it later in case of
interest. 
</p></li>
</ol>
</div>
</div>


<div id="outline-container-org2b7b413" class="outline-3">
<h3 id="org2b7b413">Working standards</h3>
<div class="outline-text-3" id="text-org2b7b413">
</div>
<div id="outline-container-org18d91a6" class="outline-4">
<h4 id="org18d91a6">Top level info for class</h4>
<div class="outline-text-4" id="text-org18d91a6">
<p>
On the top of each main class of each document have an entry of the
following form
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
Note the <code>&lt;p&gt;</code> method through which you order your
documentation. I.e. you separate different paragraphs and make
everything more ordered.
</p>
</div>
</div>

<div id="outline-container-orgeaf5ee6" class="outline-4">
<h4 id="orgeaf5ee6">Package Documentation</h4>
<div class="outline-text-4" id="text-orgeaf5ee6">
<p>
In general <b>always include a general documentation for each
pacakge</b>, documenting the sense and the meaning of it.
</p>

<p>
In Java in order to do that you have to create a
<code>package-info.java</code> file. This you have to position within a
package repository.
</p>

<p>
You then write the documentation for the pacakge in that file in
the following form:
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
I.e. you write your comment and finally you specify the package it
applies to.
</p>
</div>
</div>


<div id="outline-container-org433a038" class="outline-4">
<h4 id="org433a038">General notation for methods</h4>
<div class="outline-text-4" id="text-org433a038">
<p>
In order to consistently annotate your methods use the following
strucutre.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>
</div>
</div>


<div id="outline-container-org82def1f" class="outline-2">
<h2 id="org82def1f">Code Standards</h2>
<div class="outline-text-2" id="text-org82def1f">
<p>
Even though there is not a very big rigor in here in the way you
structure your code I think it beneficial to have some.
</p>

<p>
In this sense I think that to comply with a standard or style guide
as it could be PEP8 for python is beneficial.
</p>

<p>
I did not find a good standard in this sense in Java yet. I have to
spend some time checking for it at some point.
</p>

<p>
To this stage I found this. Now as always I do not have the time to
go deep into <a href="https://www.oracle.com/java/technologies/javase/codeconventions-introduction.html">this topic</a>. Did put it in your calendar though. Go back
to it at some point when you have time. 
</p>
</div>
</div>


<div id="outline-container-org6992159" class="outline-2">
<h2 id="org6992159">Encapsulation</h2>
<div class="outline-text-2" id="text-org6992159">
</div>
<div id="outline-container-org4c78c68" class="outline-4">
<h4 id="org4c78c68">Access Control</h4>
<div class="outline-text-4" id="text-org4c78c68">
<p>
There are as usual 3 specifiers. <code>public</code>, <code>private</code>, <code>protected</code>.
</p>

<ul class="org-ul">
<li><code>public</code>: a member can be accessed by any other code. When no
access specifier is used, then by default the member of a class
is public <b>within its own package</b>, but <b>cannot be accessed outside
of its package</b>.</li>

<li><code>private</code>: member can only be accessed by <b>other methodes of
that class</b>.</li>

<li><p>
<code>protected</code>: relevant for inheritance. Although a subclass
includes all of the members of its superclass, it cannot access
those members of the superclass that have been declared as
private. <b>A class member that has been declared as private will
remain private to its class.</b> <b>It is not accessible by any code
outside its class, including subclasses.</b> This is where
protected differs. If a method is protected it can be visible to
subclasses of the class even if they are sitting in different
packages.
</p>

<p>
Moreover, it also differs in the nature of same-package
non-subclasses access. In order to see this check at <a href="#org4e0c514">Package and
Access Control of classes</a>. 
</p></li>
</ul>




<p>
On the top of it there is the <code>final</code> specification for
<b>variables</b>. This means that the variable cannot be modified at
later stages. Note that you have to specify a variable as <b>final</b>
when it is declared. Note that is good practice to write all such
variables in <code>UPPERCASE</code>.
</p>
</div>
</div>


<div id="outline-container-org4e7eb3d" class="outline-4">
<h4 id="org4e7eb3d">Calling methods</h4>
<div class="outline-text-4" id="text-org4e7eb3d">
</div>
<ul class="org-ul">
<li><a id="org6b1b5bc"></a>Static<br />
<div class="outline-text-5" id="text-org6b1b5bc">
<p>
<code>static</code> allows method to be called without having to create an
object for that class. so same as <code>@staticmethod</code> in python.
</p>

<p>
Note actually that you can create <b>both methods and variables to
be static</b>.
</p>

<p>
Note that static variables are essentially <b>global
variables</b>. When objects of its class are declared, no copy of a
static variable is made. Instead, <b>all instances of the class
share the same static variable</b>.
</p>

<img src="../../images/Screenshot 2021-10-15 153909.png" class="center">
</div>

<ul class="org-ul">
<li><a id="orgd090c62"></a>Static Methods Restrictions<br />
<div class="outline-text-6" id="text-orgd090c62">
<ul class="org-ul">
<li>static methods can <b>only call other static methods</b>.</li>

<li>must <b>only access static data</b>.</li>

<li>cannot refer to <b>this</b> or <b>super</b>.</li>
</ul>
</div>
</li>

<li><a id="org4d233a0"></a>Static Initialization<br />
<div class="outline-text-6" id="text-org4d233a0">
<p>
If you need to do computation in order to initialize your static
variables, you can <b>declare a static block</b> that gets <b>executed</b>
exactly once, <b>when the class is first loaded</b>.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.

<p>
As soon as the UseStatic class is loaded, all of the static
statements are run. <i>First</i>, a is set to 3, <i>then the static block</i>
executes, which prints a message and then initializes b to a * 4
or 12. Then main( ) is called, which calls meth( ), passing 42
to x.
</p>

<p>
You can then call the static methods and variables independently
from any object instances as you used to do sometimes in pyhton.
</p>

<p>
The syntax is the same <code>classname.method()</code>. Equally you can
call static variables by the usual dot notation
<code>classname.variable</code>.
</p>
</div>
</li>
</ul>
</li>
</ul>
</div>


<div id="outline-container-org5d0dd72" class="outline-4">
<h4 id="org5d0dd72">Subclasses vs Inheritance</h4>
<div class="outline-text-4" id="text-org5d0dd72">
<p>
There is some theoretically overlap between the two. Though they
are different and should not be confused with each other.
</p>

<p>
In order to understand that think of the following from
<a href="https://stackoverflow.com/questions/33421432/inner-classes-vs-subclasses-in-java">stackoverflow</a>.
</p>

<blockquote>
<p>
There are big differences between inner classes and subclasses:
</p>

<ul class="org-ul">
<li>inner classes are in the same file, whereas subclasses can be in
another file, maybe in another package.</li>

<li>You cannot get an instance of an inner class without an instance of
the class that contains it.</li>

<li>inner classes have the methods they want, whereas subclasses have
the methods of their parent class. Subclasses can of course define
additional methods, but they'll always have those of their parent.</li>
</ul>

<p>
About the situation:
</p>

<ul class="org-ul">
<li>inner classes are used when your big class needs a (usually short)
class, related to its internal operation, and when nobody else needs
it. A good example Nik G quoted is the LinkedList: it needs a Node
class to work, that is short, and that no other class
needs. Therefore Node is an inner class of LinkedList.</li>

<li>Subclasses are used when you defines a "is-a" reliationship. Picture
this: you want to make different types of cars. They have common
properties and features: they all can move, they all have
passengers, etc. So you create an abstract class "Car" with these
common things. And you create a subclass for every different type of
car.</li>
</ul>
</blockquote>
</div>
</div>


<div id="outline-container-org9163dcf" class="outline-4">
<h4 id="org9163dcf">Final in class methods</h4>
<div class="outline-text-4" id="text-org9163dcf">
<p>
Though polymorphism is one of the most useful tool in OOP there
are occasions where when defining a method in a superclass you
want to <b>prevent it from being overridden</b>.
</p>

<p>
In order to do that you can associate the <code>final</code> keyword to the
methods.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>


<div id="outline-container-org69bb8c8" class="outline-4">
<h4 id="org69bb8c8">Final Class</h4>
<div class="outline-text-4" id="text-org69bb8c8">
<p>
The same holds for classes. You can specify that you cannot
inherit from a class.
</p>

'pygmentize' is not recognized as an internal or external command,
operable program or batch file.
</div>
</div>
</div>


<div id="outline-container-org6aac060" class="outline-2">
<h2 id="org6aac060">Polymorphism</h2>
<div class="outline-text-2" id="text-org6aac060">
<p>
Overridden methods are another way that Java implements the “one
interface, multiple methods” aspect of polymorphism.
</p>

<p>
Part of the key to successfully applying polymorphism is understanding
that the superclasses and subclasses form a hierarchy which moves from
lesser to greater specialization.  Used correctly, the superclass
provides all elements that a subclass can use directly. It also
defines those methods that the derived class must implement on its
own. This allows the subclass the flexibility to define its own
methods, yet still enforces a consistent interface.
</p>
</div>
</div>


<div id="outline-container-orga8c0c5c" class="outline-2">
<h2 id="orga8c0c5c">Java Application</h2>
<div class="outline-text-2" id="text-orga8c0c5c">
</div>
<div id="outline-container-orgf9ffe89" class="outline-3">
<h3 id="orgf9ffe89">On WAR</h3>
<div class="outline-text-3" id="text-orgf9ffe89">
<p>
A WAR (web application archive) file is used to bundle web
components, compiled classes, and other resource files like
deployment descriptors, HTML, JavaScript, and CSS files. Together
they form a web application. To run a Java web application, the WAR
file needs to be deployed to <b>the server environment</b>, a web
container.
</p>

<p>
The web-app server can be any of Tomcat or Jetty or a Java EE
server such as JBoss or Glassfish.
</p>

<p>
Note that in simple words you can say the following:
</p>

<blockquote>
<p>
A war file is a special jar file that is used to package a web
application to make it easy to deploy it on an application
server. The content of the war file must follow a defined
structure.
</p>
</blockquote>

<p>
Recall the following strucutre. <code>.jar</code> is just part of the entire
system. Can be a package dependency, a bytecode app etc. <code>war</code> is
the entire bundle.
</p>

<img src="../../images/strucutre.png" class="center">
</div>
</div>
</div>




<div id="outline-container-org42eb5ae" class="outline-2">
<h2 id="org42eb5ae">On Java Persistence API - JPA</h2>
<div class="outline-text-2" id="text-org42eb5ae">
<p>
<a href="https://www.infoworld.com/article/3379043/what-is-jpa-introduction-to-the-java-persistence-api.html">Read this</a>. The following notes are a simple copy and paste of that
article.
</p>

<hr />
</div>

<div id="outline-container-org96c2864" class="outline-3">
<h3 id="org96c2864">JPA in the historic context</h3>
<div class="outline-text-3" id="text-org96c2864">
<p>
The core question here is about <i>persistence</i>, which loosely means any
mechanism by which Java objects outlive the application process that
created them.
</p>

<p>
The JPA specification lets you define which objects should be
persisted, and how those objects should be persisted in your Java
applications.
</p>

<p>
So this is more a styling-guide at the macro-level. You have then
all of the different frameworks through which you can implement such
theoretical construct.
</p>

<p>
So Java Persistence API is highly related with ORM. As this is the
old-school way of programming and was the norm the two developed
hand in hand. Today with the advent of NoSQL you have Java
Persistence API being developed and formed for the NoSQL databases. 
</p>

<p>
ORM - object-relational mapping. So through ORM you are able to work
through objects and stay within the first-class citizens of Java and
still, at the same time, interact with the relational tables of your
application.
</p>

<p>
Hibernate is the default ORM used across the industries as you
quickly learned after 2 months of exposure to the Java world.
</p>
</div>
</div>

<div id="outline-container-org170e4d9" class="outline-3">
<h3 id="org170e4d9">JPA in the application context</h3>
<div class="outline-text-3" id="text-org170e4d9">
<p>
So this is how the JPA fits the application logic.
</p>

<img src="../../images/Screenshot 2021-11-02 134907.png" class="center">

<p>
You can then quickly imagine how the picture would change to the
NoSQL space. Nothing big would change. Just the connector, the
general theoretical API specifications to interact with NoSQL etc.
</p>

<p>
But in general the high-level structure will persist.
</p>
</div>
</div>

<div id="outline-container-org2e009cc" class="outline-3">
<h3 id="org2e009cc">On JPA Annotations</h3>
<div class="outline-text-3" id="text-org2e009cc">
<p>
Note that here you specify as well all of the annotators to
properly interact with your relational model.
</p>

<p>
This is integral part of the JPA API. You can read more about it at
the same link in <a href="https://www.infoworld.com/article/3379043/what-is-jpa-introduction-to-the-java-persistence-api.html">here</a>.
</p>

<p>
Note that we do not work a lot through such JPA layer. We work
directly through SQL. I think this is not a bad idea as through it
you will be able to more quickly transition from one language to
the other in the future.
</p>

<p>
Moreover, I prefer SQL as being declarative it is much more
straightforward to understand what is needed.
</p>

<p>
So on this I prefer to keep one layer of abstraction and work in
the way the team is working. 
</p>
</div>
</div>
</div>
