<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about java)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/java.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Thu, 16 Jun 2022 07:47:32 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>On Multithreading</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So apparently this is a thing that I will have to master sooner or
later.
&lt;/p&gt;

&lt;p&gt;
I am not a fun of it as I know it gets tricky to write solid programs
with mulit-threading when complexity increases.
&lt;/p&gt;

&lt;p&gt;
For a solution that I am trying to construct I will need that bit.
&lt;/p&gt;

&lt;p&gt;
This for two reasons:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;the existing solution uses it; meaning that it is beneficial for
you to read and understand it in order for understand the current
design and borrow from it.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
your new solution would either have flavours of it or use queues. I
am rather inclined for the second but I promised to provide a
solution for both and this is what I am currently working for.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Update:&lt;/i&gt; after one day I could set up a working solution with
multithreading. Was not too difficult. But it is just at conceptual
level. The gist of it is more less along &lt;a href="https://alyssaq.github.io/2014/how-do-I-return-a-http-response-to-caller-and-continue-processing/"&gt;these&lt;/a&gt; lines.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I am not an extremely low level programmer due to my background. At
least not so far. So this is the reason I do not conceptually like the
thing and would prefer to go with a much more simple queueing
solution.
&lt;/p&gt;

&lt;p&gt;
I learned in life that you should not stop in front of your conceptual
barriers. You should be aware of your gaps and taking extra care when
making a step in that direction so that you do not hurt yourself, but
by baby steps everything is possible. This is how we learn since
inception.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>Python</category><category>software-engineering</category><category>threading</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/</guid><pubDate>Wed, 13 Apr 2022 14:47:16 GMT</pubDate></item><item><title>Deploying Webapps in Azure</title><link>https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So starting to make a little bit of order and starting to deploy
directly to Azure.
&lt;/p&gt;

&lt;p&gt;
That is nothing fancy at all. Just basics stuff. With it you can start
to properly experiment in your Sandbox. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>azure</category><category>java</category><category>Python</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/</guid><pubDate>Mon, 21 Mar 2022 15:34:55 GMT</pubDate></item><item><title>Integration and Asynchronous Jobs</title><link>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So new post.
&lt;/p&gt;

&lt;p&gt;
This is mainly about some integration exercise. It is not simple to
set up properly integration patterns. You can refer to &lt;a href="https://www.enterpriseintegrationpatterns.com/index.html"&gt;the following&lt;/a&gt;
for a general overview.
&lt;/p&gt;

&lt;p&gt;
So let's start to explore.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/"&gt;Read more…&lt;/a&gt; (17 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Integration</category><category>IT Architecture</category><category>java</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/</guid><pubDate>Thu, 24 Feb 2022 14:43:59 GMT</pubDate></item><item><title>Spring</title><link>https://marcohassan.github.io/bits-of-experience/posts/spring/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;style&gt;
 {
  box-sizing: border-box;
  margin-top: 60px;
  margin-bottom: 60px;
}

.column {
  float: left;
  width: 50%;
  padding: 0px;
}

/* Clearfix (clear floats) */
.row::after {
  content: "";
  clear: both;
  display: table;
}
&lt;/style&gt;

&lt;p&gt;
So this is the next piece of the cake. As we transition to the cloud
it makes sense to have the spring-framework in your skillset.
&lt;/p&gt;

&lt;p&gt;
The notes are based on Spring in Action - 5th edition.
&lt;/p&gt;

&lt;p&gt;
I must say that is not too far from the way I used to develop in
Python. Of course you have some Java-based falvour here and
there. Sometimes with pros sometimes with cons. There are things were
I still believe that Python is clearly superior. So ultimately my goal
is to go in a direction of microservices with reactive architectures
mixing the best of breed.
&lt;/p&gt;

&lt;p&gt;
Anyways here and there I skipped some sections. Will go back to them
later when the work will require it.
&lt;/p&gt;

&lt;p&gt;
Note that as per my usual way of working I read, make notes, such that
when I work many things should be already familiar and you should have
a high-level understanding of an application written through such
framework.
&lt;/p&gt;

&lt;p&gt;
Then of course experience is the one where you fix/crystallize all of
these concepts. That comes with time nothing to add.
&lt;/p&gt;

&lt;p&gt;
Creative will then make you deviate from the general structure you
learned.
&lt;/p&gt;

&lt;p&gt;
You just have to be careful to document everything then as it should
always be possible for an external to join and take over your work.
&lt;/p&gt;

&lt;p&gt;
This is the bit I learned from my current recent experience.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/spring/"&gt;Read more…&lt;/a&gt; (65 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/spring/</guid><pubDate>Wed, 02 Feb 2022 15:46:56 GMT</pubDate></item><item><title>Java Testing</title><link>https://marcohassan.github.io/bits-of-experience/posts/java-testing/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I am starting to deliver some solutions on some minor features on
some applications.
&lt;/p&gt;

&lt;p&gt;
There was quite a bit of work to be done in the last couple of
months. I mean I had to get up and running with Java, reverse engineer
some bit of application, write documentation etc. I am slowly getting
up to speed. I have still quite a few things on my mind and I guess
that to reach the point where I would like to be it will be another
6-12 months but I am moving at a &lt;i&gt;decent&lt;/i&gt; speed so that I am not
complaining too much.
&lt;/p&gt;

&lt;p&gt;
The structure and challenges of the job gets clearer everyday so that
is fine - now it is a question of adapting and working strategically
to overcome the various issues.
&lt;/p&gt;

&lt;p&gt;
The next bit that is on the list is about testing. This post deals
with it. I am ready to get up and running with it and start to write
well-covered software. In a further step you can then imagine some
further integration with tools as &lt;a href="https://en.wikipedia.org/wiki/SonarQube"&gt;sonarqube&lt;/a&gt; etc.
&lt;/p&gt;

&lt;p&gt;
Cool. Starting to test seriously. Like this we can soon set up serious
devOps pipelines.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/java-testing/"&gt;Read more…&lt;/a&gt; (37 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>testing</category><guid>https://marcohassan.github.io/bits-of-experience/posts/java-testing/</guid><pubDate>Thu, 27 Jan 2022 15:20:12 GMT</pubDate></item><item><title>Java 8 - Functional Programming</title><link>https://marcohassan.github.io/bits-of-experience/posts/java-8-functional-programming/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
I used to keep these notes together with the general notes on the Java
language.
&lt;/p&gt;

&lt;p&gt;
As that file was growing too big and as functional programming is such
a neat and revolutionizing feature introduced with Java 8, I have
decided to separate the notes in this separate blog entry.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/java-8-functional-programming/"&gt;Read more…&lt;/a&gt; (17 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>functional-programming</category><category>java</category><category>parallelization</category><category>streaming</category><guid>https://marcohassan.github.io/bits-of-experience/posts/java-8-functional-programming/</guid><pubDate>Fri, 24 Dec 2021 18:36:32 GMT</pubDate></item><item><title>Microservices &amp; Java</title><link>https://marcohassan.github.io/bits-of-experience/posts/microservices-java/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
Notes based on &lt;a href="https://developers.redhat.com/media-download-confirmation?tcDownloadFileName=Kubernetes-native-microservices-ebook-v3.pdf&amp;amp;tcRedirect=5000&amp;amp;tcSrcLink=https%3A%2F%2Fdevelopers.redhat.com%2Fcontent-gateway%2Fdevelopers%2FKubernetes-native-microservices-ebook-v3.pdf&amp;amp;p=Media%3A+Kubernetes+Native+Microservices+Ebook&amp;amp;pv=v3&amp;amp;tcDownloadURL=https%3A%2F%2Faccess.cdn.redhat.com%2Fdevelopers%2FKubernetes-native-microservices-ebook-v3.pdf%3F_auth_%3D1639834492_4a7529fa776a83612c3fae41e4b878b8"&gt;kubernetes native development with quarkus and
microprofile&lt;/a&gt;. This is one of the books available on the red-hat
developer website. From my personal experience these are good and
red-hat is in fact a strong company - great products are coming out of
it and they seem to deliver quality products throughout time.
&lt;/p&gt;

&lt;p&gt;
They know that space and it is a very interesting to my mind so I am
taking a bit to make some notes and organize thoughts around it.
&lt;/p&gt;

&lt;p&gt;
Note as well &lt;a href="https://github.com/wso2/reference-architecture/blob/master/api-driven-microservice-architecture.md"&gt;this resource&lt;/a&gt; and &lt;a href="https://microservices.io/index.html"&gt;as well this&lt;/a&gt; (read there every now and
then).
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/microservices-java/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>kubernetes</category><category>quarkus</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/microservices-java/</guid><pubDate>Mon, 20 Dec 2021 19:09:40 GMT</pubDate></item><item><title>Java Debugging</title><link>https://marcohassan.github.io/bits-of-experience/posts/java-debugging/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So it is time to start some serious post and exploration on Java
debugging.
&lt;/p&gt;

&lt;p&gt;
Note that I believe that having the right tooling is paramount of
performing a job well. It can save you a lot of time that is worth.
&lt;/p&gt;

&lt;p&gt;
So this post will contain all of the concepts in order to properly
work with the debugger.
&lt;/p&gt;

&lt;p&gt;
Cause yeah… we all know about breakpoints… but you better start to
properly work with conditional breakpoints, trace-points, watchpoints,
time-reversion features etc.
&lt;/p&gt;

&lt;p&gt;
As always in the IT world, lots of heads worked on a thing, so you
start to dig and you will never end. You simply open a pandora box.
&lt;/p&gt;

&lt;p&gt;
I will start easy withe the basics and then I will start to dig a
little bit deeper into more advanced stuff.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/java-debugging/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>debugging</category><category>dev</category><category>java</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/java-debugging/</guid><pubDate>Sun, 12 Dec 2021 11:32:32 GMT</pubDate></item><item><title>Java Application Deployment - Some Vocabulary and high Level Understanding</title><link>https://marcohassan.github.io/bits-of-experience/posts/java-application-deployment-some-vocabulary-and-high-level-understanding/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Through this post you will gain a bit of vocabulary in the Java
world.
&lt;/p&gt;

&lt;p&gt;
This in the sense that you will understand better the deployment of
application. Server side operations etc. for the Java world. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/java-application-deployment-some-vocabulary-and-high-level-understanding/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/java-application-deployment-some-vocabulary-and-high-level-understanding/</guid><pubDate>Sun, 14 Nov 2021 19:25:11 GMT</pubDate></item><item><title>Gradle</title><link>https://marcohassan.github.io/bits-of-experience/posts/gradle/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So in this post I will make some notes on Gradle.
&lt;/p&gt;

&lt;p&gt;
I could theoretically take it as a black box at work and do my work
with the current configuration.
&lt;/p&gt;

&lt;p&gt;
I prefer to invest some time to understand how it works under the
hood. This will allow me more flexibility in the future. Moreover, it
will allow me to streamline my workflow in emacs once I have a more
profund understanding of it.
&lt;/p&gt;

&lt;p&gt;
These notes are based on the book &lt;a href="https://www.amazon.com/Gradle-Action-Benjamin-Muschko/dp/1617291307"&gt;gradle in action&lt;/a&gt;. Interesting is
that this book works with Groovy, which is apparently a more flexible
Java that introduce some of the concepts of dynamic programming
languages. Look at the &lt;a href="https://www.bbvaapimarket.com/en/api-world/why-groovy-gaining-popularity-among-java-developers/"&gt;following entry&lt;/a&gt; in this sense. I must say that
I can well understand why Python is gaining so much traction over more
heavy languages as Java. It is not simply a thing about the learning
curve. I think that Java with its structured type-safe and OOP
appraoch is more solid than Python for larger system. I see the point
for using it at work. The only thing is that the developing experience
is slower. As you have to compile the entire code before running it,
you cannot develop on the fly and integrate the changes in the more
structured project as you used to do in interpreted languages.
&lt;/p&gt;

&lt;p&gt;
Anyways, back to the book. Note that the book is very exhaustive.
Through it you will manage to get a broad overview on the topic and
you will even get to the point of continous integration and continouos
deployment.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/gradle/"&gt;Read more…&lt;/a&gt; (34 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/gradle/</guid><pubDate>Wed, 20 Oct 2021 07:18:25 GMT</pubDate></item></channel></rss>