<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about oop)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/oop.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Thu, 28 Jul 2022 13:47:07 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Object Relational Mapping</title><link>https://marcohassan.github.io/bits-of-experience/posts/object-relational-mapping/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;

img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So basically the idea of object relational mapping is the one of
mapping relational tables to objects.
&lt;/p&gt;

&lt;p&gt;
The idea is that a lot of times the application logic is in objects
while the persistency layer is in the relational schema.
&lt;/p&gt;

&lt;p&gt;
That translation is annoying and time consuming. Plus it requires a
mind switch to think at the two different levels.
&lt;/p&gt;

&lt;p&gt;
The idea of this technology was essentially to develop a framework to
map the relational persistency layer to the ORM paradigm. In such a
way it is possible for the developer to wire his mind into a single
setting - the one of the objects and to properly develop in a pure
object oriented mind.
&lt;/p&gt;

&lt;p&gt;
In this sense this is a lot what is happening in the NoSQL space,
especially with the document store and the json communication format
for API.. the underlying driver must is the same…. avoid all of that
annoying conversions from one paradigm to the other.
&lt;/p&gt;

&lt;p&gt;
So you see; always think in terms of drivers… you will anticipate
the future once you focus on the underlying driver and force instead
of on the concept itself.
&lt;/p&gt;

&lt;p&gt;
In general much of these notes refer to the &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjbwuWh_eH4AhVDwQIHHW0vC9sQFnoECA8QAQ&amp;amp;url=https%3A%2F%2Fhoclaptrinhdanang.com%2Fdownloads%2Fpdf%2Fspring%2FJava%2520Persistence%2520with%2520Hibernate.pdf&amp;amp;usg=AOvVaw0524Xl7sPIrS85z5EARMyP"&gt;following book&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/object-relational-mapping/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Databases</category><category>dev</category><category>oop</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/object-relational-mapping/</guid><pubDate>Tue, 05 Jul 2022 11:54:32 GMT</pubDate></item><item><title>Object Oriented Programming - Some Notes</title><link>https://marcohassan.github.io/bits-of-experience/posts/object-oriented-programming-some-notes/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So here are some notes on concepts you have to use when working in a
proper OOP way.
&lt;/p&gt;

&lt;p&gt;
Once upon a time, I had written some notes about major OOP
concepts. Unfortunately it got lost. Learn your lesson from it as this
is a real pity.
&lt;/p&gt;

&lt;p&gt;
In any case start anew here. Basically this should cover a little bit
of Software Design best practices. Add some notes for instance through
the following sources
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://refactoring.guru/design-patterns"&gt;design-patterns and refactoring&lt;/a&gt; - online source.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://www.javier8a.com/itc/bd1/articulo.pdf"&gt;desing patterns&lt;/a&gt; - apparently &lt;i&gt;THE BOOK&lt;/i&gt; in order to write proper
software .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/object-oriented-programming-some-notes/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>oop</category><guid>https://marcohassan.github.io/bits-of-experience/posts/object-oriented-programming-some-notes/</guid><pubDate>Wed, 17 Nov 2021 15:37:49 GMT</pubDate></item><item><title>C++ Quick Refresher</title><link>https://marcohassan.github.io/bits-of-experience/posts/c%2B%2B-quick-refresher/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;



&lt;p&gt;
Ok. This should be a lesson to you. I did quite some notes two years
ago when I was working with it. Also on object oriented programming
etc.
&lt;/p&gt;

&lt;p&gt;
Then badaboom; I did not have this blog yet and did not save the notes
in the cloud. Turns out that two years later I will have to work a bit
in C++ for finishing my thesis and implementing everything into the
code. And badaboom; could not work with the previous notes and had to
start from scratch. 
&lt;/p&gt;

&lt;p&gt;
Plus I am upskilling my OOP knowledge and make it more theoretical. As
in one of the interviews I lost quite some points as I was not able to
answer quite basic questions of OOP but did not recall all of the
names semantics etc. and got under stress.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/c%2B%2B-quick-refresher/"&gt;Read more…&lt;/a&gt; (26 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>c++</category><category>oop</category><guid>https://marcohassan.github.io/bits-of-experience/posts/c%2B%2B-quick-refresher/</guid><pubDate>Fri, 08 Jun 2018 17:42:09 GMT</pubDate></item></channel></rss>