<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about software-engineering)</title><link>https://emanuelehassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://emanuelehassan.github.io/bits-of-experience/categories/software-engineering.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Thu, 25 Jan 2024 18:29:51 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>On Algorithms</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/on-algorithms/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I am starting this post as always in order to keep structure and
leverage on it thorugh time.
&lt;/p&gt;

&lt;p&gt;
The idea is essentially the same of the other post about classical
architectures - and the idea of Da Vinci. Have the map and then
leverage on it thorugh time.
&lt;/p&gt;

&lt;p&gt;
I will also create a relevant post for the data structures. I studied
most of them and have made manual notes.
&lt;/p&gt;

&lt;p&gt;
Also at some point when making leetcode exercises I improved quite a
bit on them. Make that post as you know how easy it is to foget things
and if you do not have a way to structure the way you work you will be
lost. 
&lt;/p&gt;


&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/on-algorithms/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Algorithms</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/on-algorithms/</guid><pubDate>Sun, 15 Jan 2023 13:35:32 GMT</pubDate></item><item><title>On the Java Garbage Collector</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/on-the-java-garbage-collector/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This post contains some information around Garbage Collectors.
&lt;/p&gt;

&lt;p&gt;
It is important to understand this as this has important consequences
when writing your code.
&lt;/p&gt;

&lt;p&gt;
Think for instance about the ORM and how the instances are garbage
collected in JPA.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/on-the-java-garbage-collector/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/on-the-java-garbage-collector/</guid><pubDate>Tue, 15 Nov 2022 09:47:24 GMT</pubDate></item><item><title>On the Correct Library Versioning Scheme</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/on-the-correct-library-versioning-scheme/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So basically this is a very quick post on how to properly version your
libraries.
&lt;/p&gt;

&lt;p&gt;
Essentially, you will use it in both of your python packages twine
uploads and in your gradle java libraries packages. 
&lt;/p&gt;

&lt;p&gt;
Moreover, it is important as once you appreciate the proper way of
versioning libraries you will understand why Azure DevOps prevents you
from uploading two libraries with the same version - or let's say to
overwrite the thing. 
&lt;/p&gt;

&lt;p&gt;
You will understand that this actually happens as a way to indicate
you that you should comply with standard versioning systems used
across the world.
&lt;/p&gt;

&lt;p&gt;
In general there are two different schools of working with the general
versioning schema. You should decide which school you want to comply
with. I will explore the both in this post. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/on-the-correct-library-versioning-scheme/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>Python</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/on-the-correct-library-versioning-scheme/</guid><pubDate>Mon, 26 Sep 2022 11:07:34 GMT</pubDate></item><item><title>Code Quality Management and Monitoring</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/code-quality-management-and-monitoring/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
So basically this post contains a way to statically analyze your code
in order to see the quality of it.
&lt;/p&gt;

&lt;p&gt;
This is important in order find blind spots in your code. Moreover, it
is important to keep track of the history of the quality of the
software in time. So it is a very important piece of the puzzle.
&lt;/p&gt;

&lt;p&gt;
These notes are based on the gradle in action book.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/code-quality-management-and-monitoring/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;</description><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/code-quality-management-and-monitoring/</guid><pubDate>Mon, 19 Sep 2022 15:32:48 GMT</pubDate></item><item><title>On a beautiful Sentence</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/on-a-beautiful-sentence/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
So I took a book out of the shelves at work. It is about SQL and
Relational Theory.
&lt;/p&gt;

&lt;p&gt;
It is so beautiful that it requires its own post:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
SQL [structured query language] is full of difficulties and traps for
the unwary.
&lt;/p&gt;

&lt;p&gt;
You can avoid them if you understand relational theory, but only if
you know how to put the theory into practice.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
It is all about the &lt;i&gt;&lt;a href="https://novoresume.com/career-blog/interview-star-method"&gt;star method&lt;/a&gt;&lt;/i&gt; and that should always guide you.
&lt;/p&gt;</description><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/on-a-beautiful-sentence/</guid><pubDate>Tue, 06 Sep 2022 11:02:25 GMT</pubDate></item><item><title>On Programs Design</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/on-programs-design/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I am continuing my journeys into proper and solid software
engineering.
&lt;/p&gt;

&lt;p&gt;
Basically, I always used frameworks and in my first experience it was
out of question whether to use them. But the things were more short
term and now that the software that I am touching is very long lived
the situation is different.
&lt;/p&gt;

&lt;p&gt;
In fact, the topic around framework and which exactly to use is a hot
topic in our team. Some prefer to avoid them as much as possible. Some
are heavy proponents of them.
&lt;/p&gt;

&lt;p&gt;
As always it is ultimately a trade-off question. I am writing here
some points in order to make such trade-offs more explicit.
&lt;/p&gt;

&lt;p&gt;
In fact the way you decide to set up your software - such as trhoguh
inversion of control as when using frameworks or via simple libraries
and toolkits -, as well the task that the software is required to
complete will ultimately define the way you should set up and
program.
&lt;/p&gt;

&lt;p&gt;
This is the ultimate reason why there should be a thorough design
phase before touching any bit of code and immersing yourself into
it. What you do not design today will come to hunt you down tomorrow.
&lt;/p&gt;

&lt;p&gt;
Depending on the choice of your software set up you should as well
make strategic decisions that go hand in hand with it. This is the aim
of this post; to make this explicit. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/on-programs-design/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>frameworks</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/on-programs-design/</guid><pubDate>Fri, 26 Aug 2022 07:46:35 GMT</pubDate></item><item><title>Object Relational Mapping</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/object-relational-mapping/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
So basically the idea of object relational mapping is the one of
mapping relational tables to objects.
&lt;/p&gt;

&lt;p&gt;
The idea is that a lot of times the application logic is in objects
while the persistency layer is in the relational schema.
&lt;/p&gt;

&lt;p&gt;
That translation is annoying and time consuming. Plus it requires a
mind switch to think at the two different levels.
&lt;/p&gt;

&lt;p&gt;
The idea of this technology was essentially to develop a framework to
map the relational persistency layer to the ORM paradigm. In such a
way it is possible for the developer to wire his mind into a single
setting - the one of the objects and to properly develop in a pure
object oriented mind.
&lt;/p&gt;

&lt;p&gt;
In this sense this is a lot what is happening in the NoSQL space,
especially with the document store and the json communication format
for API.. the underlying driver must is the same…. avoid all of that
annoying conversions from one paradigm to the other.
&lt;/p&gt;

&lt;p&gt;
So you see; always think in terms of drivers… you will anticipate
the future once you focus on the underlying driver and force instead
of on the concept itself.
&lt;/p&gt;

&lt;p&gt;
In general much of these notes refer to the &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjbwuWh_eH4AhVDwQIHHW0vC9sQFnoECA8QAQ&amp;amp;url=https://hoclaptrinhdanang.com/downloads/pdf/spring/Java%20Persistence%20with%20Hibernate.pdf&amp;amp;usg=AOvVaw0524Xl7sPIrS85z5EARMyP"&gt;following book&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Note as well that as always you can debate about everything and you
shuold think when ORM and Hibernate - in the specific case - is a good
candidate and when not. See &lt;a href="https://www.eversql.com/i-followed-hibernate-orm-to-hell-and-came-back-alive-to-tell-about-it/"&gt;this dude&lt;/a&gt; post in general - also check the
last section. There is interesting referenced material.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/object-relational-mapping/"&gt;Read more…&lt;/a&gt; (75 min remaining to read)&lt;/p&gt;</description><category>Databases</category><category>dev</category><category>oop</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/object-relational-mapping/</guid><pubDate>Tue, 05 Jul 2022 11:54:32 GMT</pubDate></item><item><title>Python Testing</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/python-testing/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
So you already worked with python testing frameworks.
&lt;/p&gt;

&lt;p&gt;
The set up was already in place back then.
&lt;/p&gt;

&lt;p&gt;
Now it is more than a year that I do not touch the thing and
everything is solidly gone.
&lt;/p&gt;

&lt;p&gt;
Luckily I have a repo on my Github with some structure of it.
&lt;/p&gt;

&lt;p&gt;
Will leverage that now, plus I will start to write some notes, such
that people that will have to collaborate with me can reference to
it.
&lt;/p&gt;

&lt;p&gt;
On the top of it, it will be useful for the future as well.
&lt;/p&gt;

&lt;p&gt;
Plus finally it is always nice to see the things in multiple
languages. It is always the same story. By adding pieces to the puzzle
the picture becomes systematically clearer not the opposite. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/python-testing/"&gt;Read more…&lt;/a&gt; (13 min remaining to read)&lt;/p&gt;</description><category>Python</category><category>software-engineering</category><category>testing</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/python-testing/</guid><pubDate>Thu, 12 May 2022 11:35:32 GMT</pubDate></item><item><title>Emacs as SQL Client</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/emacs-as-sql-client/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So now that I have both application languages covered by emacs and
properly set up with lsp it is time to start working on the DB in my
emacs.
&lt;/p&gt;

&lt;p&gt;
This will help me to work via literate programming and have a very
well documented space where to work. On the top of it is nice cause
you can checkout everything properly in git, leverage magit,
projectile, org-mode etc… The usual emacs power so to say. 
&lt;/p&gt;

&lt;p&gt;
In this sense I could already work through jupyter notebooks through
emacs-ein.
&lt;/p&gt;

&lt;p&gt;
You have already set up your connection to the DBs in the language.
&lt;/p&gt;

&lt;p&gt;
You can start working in there in order to explore and combine the
data etc. You can then leverage as well the pandas and other
functionalities in there.
&lt;/p&gt;

&lt;p&gt;
Note that this is also interesting as a working solution. Have to
double check that with Valerio but theoretically you can then generate
ipython notebook out of it and make them run with ADF for the periodic jobs.
&lt;/p&gt;

&lt;p&gt;
Otherwise as mentioned above the other solution is to properly tangle
everything and finally insert everything in scripts to run in your
webapps or wherever you want. 
&lt;/p&gt;

&lt;p&gt;
It would essentially break
&lt;/p&gt;

&lt;p&gt;
The other option is to work via sql client. In any case continue for a
bit to use Azure Management Studio, in such a way you will see what
are the features you are interested in over there etc. and it will
help you to properly set up a client interface with all of the
features you need. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/emacs-as-sql-client/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/emacs-as-sql-client/</guid><pubDate>Wed, 11 May 2022 14:56:33 GMT</pubDate></item><item><title>GUnicorn Deployment Options</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
So basically this is closing the circle. With this post you should
gain the final understanding of the proper way of deploying a python
application in production, meaning it should give you a flavour of how
possible configurations settings that will affect the number of
requests that your application can handle as well your hardware
resources utilization.
&lt;/p&gt;

&lt;p&gt;
So basically this post touches upon the topic of workers, threads
etc. and the way to configure everything. It is good to understand
this in the context of &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;this post&lt;/a&gt; as well.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;</description><category>IT Architecture</category><category>Python</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/</guid><pubDate>Mon, 25 Apr 2022 09:16:23 GMT</pubDate></item></channel></rss>