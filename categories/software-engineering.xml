<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about software-engineering)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/software-engineering.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Thu, 07 Apr 2022 14:39:16 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Azure Pipelines</title><link>https://marcohassan.github.io/bits-of-experience/posts/azure-pipelines/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So write here a bit of documentation about how to create your DevOps
pipelines.
&lt;/p&gt;

&lt;p&gt;
That will be important as in such a way you can finally abstract from
the lower level stuff.
&lt;/p&gt;

&lt;p&gt;
You just deployed your first webapps on Azure. You did that through a
single gradle command through the gradle plug in.
&lt;/p&gt;

&lt;p&gt;
So in this sense it is easy now to deploy your changes via such
pipelines. You can embedd this over there as a task theoretically.
&lt;/p&gt;

&lt;p&gt;
Other people are taking the lead in this dimension and know much
better how to set up proper env integrated with Jira or similar
boards, so will not spend too much time with it.
&lt;/p&gt;

&lt;p&gt;
This is not interesting to this stage for me. It is just a small test
in order to read pipelines and understand properly what is going on
over there such that you can understand the general workflow.
&lt;/p&gt;

&lt;p&gt;
Note that obviously all of the notes under this page stems directly
from the official Microsoft documentation.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/azure-pipelines/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>azure</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/azure-pipelines/</guid><pubDate>Wed, 23 Mar 2022 12:02:43 GMT</pubDate></item><item><title>Deploying Spring Webapps in Azure</title><link>https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So starting to make a little bit of order and starting to deploy
directly to Azure.
&lt;/p&gt;

&lt;p&gt;
That is nothing fancy at all. Just basics stuff. With it you can start
to properly experiment in your Sandbox. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>azure</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/</guid><pubDate>Mon, 21 Mar 2022 15:34:55 GMT</pubDate></item><item><title>Integration and Asynchronous Jobs</title><link>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So new post.
&lt;/p&gt;

&lt;p&gt;
This is mainly about some integration exercise. It is not simple to
set up properly integration patterns. You can refer to &lt;a href="https://www.enterpriseintegrationpatterns.com/index.html"&gt;the following&lt;/a&gt;
for a general overview.
&lt;/p&gt;

&lt;p&gt;
So let's start to explore.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Integration</category><category>IT Architecture</category><category>java</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/</guid><pubDate>Thu, 24 Feb 2022 14:43:59 GMT</pubDate></item><item><title>Managing State in Cloud Native Applications</title><link>https://marcohassan.github.io/bits-of-experience/posts/managing-state-in-cloud-native-applications/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So this post deals on how to keep the state of the applicaiton in the
new microservices era.
&lt;/p&gt;

&lt;p&gt;
This is a &lt;a href="https://thenewstack.io/the-state-of-state-in-cloud-native-applications/"&gt;major question&lt;/a&gt; in the cloud-native app development
paradigma. You can summarize the issue as following:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;you want your apps to be stateless such that it is easy to scale and
heal (recover) them.&lt;/li&gt;

&lt;li&gt;you need to keep track of some states in your overall logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Note now that you have to create a suitable architecture that makes
the both objectives possible.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/managing-state-in-cloud-native-applications/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/managing-state-in-cloud-native-applications/</guid><pubDate>Wed, 23 Feb 2022 12:25:08 GMT</pubDate></item><item><title>Microservices &amp; Java</title><link>https://marcohassan.github.io/bits-of-experience/posts/microservices-java/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
Notes based on &lt;a href="https://developers.redhat.com/media-download-confirmation?tcDownloadFileName=Kubernetes-native-microservices-ebook-v3.pdf&amp;amp;tcRedirect=5000&amp;amp;tcSrcLink=https%3A%2F%2Fdevelopers.redhat.com%2Fcontent-gateway%2Fdevelopers%2FKubernetes-native-microservices-ebook-v3.pdf&amp;amp;p=Media%3A+Kubernetes+Native+Microservices+Ebook&amp;amp;pv=v3&amp;amp;tcDownloadURL=https%3A%2F%2Faccess.cdn.redhat.com%2Fdevelopers%2FKubernetes-native-microservices-ebook-v3.pdf%3F_auth_%3D1639834492_4a7529fa776a83612c3fae41e4b878b8"&gt;kubernetes native development with quarkus and
microprofile&lt;/a&gt;. This is one of the books available on the red-hat
developer website. From my personal experience these are good and
red-hat is in fact a strong company - great products are coming out of
it and they seem to deliver quality products throughout time.
&lt;/p&gt;

&lt;p&gt;
They know that space and it is a very interesting to my mind so I am
taking a bit to make some notes and organize thoughts around it.
&lt;/p&gt;

&lt;p&gt;
Note as well &lt;a href="https://github.com/wso2/reference-architecture/blob/master/api-driven-microservice-architecture.md"&gt;this resource&lt;/a&gt; and &lt;a href="https://microservices.io/index.html"&gt;as well this&lt;/a&gt; (read there every now and
then).
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/microservices-java/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>kubernetes</category><category>quarkus</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/microservices-java/</guid><pubDate>Mon, 20 Dec 2021 19:09:40 GMT</pubDate></item><item><title>Java Debugging</title><link>https://marcohassan.github.io/bits-of-experience/posts/java-debugging/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So it is time to start some serious post and exploration on Java
debugging.
&lt;/p&gt;

&lt;p&gt;
Note that I believe that having the right tooling is paramount of
performing a job well. It can save you a lot of time that is worth.
&lt;/p&gt;

&lt;p&gt;
So this post will contain all of the concepts in order to properly
work with the debugger.
&lt;/p&gt;

&lt;p&gt;
Cause yeah… we all know about breakpoints… but you better start to
properly work with conditional breakpoints, trace-points, watchpoints,
time-reversion features etc.
&lt;/p&gt;

&lt;p&gt;
As always in the IT world, lots of heads worked on a thing, so you
start to dig and you will never end. You simply open a pandora box.
&lt;/p&gt;

&lt;p&gt;
I will start easy withe the basics and then I will start to dig a
little bit deeper into more advanced stuff.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/java-debugging/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>debugging</category><category>dev</category><category>java</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/java-debugging/</guid><pubDate>Sun, 12 Dec 2021 11:32:32 GMT</pubDate></item><item><title>On a Brownfield Play</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-a-brownfield-play/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So this post is about playing on brown-fields.
&lt;/p&gt;

&lt;img src="https://marcohassan.github.io/bits-of-experience/images/brownfield.gif" class="center"&gt;

&lt;p&gt;
This should become one of the most important posts that you will
develop in your professional experience.
&lt;/p&gt;

&lt;p&gt;
Why?
&lt;/p&gt;

&lt;p&gt;
I think that people that worked on serious software projects that goes
a little bit beyond the calssical chatting level or idealist
discussion will agree on that: software projects are nasty. And here
my strong claim - software projects that are long lived are the most
nasty among them all.
&lt;/p&gt;

&lt;p&gt;
Funnily enough, it is much easier - and &lt;b&gt;satisfying&lt;/b&gt; - to develop a
solution from scratch, even if a pioneering solution, than to start
dealing and &lt;b&gt;entering as an outsider&lt;/b&gt; in a long lived project.
&lt;/p&gt;

&lt;p&gt;
This is my new life. I am lucky to like challenges, cause otherwise it
would not be fun at all. But I was - by will or not - well tempered so
far in this dimension so I am happy to embrace a new challenge.
&lt;/p&gt;

&lt;p&gt;
So this post sets a little bit of context for the claim above and will
make the way for successfully dealing with these kind of projects -
the most easy to fail.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-a-brownfield-play/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>software-engineering</category><category>Time Management and Mind-Set</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-a-brownfield-play/</guid><pubDate>Fri, 26 Nov 2021 14:55:16 GMT</pubDate></item><item><title>To UML and Round-Trip-Engineering</title><link>https://marcohassan.github.io/bits-of-experience/posts/to-uml-and-round-trip-engineering/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
The more I work on this project, the more sure I get. You need a
proper way to document your code structure. To jump into the source
base is otherwise extremly hard for freshies like me. On the top of it
given the amount of packages we need to maintain and expand I highly
doubt that it is efficient to not have such documentation. The time it
costs to go back and understand the general structure of the project,
even for the lead developer of the project is simply to high.
&lt;/p&gt;

&lt;p&gt;
On the top of it, even a relative fresher into OOP as me, could find
some fundamental holes in the program logic here and there, in the
code base of a project. I must say that the developement of the
project is still ongoing, so I must check with the colleagues if they
are aware of such holes. In any case, I am pretty much sure that parts
of the fundamental holes result by a lack of high-level meta-overview
of the classes and interdependencies. Such holes may easily evolve in
such larger projects, that you touch across longer time horizons
without having the clear structure all of the time in your mind.
&lt;/p&gt;

&lt;p&gt;
If you are missing the macro at some point the micro will reign and
the micro is usually nasty. The macro should lead your way of project
understanding. The micro should be just a modular low-level
intervention dictated by the macro.
&lt;/p&gt;

&lt;p&gt;
Recall this. And work in such a way, otherwise things will come to
hunt back to you and your peace in future. 
&lt;/p&gt;

&lt;p&gt;
In this sense I started quickly to explore for a couple of hours some
UML tools and their integration with the eclipse IDE.
&lt;/p&gt;

&lt;p&gt;
Here some notes. I hope that in this sense I will have a proper
workflow in this dimension in the next couple of months.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/to-uml-and-round-trip-engineering/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>software-engineering</category><category>uml</category><guid>https://marcohassan.github.io/bits-of-experience/posts/to-uml-and-round-trip-engineering/</guid><pubDate>Thu, 14 Oct 2021 07:55:33 GMT</pubDate></item><item><title>WSGI, APACHE and NGINX</title><link>https://marcohassan.github.io/bits-of-experience/posts/wsgi-apache-and-nginx/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This posts contain a brief overview of the deployment options for
Python applications. It will give a brief overview on the different
web servers types and the necessity for utilizing a WSGI server when
deploying a Python application.
&lt;/p&gt;

&lt;p&gt;
Note that to better make sense of this you should also make sense a
little bit of the different front-end &amp;amp; back-end communication
architectures. A good overview of this is given at &lt;a href="https://build.vsupalov.com/how-backend-and-frontend-communicate/"&gt;this link&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Update 02/2022&lt;/b&gt;: so I am starting to understand the issue
better. Intersting. I switched to Java in the meantime and I must say
the exercise is different and you get a broader exposure to the entire
IT industry through it.
&lt;/p&gt;

&lt;p&gt;
Basically the core difference that is important to understand is about
how the different servers react to incoming requests. Spanning new
threads and blocking them? Or rather in a non-blocking manner?
&lt;/p&gt;

&lt;p&gt;
After all once you understand the issue it is much better to
find the right source addressing the problem.
&lt;/p&gt;

&lt;p&gt;
So now I understand the other programming paradigm. The &lt;a href="https://medium.com/@rarepopa_68087/reactive-programming-with-spring-boot-and-webflux-734086f8c8a5"&gt;reactive
one&lt;/a&gt;. For it you need that newer generation of non-blocking servers.
&lt;/p&gt;

&lt;p&gt;
You can actually understand the issue better by &lt;a href="https://stackoverflow.com/questions/56794263/spring-webflux-differrences-when-netty-vs-tomcat-is-used-under-the-hood"&gt;reading in here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Check in this sense as well &lt;a href="https://stackoverflow.com/questions/10938360/how-many-concurrent-requests-does-a-single-flask-process-receive"&gt;this resource&lt;/a&gt;. You see the same ideas
there. You will have to set up all of these things properly and make
your right guesses otherwise you will have troubles when constructing
your applications.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/wsgi-apache-and-nginx/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>servers</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/wsgi-apache-and-nginx/</guid><pubDate>Tue, 31 Mar 2020 15:51:00 GMT</pubDate></item></channel></rss>