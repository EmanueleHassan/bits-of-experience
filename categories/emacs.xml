<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about emacs)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Thu, 07 Apr 2022 14:39:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>On some side note about working with Emacs and understanding a different language</title><link>https://marcohassan.github.io/bits-of-experience/posts/switching-language/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Very nice. I had a quick break from standard working related stuff.
&lt;/p&gt;

&lt;p&gt;
Taking some time to structuring better the workflow.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/switching-language/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/switching-language/</guid><pubDate>Thu, 03 Feb 2022 17:07:10 GMT</pubDate></item><item><title>Some Notes about UML and PlantUml</title><link>https://marcohassan.github.io/bits-of-experience/posts/some-notes-about-uml-and-plantuml/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
I already posted about the set-up of plantuml &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This is a very hand tool to manage complexity. In my new position
complexity is all around and over me.
&lt;/p&gt;

&lt;p&gt;
The system is big and you need to keep cold blood, strucutre and
overview. I think this will be the main challange. In this sense the
best way for me to operate will be to create good technical
documentation of the system that I can always refer to.
&lt;/p&gt;

&lt;p&gt;
Emacs is a very good friend in this sense. With all of the tags and
&lt;code&gt;TODO&lt;/code&gt;, &lt;code&gt;ISSUES&lt;/code&gt; workflow it will be possible for me to store the
general structure of the system and to keep a log and search across it
in order to manage such huge complexity.
&lt;/p&gt;

&lt;p&gt;
Such tagged documentation in combination with the possibility to
export my notes in very readable &lt;code&gt;html&lt;/code&gt; documents and the possibility
to write architectural diagrams via &lt;code&gt;plantuml&lt;/code&gt; will be my big ally in
this in new challenge.
&lt;/p&gt;

&lt;p&gt;
You can then store such &lt;code&gt;html&lt;/code&gt; in blob stores and make them available
across the team.
&lt;/p&gt;

&lt;p&gt;
Here some notes on resources you can refere to when writing your
architectural diagrams and general documentation for your projects.
&lt;/p&gt;

&lt;p&gt;
Find the official documentation &lt;a href="http://plantuml.com/en/guide"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/some-notes-about-uml-and-plantuml/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>IT Architecture</category><category>plantuml</category><category>uml</category><guid>https://marcohassan.github.io/bits-of-experience/posts/some-notes-about-uml-and-plantuml/</guid><pubDate>Fri, 01 Oct 2021 09:47:41 GMT</pubDate></item><item><title>Emacs as Java IDE via LSP</title><link>https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So I will work quite a lot with Java in the next couple of years. So I
have to properly set up a strong IDE and workflow for working in it.
&lt;/p&gt;

&lt;p&gt;
I know that the majority of the people do not think much of emacs in
terms of IDE but since the language-server-protocol integrations I
believe they can be as strong as more mainstream IDEs such as Visual
Code out there. t.
&lt;/p&gt;

&lt;p&gt;
I even think that they can be better once you get into it
enough. After a bit of research I am quite sure about the fact.
&lt;/p&gt;

&lt;p&gt;
In fact this was my experience with Python and now the step is simply
to get ot that level of costumization with emacs. So here some notes
on my way of making emacs a top environment for java and improve my
productivity with it in the long-term.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/"&gt;Read more…&lt;/a&gt; (15 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/</guid><pubDate>Wed, 29 Sep 2021 16:03:15 GMT</pubDate></item><item><title>Refactoring - Ediffing and Merging</title><link>https://marcohassan.github.io/bits-of-experience/posts/refactoring-ediffing-and-merging/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So recently I had to do quite some big refactoring and merging for
some code base.
&lt;/p&gt;

&lt;p&gt;
I knew about emacs &lt;code&gt;ediffing&lt;/code&gt; packages that I used already a couple
of times in the past. It is just a little bit confusing at the
beginning as it is often the case with emacs, you might well be
overwhelmed at the beginning. Too many nice features and you might
quickly get lost in it.
&lt;/p&gt;

&lt;p&gt;
The below video should give you a quick introduction to ediffing in
emacs. It is just a very basic tutorial. Then to get more detailed
information you should check at the &lt;a href="https://www.gnu.org/software/emacs/manual/html_mono/ediff.html"&gt;official documentation&lt;/a&gt; (at the
quick help commands section) telling you about all of the different
commands that are quite a few.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/refactoring-ediffing-and-merging/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/refactoring-ediffing-and-merging/</guid><pubDate>Fri, 25 Jun 2021 13:48:17 GMT</pubDate></item><item><title>Let's Go Pomodoro</title><link>https://marcohassan.github.io/bits-of-experience/posts/lets-go-pomodoro/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This posts experiments a bit with some time management techniques. I
discovered it is not just a talk. You can in fact work much more
productively with basics time management techniques.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/lets-go-pomodoro/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/lets-go-pomodoro/</guid><pubDate>Fri, 05 Feb 2021 11:03:32 GMT</pubDate></item><item><title>Ein - Ipython Notebooks in Emacs</title><link>https://marcohassan.github.io/bits-of-experience/posts/ein-ipython-notebooks-in-emacs/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
I recently decided to switch from using &lt;code&gt;ob-ipython&lt;/code&gt; to &lt;code&gt;ein&lt;/code&gt; for
working with the ipython kernel on Emacs. I was quite satisfied with
the first but I noticed it was not maintained anymore, while there
seems to be quite a lot of activity around &lt;code&gt;ein&lt;/code&gt;. I therefore decided
to stay up to date in order to benefit from the development in the
second package.
&lt;/p&gt;

&lt;p&gt;
This post summarizes the major things that makes it possible and the
key workflow to operate through &lt;code&gt;EIN&lt;/code&gt; properly.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/ein-ipython-notebooks-in-emacs/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/ein-ipython-notebooks-in-emacs/</guid><pubDate>Sun, 21 Jun 2020 19:15:24 GMT</pubDate></item><item><title>Nikola Set Up - Do it the Simple Way.</title><link>https://marcohassan.github.io/bits-of-experience/posts/nikola-set-up-do-it-the-simple-way/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Nikola is a python package to automatically generate static
webpages. This is more secure than operating through dynamic websites
for non-expert users. Moreover the integration with org will allow you
to easily generate blogs based on your org documents and this will
prove to be especially useful given that you can work following your
literate programming workflow without bothering too much on the
format.
&lt;/p&gt;

&lt;p&gt;
You can finally generate and publish interesting discoveries in an
instantaneous way.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/nikola-set-up-do-it-the-simple-way/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>blogging</category><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/nikola-set-up-do-it-the-simple-way/</guid><pubDate>Sun, 12 Apr 2020 19:45:52 GMT</pubDate></item><item><title>UML Diagrams with PlantUML</title><link>https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;
For my first bigger project I had to construct a flow diagram
describing the architecture of a back-end model analytics model I am
working on. 
&lt;/p&gt;

&lt;p&gt;
This post briefly discuss on UML and gives the set-up of &lt;code&gt;Plantuml&lt;/code&gt; on
emacs. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>IT Architecture</category><guid>https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/</guid><pubDate>Wed, 25 Mar 2020 10:14:12 GMT</pubDate></item><item><title>Nice Web 2.0 Formatted Technical Documents</title><link>https://marcohassan.github.io/bits-of-experience/posts/nice-web-20-formatted-technical-documents/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;
The other day I randomly came across &lt;a href="https://www.youtube.com/watch?v=0g9BcZvQbXU&amp;amp;t=192s"&gt;this nice youtube video&lt;/a&gt;. It was a
suggestion of youtube, so probably it is starting to get to know me
too well.
&lt;/p&gt;

&lt;p&gt;
In any case the guy wrote a very nice &lt;code&gt;CSS&lt;/code&gt; styleguide for technical
documentation that you can use when creating some technical
documentation.
&lt;/p&gt;

&lt;p&gt;
You can then simply code in &lt;code&gt;orgmode&lt;/code&gt; and by specifying the location
of the guy &lt;code&gt;CSS&lt;/code&gt; style when exporting your org mode document into html
it will be nicely rendered and you will have then the opportunity to
nicely write your technical documentation.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/nice-web-20-formatted-technical-documents/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/nice-web-20-formatted-technical-documents/</guid><pubDate>Fri, 21 Feb 2020 17:53:28 GMT</pubDate></item><item><title>Python Virtual Environment and Ob-ipython Kernel Connession</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-virtual-environment-and-ob-ipython-kernel-connession/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;


&lt;p&gt;
This post briefly introduce the creation of a virtual environment and
the initiation of a kernel active on that virtual environment. 
&lt;/p&gt;

&lt;p&gt;
Finally it discusses how to connect to the kernel running given its
ports specifications.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-virtual-environment-and-ob-ipython-kernel-connession/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-virtual-environment-and-ob-ipython-kernel-connession/</guid><pubDate>Fri, 07 Feb 2020 10:18:48 GMT</pubDate></item></channel></rss>