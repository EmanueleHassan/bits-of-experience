<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about emacs)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Wed, 29 Sep 2021 18:14:08 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Emacs as Java IDE via LSP</title><link>https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I will work quite a lot with Java in the next couple of years. So I
have to properly set up a strong IDE and workflow for working in it.
&lt;/p&gt;

&lt;p&gt;
I know that the majority of the people do not think much of emacs in
terms of IDE but since the language-server-protocol integrations I
believe they can be as strong as more mainstream IDEs such as Visual
Code out there. t.
&lt;/p&gt;

&lt;p&gt;
I even think that they can be better once you get into it
enough. After a bit of research I am quite sure about the fact.
&lt;/p&gt;

&lt;p&gt;
In fact this was my experience with Python and now the step is simply
to get ot that level of costumization with emacs. So here some notes
on my way of making emacs a top environment for java and improve my
productivity with it in the long-term.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/</guid><pubDate>Wed, 29 Sep 2021 16:03:15 GMT</pubDate></item><item><title>Refactoring - Ediffing and Merging</title><link>https://marcohassan.github.io/bits-of-experience/posts/refactoring-ediffing-and-merging/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So recently I had to do quite some big refactoring and merging for
some code base.
&lt;/p&gt;

&lt;p&gt;
I knew about emacs &lt;code&gt;ediffing&lt;/code&gt; packages that I used already a couple
of times in the past. It is just a little bit confusing at the
beginning as it is often the case with emacs, you might well be
overwhelmed at the beginning. Too many nice features and you might
quickly get lost in it.
&lt;/p&gt;

&lt;p&gt;
The below video should give you a quick introduction to ediffing in
emacs. It is just a very basic tutorial. Then to get more detailed
information you should check at the &lt;a href="https://www.gnu.org/software/emacs/manual/html_mono/ediff.html"&gt;official documentation&lt;/a&gt; (at the
quick help commands section) telling you about all of the different
commands that are quite a few.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/refactoring-ediffing-and-merging/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/refactoring-ediffing-and-merging/</guid><pubDate>Fri, 25 Jun 2021 13:48:17 GMT</pubDate></item><item><title>Let's Go Pomodoro</title><link>https://marcohassan.github.io/bits-of-experience/posts/lets-go-pomodoro/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This posts experiments a bit with some time management techniques. I
discovered it is not just a talk. You can in fact work much more
productively with basics time management techniques.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/lets-go-pomodoro/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/lets-go-pomodoro/</guid><pubDate>Fri, 05 Feb 2021 11:03:32 GMT</pubDate></item><item><title>Ein - Ipython Notebooks in Emacs</title><link>https://marcohassan.github.io/bits-of-experience/posts/ein-ipython-notebooks-in-emacs/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
I recently decided to switch from using &lt;code&gt;ob-ipython&lt;/code&gt; to &lt;code&gt;ein&lt;/code&gt; for
working with the ipython kernel on Emacs. I was quite satisfied with
the first but I noticed it was not maintained anymore, while there
seems to be quite a lot of activity around &lt;code&gt;ein&lt;/code&gt;. I therefore decided
to stay up to date in order to benefit from the development in the
second package.
&lt;/p&gt;

&lt;p&gt;
This post summarizes the major things that makes it possible and the
key workflow to operate through &lt;code&gt;EIN&lt;/code&gt; properly.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/ein-ipython-notebooks-in-emacs/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/ein-ipython-notebooks-in-emacs/</guid><pubDate>Sun, 21 Jun 2020 19:15:24 GMT</pubDate></item><item><title>Nikola Set Up - Do it the Simple Way.</title><link>https://marcohassan.github.io/bits-of-experience/posts/nikola-set-up-do-it-the-simple-way/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Nikola is a python package to automatically generate static
webpages. This is more secure than operating through dynamic websites
for non-expert users. Moreover the integration with org will allow you
to easily generate blogs based on your org documents and this will
prove to be especially useful given that you can work following your
literate programming workflow without bothering too much on the
format.
&lt;/p&gt;

&lt;p&gt;
You can finally generate and publish interesting discoveries in an
instantaneous way.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/nikola-set-up-do-it-the-simple-way/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>blogging</category><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/nikola-set-up-do-it-the-simple-way/</guid><pubDate>Sun, 12 Apr 2020 19:45:52 GMT</pubDate></item><item><title>UML Diagrams with PlantUML</title><link>https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;
For my first bigger project I had to construct a flow diagram
describing the architecture of a back-end model analytics model I am
working on. 
&lt;/p&gt;

&lt;p&gt;
This post briefly discuss on UML and gives the set-up of &lt;code&gt;Plantuml&lt;/code&gt; on
emacs. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>IT Architecture</category><guid>https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/</guid><pubDate>Wed, 25 Mar 2020 10:14:12 GMT</pubDate></item><item><title>Nice Web 2.0 Formatted Technical Documents</title><link>https://marcohassan.github.io/bits-of-experience/posts/nice-web-20-formatted-technical-documents/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;
The other day I randomly came across &lt;a href="https://www.youtube.com/watch?v=0g9BcZvQbXU&amp;amp;t=192s"&gt;this nice youtube video&lt;/a&gt;. It was a
suggestion of youtube, so probably it is starting to get to know me
too well.
&lt;/p&gt;

&lt;p&gt;
In any case the guy wrote a very nice &lt;code&gt;CSS&lt;/code&gt; styleguide for technical
documentation that you can use when creating some technical
documentation.
&lt;/p&gt;

&lt;p&gt;
You can then simply code in &lt;code&gt;orgmode&lt;/code&gt; and by specifying the location
of the guy &lt;code&gt;CSS&lt;/code&gt; style when exporting your org mode document into html
it will be nicely rendered and you will have then the opportunity to
nicely write your technical documentation.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/nice-web-20-formatted-technical-documents/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/nice-web-20-formatted-technical-documents/</guid><pubDate>Fri, 21 Feb 2020 17:53:28 GMT</pubDate></item><item><title>Python Virtual Environment and Ob-ipython Kernel Connession</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-virtual-environment-and-ob-ipython-kernel-connession/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;


&lt;p&gt;
This post briefly introduce the creation of a virtual environment and
the initiation of a kernel active on that virtual environment. 
&lt;/p&gt;

&lt;p&gt;
Finally it discusses how to connect to the kernel running given its
ports specifications.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-virtual-environment-and-ob-ipython-kernel-connession/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-virtual-environment-and-ob-ipython-kernel-connession/</guid><pubDate>Fri, 07 Feb 2020 10:18:48 GMT</pubDate></item><item><title>Tramp Mode</title><link>https://marcohassan.github.io/bits-of-experience/posts/tramp-mode/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;
This is possibly not even a post. Rather a quick entry but I like my
blog with the different tags to find the material quickly.
&lt;/p&gt;

&lt;p&gt;
I started recently using tramp mode to ssh into some Raspberry devices
as I got some &lt;i&gt;TJbots&lt;/i&gt; to play with. This post contains a very short
intro on how to use tramp.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/tramp-mode/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/tramp-mode/</guid><pubDate>Wed, 29 Jan 2020 16:08:07 GMT</pubDate></item><item><title>Local Variables &amp; MobileOrg</title><link>https://marcohassan.github.io/bits-of-experience/posts/localvar/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;
During the last couple of weeks I completed an emacs integration I
desired to complete since long time. I managed to fully synchronize my
emacs calendar with an online one.
&lt;/p&gt;

&lt;p&gt;
This allows me to have an integrated look and finally work on a
consistent agenda across devices to organize myself better. It
moreover allows me to have a quick glimpse on my agenda in emacs.
&lt;/p&gt;

&lt;p&gt;
In order to do that I relied on &lt;a href="https://cestlaz.github.io/posts/using-emacs-26-gcal/"&gt;this&lt;/a&gt; nice video of &lt;i&gt;C'est la Z&lt;/i&gt;. The
basic idea is to integrate the Emacs Calendar and synchronize it with
your Google Calendar such that each time you open your agenda on Emacs
your org-agenda will be imported in the Google Calendar and conversely
the Google Calendar entries will be integrated into your org
agenda. You can find the details of the step up in the above link and
this will not be discussed in the post.
&lt;/p&gt;

&lt;p&gt;
Nonetheless, I further enriched the approach with an integration via
&lt;code&gt;mobileorg&lt;/code&gt;. This allows me to write new entries in my agenda directly
from my mobile and allows me a more emacs-focused approach and better
deletion and archiving possibilities in comparison to working on the
Google Calendar on my phone. The structure is the following.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/localvar/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>org-mode</category><guid>https://marcohassan.github.io/bits-of-experience/posts/localvar/</guid><pubDate>Tue, 14 Jan 2020 21:06:12 GMT</pubDate></item></channel></rss>