<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about servers)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/servers.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Mon, 01 Aug 2022 08:10:51 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>WSGI, APACHE and NGINX</title><link>https://marcohassan.github.io/bits-of-experience/posts/wsgi-apache-and-nginx/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This posts contain a brief overview of the deployment options for
Python applications. It will give a brief overview on the different
web servers types and the necessity for utilizing a WSGI server when
deploying a Python application.
&lt;/p&gt;

&lt;p&gt;
Note that to better make sense of this you should also make sense a
little bit of the different front-end &amp;amp; back-end communication
architectures. A good overview of this is given at &lt;a href="https://build.vsupalov.com/how-backend-and-frontend-communicate/"&gt;this link&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Update 02/2022&lt;/b&gt;: so I am starting to understand the issue
better. Intersting. I switched to Java in the meantime and I must say
the exercise is different and you get a broader exposure to the entire
IT industry through it.
&lt;/p&gt;

&lt;p&gt;
Basically the core difference that is important to understand is about
how the different servers react to incoming requests. Spanning new
threads and blocking them? Or rather in a non-blocking manner?
&lt;/p&gt;

&lt;p&gt;
After all once you understand the issue it is much better to
find the right source addressing the problem.
&lt;/p&gt;

&lt;p&gt;
So now I understand the other programming paradigm. The &lt;a href="https://medium.com/@rarepopa_68087/reactive-programming-with-spring-boot-and-webflux-734086f8c8a5"&gt;reactive
one&lt;/a&gt;. For it you need that newer generation of non-blocking servers.
&lt;/p&gt;

&lt;p&gt;
You can actually understand the issue better by &lt;a href="https://stackoverflow.com/questions/56794263/spring-webflux-differrences-when-netty-vs-tomcat-is-used-under-the-hood"&gt;reading in here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Check in this sense as well &lt;a href="https://stackoverflow.com/questions/10938360/how-many-concurrent-requests-does-a-single-flask-process-receive"&gt;this resource&lt;/a&gt;. You see the same ideas
there. You will have to set up all of these things properly and make
your right guesses otherwise you will have troubles when constructing
your applications.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/wsgi-apache-and-nginx/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>servers</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/wsgi-apache-and-nginx/</guid><pubDate>Tue, 31 Mar 2020 15:51:00 GMT</pubDate></item></channel></rss>