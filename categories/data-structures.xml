<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about Data Structures)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/data-structures.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Wed, 23 Mar 2022 10:39:44 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Indexing Data Structures</title><link>https://marcohassan.github.io/bits-of-experience/posts/indexing-data-structures/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
While going deeper into data stores and HBase I got interested in the
indexing mechanism on which the database rely for an optimal
read/write performance. 
&lt;/p&gt;

&lt;p&gt;
I watched some videos that I put on this post. The first one gives a
very good overview of Block Storage and the effectiveness of
multi-indexing putting at the end the focus on B-trees and B+-trees. 
&lt;/p&gt;

&lt;p&gt;
The second one briefly goes Bloom Filters, it is not as good as the
first but it makes the point for Bloom Filter without going too much
in the nitty-gritty. These are very interesting data structure that is
widely used in different fields - from fraud detection to check
whether a transaction is unlikely to have been performed by the legal
owner; to databases for skipping a query all-together if the bloom
filter gives negative output (see for instance in Hbase where a query
given the size of the table might be especially expensive) etc. 
&lt;/p&gt;

&lt;p&gt;
The third does not discuss any data structure and assumes on top of it
that you are comfortable with the topic of log structured tree and
merge-sort algorithms. It goes in to the research field and analyzes
possible optimizations for write intensive key-value stores, which as
seen in the Big Data class are by now possibly one of the most
important store class.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/indexing-data-structures/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Data Structures</category><guid>https://marcohassan.github.io/bits-of-experience/posts/indexing-data-structures/</guid><pubDate>Sat, 18 Jul 2020 08:54:22 GMT</pubDate></item></channel></rss>