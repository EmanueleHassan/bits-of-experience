#+BEGIN_COMMENT
.. title: Let's Go Pomodoro
.. slug: lets-go-pomodoro
.. date: 2021-02-05 12:03:32 UTC+01:00
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT


  This posts experiments a bit with some time management
  techniques. I discovered it is not just bla bla. You can in fact
  work much more productively with basics time management
  techniques. 

  {{{TEASER_END}}}

  I started using some during my last exam session. It was
  a hard one and I was often distracted. Well I decided to set
  timers. During some time I was working. Then I was regularly doing
  breaks reading my current book. It worked and I managed to read 250
  pages during the most hard exam session I ever experienced. 

  It turned out when discussing with my dare gf, that there is a very
  well known technique that supports such a behaviour. It is the
  pomodoro technique. It consists in measuring everything in
  pomodoros. That is 25min. intervals.

  During such intervals you work at 100% without any distractions and
  then from time to time you take breaks and switch off. But when you
  work you work at 100%. You do not mix stuff.

  Let's start with the basics in emacs. And let's then expand to the
  pomodoro.

  
** Org-Clocks

   So the basics thing is to log all of your work. I.e. check how much
   time you needed to compute tasks. After all: /just if you can
   measure it, you can improve it/. 

   One very easy way to do that in emacs is via the =org-clock-in=
   function mapped to ~C-c C-x TAB~, in my emacs. Its correspondent is
   =org-clock-out= mapped to ~C-c C-x C-o~. In such a way you will be
   able to start a measurement in the org header and stop it and the
   time the time of the clock will be registered in the logbook. Check
   this very emacs file you are editing should you be confused at any
   time. Also interesting are the ~C-c C-x C-j~, i.e. the
   =org-clock-goto= command that makes you jump to the header where
   your clocks are registered. Even more interesting are the ~C-c C-x
   C-d~ command, i.e. =org-clock-display= command that when run in the
   section it tells you exactly how many hours you spend on the section
   according to your clocked in time.

   Well, that all came in by default with emacs =org-mode=. I just have
   never the time so far to check at it properly and makes sense of all
   of that. Now that I am taking the time and writing this post it
   makes well sense. Wonderful tool. Quick usage through the
   shortcuts. 

** Pomodoro

   Let's go back to the pomodoro technique, the thing for which you
   actually started to dig into such time management tools. So
   apparently tools to work with the pomodoro technique were
   implemented /en mass/ into emacs. Well no surprise. If you know
   emacs, then you know we emacs people value a lot productivity and
   try all the sorts of the escamotages in order to increase it.

   So the most popular package is the pomodoro one. You can install it
   as follows given that you are using the =use-package= package. 

 #+begin_src emacs-lisp 
(use-package pomodoro
  :ensure t
  :init (pomodoro-add-to-mode-line))
 #+end_src 

 #+RESULTS:

   In theory the documentations and forums say that once you do that
   you should have a =start-pomodoro= function. I do not see it in my
   emacs at the moment. A pity cause apparently through such a package
   you should also see the expiration time until the pomodoro on your
   bottom bar of your emacs.

   Anyways, another option that directly integrates with emacs org
   mode clocks previously described is the =org-pomodoro=
   package. That starts a clock as the =clock-in= command above and
   after 25 min. it should expire. I read that the notification when
   it expires is not that great so they suggested to add the
   =libnotify= option below.

 #+begin_src emacs-lisp 
(use-package org-pomodoro
  :ensure t
  :config
  (setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil)))))
 #+End_src 

 #+RESULTS:

   Let's give it a go for the next task then. Now I have no time to
   wait other 25min. to see the behaviour. The milestone was set and
   for the next projects you can start with your time management
   techniques.

   Good your done and at this first round of your management tool, you
   spent exactly 38 min. exploring such options and writing this
   post. And recall: /if you don't measure it, you cannot improve it/.

   Ahh and by the way, just noticed that your pomodoro time does
   indeed appear on the lower bar even when using org-pomodoro. So
   good you are good to go. Let's pomodoro it all.
