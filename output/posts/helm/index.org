#+BEGIN_COMMENT
.. title: Helm
.. slug: helm
.. date: 2020-02-05 13:13:30 UTC+01:00
.. tags: IT Architecture, Container Management
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT


#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT


This post contains the basic logic of Helm and should act as a
repository listing the most important ways to work with Helm.

#+BEGIN_EXPORT html
<br>
#+END_EXPORT

{{{TEASER_END}}}

* Helm - Why?

Using virtualization capabilities ensures scaling, yes. Just keep in
mind that an AMI, ARM (or a Docker container for that matter) you use
to launch the app will be dependent on the Virtual Machine it is
stored on and will be able to scale only the way the virtual machines
are scaled — by adding more resources to the pool.

With Helm, we have quite another picture. The application can be
composed of clearly defined microservices and we can scale only the
ones we need to scale, adding more Kubernetes nodes and pods to the
cluster. Instead of working with a holistic image and growing all the
resources, you operate a set of images and scale them independently.

The problems begin when you want to launch a new instance of an
application that runs, let’s say, 50 microservices. Starting and
combining them all will be a laborious and error-prone task. However,
with Helm, all you need to know is the name of the charts for the
images responsible. Launching a new instance is the question of
executing the corresponding Helm chart.

Of course, the DevOps team can do the same using standard kubectl
commands, yet working with Helm provides the ability to quickly
define, cleanly manage and easily deploy the applications.


#+BEGIN_EXPORT html
<br>
#+END_EXPORT

* Helm

General [[https://helm.sh/docs/intro/quickstart/][Helm Guide]] with all of the necessary commands.


*** Add a Charts Repository to your Helm Client

    Add IBM-Kubernetes charts to your local helm 

    #+BEGIN_SRC sh
    helm repo add iks-charts https://icr.io/helm/iks-charts
    #+END_SRC


    Other useful charts are the stable released charts. There you can
    find images for major databases, SDKs etc.

    #+BEGIN_SRC sh
    helm repo add stable https://kubernetes-charts.storage.googleapis.com/
    #+END_SRC

    You can moreover add the incubator charts for your local client

    #+BEGIN_SRC sh
    helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/
    #+END_SRC

    Remind that there is an intrinsic difference between /stable/ and /incubator/ charts.

    Stable Charts meet the criteria in the [[https://github.com/helm/charts/blob/master/CONTRIBUTING.md#technical-requirements][technical requirements]], which
    are a set of strict quality restrictions the Charts should comply with.

    Incubator Charts are those that do not meet these criteria. Having the
    incubator folder allows charts to be shared and improved on until they
    are ready to be moved into the stable folder. There are not simply
    incubator and stable charts. Also iks-charts that are IBM specific for
    instance.

*** Install a Chart

 #+BEGIN_SRC sh
 ## helm install <yourchart>
 helm install iks-charts/ibmcloud-data-shield
 #+END_SRC

 #+RESULTS:

*** Installing a Chart in Debug Mode might help

 #+BEGIN_SRC sh
 helm install <yourchart> --dry-run --debug
 #+END_SRC

 This will print to stdout all the rendered templates in the chart (and won't install the chart)

*** Altering some specific entries in the .yaml configuration of the chart

    This can be achieved through the ~--set~ flag.

    For instance by running

    #+BEGIN_SRC sh
     helm install iks-charts/ibmcloud-data-shield
      --set global.OpenShiftEnabled=true
    #+END_SRC
    
    you specify that you want to run the chart on an Openshfit cluster.

*** Don't forget to Update

    #+BEGIN_SRC sh
    helm repo update
    #+END_SRC

*** View Running Charts

  View installed charts on Helm

  #+BEGIN_SRC sh :results output
  helm ls
  #+END_SRC

  #+RESULTS:
  : NAME           	NAMESPACE   	REVISION	UPDATED                             	STATUS  	CHART              	APP VERSION
  : my-cert-manager	cert-manager	1       	2019-11-21 16:47:58.921724 +0100 CET	deployed	cert-manager-v0.6.7	v0.6.2     

*** Information and Yaml for different Chart Repositories

 The information is saved in the following folder on the local machine with your kubectl client.

 #+BEGIN_SRC sh
 ls /Users/marcohassan/Library/Caches/helm/repository/
 #+END_SRC

 There you see moreover the installed charts.

*** Info on Deployed Charts

  #+BEGIN_SRC sh :results output
  helm status my-cert-manager
  #+END_SRC

*** Delete a Chart

  To delete one helm chart you can use the following command

  #+BEGIN_SRC sh
   helm delete my-wordpress
  #+END_SRC

  This will clean all the pods associated with a given release.

*** Change Namespace

  Look at this [[https://itnext.io/drastically-improve-your-kubernetes-deployments-with-helm-5323e7f11ef8][medium article]] for a basic discussion on basic helm commands.

