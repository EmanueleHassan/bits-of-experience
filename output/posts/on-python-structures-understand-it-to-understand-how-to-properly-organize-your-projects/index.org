#+BEGIN_COMMENT
.. title: On Python Structures - Understand it to understand how to properly organize your Projects
.. slug: on-python-structures-understand-it-to-understand-how-to-properly-organize-your-projects
.. date: 2021-07-07 10:50:22 UTC+02:00
.. tags: Python
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT


So I finally took some time to go over the documentation and make some
notes about the different naming conventions and some basics
structures you should get when building larger projects.

I just finished a third larger python project and I am by now
conscious of the strength of well organized code. It can save you a
very big amount of time, especially when your projects start to grow
very large and it becomes difficult to keep a clean mental structure
over the code-base.

I therefore started to write a couple of posts where I am writing and
will update my way of working and structuring projects. I will expand
on it in time once my knowledge will expand and more sophistication
will occur.

This particular posts deals with the basics structures that you have
to understand to properly set up projects and manage to well deal with
larger code-bases. 

{{{TEASER_END}}}

The first important difference you have to understand is the one among
=script=, =modules= and =packages=. Just when you will understand this
properly you will be able to well structure projects.

** Script vs. Module vs. Package

   So notice that there is an inherit difference among the three. The
   first one; the =script= is the ultimate file you pass to your
   python interpreter when running your program.

   A =module= is a support file containing some python code that you
   call from within a runtime. Or using python official documentation
   terms:

   #+begin_quote
To support this, Python has a way to put definitions in a file and use
them in a script or in an interactive instance of the
interpreter. Such a file is called a module; definitions from a module
can be imported into other modules or into the main module (the
collection of variables that you have access to in a script executed
at the top level and in calculator mode).
   #+end_quote

   So that is basically it and the distinction between a module and a
   script is not that big.

   Note as well this =__name__= object that you often use when
   programming. This has the following meaning:

   Within a module, the module’s name (as a string) is available as
   the value of the global variable =__name__=. In such a way you can
   easily write if statements that depending on the case where the
   file will be a =module= or a =script= (in this case the =__name__=
   is bounded to "__main__") will perform different actions.

   However, what is important to understand is that the scope of each
   variables is dependent on the file it resides in. This is important
   to understand. Once you get this, it will be possible for you to
   avoid loosing time because of issues relating to some
   non-accessible variables etc.

   In order to understand this, note again the words of the official
   documentation:

   #+begin_example
   Each module has its own *private symbol table*, which is used as the
   global symbol table by all functions defined in the module. Thus,
   the *author* of a module can use global variables in the module
   without worrying about accidental clashes with a user’s global
   variables.

   On the other hand, if you know what you are doing you
   can touch a module’s global variables with the same notation used
   to refer to its functions, =modname.itemname=.
   #+end_example

   So that is essentially the idea.. each module has its own global
   variables and namespace. This has pro and cons. It will help you to
   avoid conflicts as everything is well separated. On the other hand
   this means that modules that are installed in another module are
   not automatically in the private symbol table of a particular
   module such that you will have to import them once more.

   As following coding best practices you should write your code one
   and one time only it makes sense to organize functions and
   libraries you often use and import in your modules in a distinct
   package that you might call =utils=.

   The final component that you will use when creating your Python
   projects are =packages=. You can think about packages as a way to
   organize modules.

   In official docu terms:

   #+begin_example
   Just like the use of modules saves the authors of different modules
   from having to worry about each other’s global variable names, the use
   of dotted module names saves the authors of multi-module packages like
   NumPy or Pillow from having to worry about each other’s module names.
   #+end_example

   So you get the point... although from a practical point of view I
   see it more as way to separate your modules and program in logical
   structure and keep the code clean.

   Note just that in order for a repository to count as package you
   have to add to it the =__init__.py= module. You can either leave it
   blank or you can put code into it that it will be executed when the
   package is imported as such, i.e. when you import the package name
   without a path to a module in that package.

   It is recommended to use such a module to store global variables
   and to store packages that you will use within your project.

   You can then access such global variables within the module in the
   following way:

   #+begin_src python
   from PACKAGENAME import GLOBAL-VARIABLE-SAVED-IN-THE-INIT
   #+end_src

   and even if you run the above in a module inside a given package it
   will work well.
   
** On that many .pyc modules

   To speed up loading modules, Python caches the compiled version of
   each module in the __pycache__ directory under the name
   module.version.pyc, where the version encodes the format of the
   compiled file; it generally contains the Python version number.

   So that is what all of these auto-generated directories are. You
   can safely ignore them when committing your code, however you
   should not cancel them at any time form your project. This is order
   to not have to recompile the entire module each time. 

   Python checks the modification date of the source against the
   compiled version to see if it’s out of date and needs to be
   recompiled. This is a completely automatic process. Also, the
   compiled modules are platform-independent, so the same library can
   be shared among systems with different architectures.
  

** On relative paths

   Here you should specify the path relative to the package you are
   currently working (i.e. relative to the package where your module
   resides).

   Note that relative path just work across =packages=, i.e. you
   cannot reference a module that is not part of a package with
   relative paths.
   

** On Naming Conventions According to PEP8

   =Modules= should have short, all-lowercase names. Underscores can
   be used in the module name if it improves readability. Python
   =packages= should also have short, all-lowercase names, although
   the use of underscores is *discouraged*.

   ---------------------------------------------------------

   Some other practice; I do not think it is PEP but would have to
   double check it.
      
   Note that some people like to call their =script=, i.e. the main
   file they execute the __main__.py.

   It is up to you if you want to follow that structure or not. You
   can make some research on the best practice in the following
   depending on the time.

   





