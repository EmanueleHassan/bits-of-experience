#+BEGIN_COMMENT
.. title: Blogging in Org Mode
.. slug: 
.. date: 2019-07-31 23:06:12 UTC+02:00
.. tags: org-mode, emacs
.. category: 
.. link: 
.. description: Blogging using Org-mode on Emacs
.. type: text
.. status: private
#+END_COMMENT

This is a private post outlying how to create posts with Nikola. 

{{{TEASER_END}}}

A simpler way is to integrate directly is to save the ob-ipython
generated source for the rendered images and copy them in the =output=
directory. Then you do not have to make major changes and things will
be formatted well quickly.

* How to insert pictures in Python

Prova a scrivere un poco in =verbatim=.

   #+BEGIN_SRC python :results file :exports both
     import matplotlib.pyplot as plt 
     plt.plot([1,3,5,7])
     plt.savefig("../images/test_plot.png")
     return("../images/test_plot.png")
   #+END_SRC

   #+RESULTS:
  [[img-url:/images/test_plot.png]] 


* Insert pictures directly via html

#+begin_export html
<img width="400" height="400" src="../../images/uml.svg" alt="UML" class="center">
#+end_export

Like this you can directly center etc using html. Not sure if it works
on nikola though.


* Aligning text and images

#+begin_export html
<img width="400" height="400" src="../../images/uml.svg" alt="UML" class="center" ALIGN = "right">
#+end_export

Code, such as the HTML elements and text we present in the following
example, will cause the text within the block to display at the top of
the image:

<IMG SRC=”building.jpg” ALIGN=”top” />The first line of this text will
be positioned at the top of the image. The rest will start below the
image, creating a large white space. Fortunately, there is a better
way to handle this that more closely resembles what you could do with
a desktop publishing program.

The text flow problem in the previous paragraph isn’t as evident when
you use the Right or Left value, though. Thus, the following code will
position the image to the right, with the text flowing neatly on the
left side:

<IMG SRC=”building.jpg” ALIGN=”right” />This text flows on the left.

* Insert video

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

  #+begin_export html
<video controls="controls" width=
"600" height="400" 
       name="Video Name" src="../../videos/Bildschirmvideo%20aufnehmen%202020-02-20%20um%2016.12.36.mov"></video>
  #+end_export


  #+begin_export html
<br>
<br>
  #+end_export


* Insert PDFs through Iframes

#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

#+begin_export html
<object data="../../pdfs/AS87_HandIn.pdf" type="application/pdf"
	width="100%" height="600px" align="center">
  <iframe   jsname="L5Fo6c" jscontroller="usmiIb"
	    jsaction="rcuQ6b:WYd;" class="YMEQtfL6cTce-purZT L6cTce-pSzOP"
	    frameborder="0" allowfullscreen="" src="../../pdfs/AS87_HandIn.pdf"
	    width="100%" height="600px" align="center"/>

</object>
#+end_export


#+BEGIN_EXPORT html
<br>
<br>
#+END_EXPORT

Notice that you have to create the =pdfs= directory in the =output=
directory in your blog directory. Then you have to insert the PDFs
there that you want to display.


* pictures on R

  #+begin_example
#+begin_src R :exports none
# 1. Open a svg file
svg("../images/boxplot.svg") 

# 2. Create a plot
boxplot (weight ~ group, data = PlantGrowth)

# 3. Close the pdf file
dev.off()  
#+end_src

[[img-url:/images/boxplot.svg]] 

  #+end_example


* For latex integration

Check the source code of the posts with contrasts. There are the options in the
=YAML= formatted comments.


