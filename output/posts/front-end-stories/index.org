#+BEGIN_COMMENT
.. title: Front-End Stories
.. slug: front-end-stories
.. date: 2022-01-24 11:30:21 UTC+01:00
.. tags: front-End
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT

#+begin_export html
<style>
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
</style>


<style>
 {
  box-sizing: border-box;
  margin-top: 60px;
  margin-bottom: 60px;
}

.column {
  float: left;
  width: 50%;
  padding: 0px;
}

/* Clearfix (clear floats) */
.row::after {
  content: "";
  clear: both;
  display: table;
}
</style>

#+end_export

So again front-end is not my stuff and will never be.

I need to develop a basic understanding of front-end in order to not
depend on other people as sometimes in the app I will have to
understand some front-end, back-end interactions without always being
shielded by some kind of REST-API.

So this work contains some research/on the job discoveries / debugging
stuff related to the the front-end.

Logically it will be very basic content that is not as interesting for
the expert in the field. It is much more my search and rescue
repository as I am often constructing.

This is important as I am noting that often things are recurrent.

In general if you ever will want to dig more into a more narrow
topic check at [[https://frontendmasters.com/guides/front-end-handbook/2019/#4.10][the following]].

{{{TEASER_END}}}

** Resources

   In general you can leverage one among the many following resources:

   - [[https://frontendmasters.com/guides/front-end-handbook/2019/][front end handbook]]


** On the javascript interaction with html and CSS stuff

   So basically you are not alone in this universe. There are plenty
   of people that are just looking for a basics understanding of it as
   you are.

   Check [[https://stackoverflow.com/questions/38834375/relationship-between-html-and-javascript-the-basics-of-frontend-development][this url]] containing exactly the same understanding that you
   want to fix in your mind. (basically it follows the reply of the
   most voted answer next)

   So basically that is the idea:

   - your browser request a front-end page from the back-end server.

   - the server sends an HTML page which usually includes:

     - DOM, CSS and Javascript as tags.

   Note now that the DOM - is is a language-independent model made up
   of objects representing the structure of a document. You can then
   modify the structure of  the dome using that model. HMTL is just
   one among the many languages that the model can operate on.

   So understand that the HTML page contains all of the page, then by
   using javascript you can actually manipulate the DOM and embedd
   some dynamic logic such that you might display or not some
   elements. So basically that is a little bit the idea.

   You have then a lot of javascript methods to fetch the different
   Nodes of the DOM and retrieve, modify, cancel or add to them. Check
   [[https://developer.mozilla.org/en-US/docs/Web][this webpage]] in order to get your head around it.

   More into the detail it works like this:

#+begin_export html
 <img src="../../images/Screenshot 2022-01-24 133817.png" class="center">
#+end_export

   1. Browser starts by reading the HTML to create what is known as a content tree.

   2. Then it "looks" at the CSS and "applies" the CSS to the content
      tree and creates what is called a render tree. This has the
      styling information added. 

   3. Finally it goes though layout process, where each of the HTML
      elements are assigned exact physical window coordinates to
      display at. 

   4. Finally everything is "painted" and you see the stylized HTML
      page. 

   5. JavaScript is parsed by the browser seprately as it is
      encountered in =<script>= tag. JavaScript can add/delete/modify
      existing components of the dom and change how CSS applies to
      them. It can also make new network calls. (that is basically the
      key point that you have to understand, as all of the other is
      pretty straightforward and just a bit of static content that is
      fetched via network - i.e. shipped by the server together with
      the different html pages you ship)

      Note that via the aforementioned calls you can as well make API
      calls to fetch information from the backend or trigger from
      there the relevant logic. 


** Understanding front-end applications

   Note now that this is the basics, so that now you can basically
   understand basics issues with the front-end compoents.

   I.e when you try to understand front-end applications and need to
   debug them, first start by looking at the html 
   
       1. from there you should see the entire DOM. Everything that
          could eventually appear should be visible in there.

	  (The only think that I can think of is if you get some other
          html pages via javascript and ship and transform them in
          such a way.

	  No idea how much that is a use case in front-end
          development. Can imagine that this might eventually be an
          option if you do not want to display much to the browser
          user...)

	  Note as well that there is extensive usage of Mustache in
          our front-end. So you have as well to understand a bit that
          templating solution if you will have to develop extensively
          with it.

       2. then check for what you are looking for there. if you do not
          find it, then you have to strart dig into the dynamic
          components and check at the javascript scripts.

	  There will be either plain javascript in your html file or
          you will have special scripts that you will fetch from the
          server - such that you can search them in your workspace in
          there.

          Note that you might especially call some =show= or =hide=
          methods to implement the logic etc.


** On Single Page vs. Multi-Page

   Make a note as well on this common difference.

   The concept is that in a single page you always remain on the same
   webpage. The content is dynamically updated by modifying the DOM
   via a set of relevant javascript logic.

   In multipage you actually redirect the user to different pages that
   are fetched via the server.

   This is a bit the difference between the two and it will have
   implications for the user experience.
   
   I think that if you really go deep into the topic there might be as
   well issues relating to traffic etc. etc. This is obviously not a
   topic for the applications I need to work on.

   More than these lower level stuff, it is important in any case to
   understand the following. This is important and will have important
   implications for the way you design your applications.

   On the top of it, it might require important rework at a later
   stage if you want to switch from a design to another.
   
   #+begin_export html
    <img src="../../images/Screenshot 2022-09-20 110226.png" class="center">
   #+end_export


** On general front-end project structure

   You can [[https://www.blog.duomly.com/how-to-create-frontend-project-structure-that-scales-and-is-easy-to-maintain/][read this]]. You can read there the general way to structure
   serious front-end projects. This will come as well in another
   phase.

   Note that here is as well inversion of control. Sometimes the
   structure of your projects is dicatated. 


** Bootstrap - HTML/CSS Framework, minor Javascript stuff (Generally used for creating nice UI quickly)

   As mentioned on the wiki page:

   #+begin_quote
Bootstrap is a free and open-source CSS framework directed at
responsive, mobile-first front-end web development. It contains HTML,
CSS and (optionally) JavaScript-based design templates for typography,
forms, buttons, navigation, and other interface components.
   #+end_quote

   So essentially once you have this framework you can go on the
   bootstrap webpage, and for instance under components you can see
   how to implement all of these elements mentioned above.

   You can then copy such snippets and you will have nicely formatted
   stuff and like this you will be able to quickly create your
   front-ends. 
   

** Javascript Component and general Javascript Frameworks (More used for handling your middle layer between HTMLs and Server Calls.)

   So I never worked so far with the two: /Angular/, /React/.

   From my understanding these are two frameworks that are used for
   quickly and elegantly write your javascript code and in general the
   components of the front-end that sits between your server calls and
   the html page.

   So note that it is smth different in comparison to the Bootstrap
   framework. Do not confuse the two.

   Understand as well the following general concepts. 
   
*** On the virtual DOMs

    I have to double check this, either with someone or online. I
    understood in any case that most of the modern frameworks create
    the entire DOM via javascript objects and then render the DOM from
    these.

    From here the idea of /[[https://mfrachet.github.io/create-frontend-framework/vdom/intro.html][virtual DOM]]/[fn:1]. The concept is that it
    is easier to modify in memory javascript objects and just
    re-trigger a DOM tree modification upon given events.

    This makes the experience much smoother.

    In general another thing that I guess you have to keep into memory
    is what information you want to show and what not. Experienced
    users might get access to information quite easily if you do not
    think about the things properly.

*** General Web APIS

    You can check about the set of available APIs in the browsers
    [[https://developer.mozilla.org/en-US/docs/Web/API][here]].

    This is the basis for building solid web programs and UI. All of
    the frameworks build upon this.

    You can check there first in the case you want to implement
    something yourself in the web.

    Below some important APIs that is important to get. 
    
**** On Fetch vs. Ajax

     Here as well a minor note. Nothing big but Ajax is something that
     you see every now and then so it makes sense as well to put that
     in a mental box.

     Basically, once more the idea is that, the javascript runtime in
     the browser allows you to create less static logic.

     You can trigger the relevant calls to the backend servers and
     fetch data from it.

     However important is to make this in an asynchronous way in order
     not to freeze your browser. Check at the vido in [[https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/][this post]] to make
     the point concrete.

     Now note that different browsers and browser versions expose a
     different set of technologies and expose different APIs.

     So Ajax is actually the old school way of doing such calls. In any
     case it is the most widely accepted; meaning it works both on
     newer browser and older.

     The general concept was the following and still applies in modern
     APIs as well.

     #+begin_export html
      <img src="../../images/Screenshot 2022-08-17 095424.png" class="center">
     #+end_export

     Fetch and other more modern APIs are the new way of doing the
     asynchronous calls to fetch information from the backend server
     and apply the desired logic then to the front-end. 
    



    
** On Templates

   Templates are a way to display information on the user's
   browser. It aims to describe what we want to show.

   With them it is easy to generate html code based on variables.

   In this sense, it is a way to make html webpages less static.

   It is your way of emebedding the information from the *model* into
   the *view* that will be then displayed to the user in the classical
   [[https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller][MVC architecture]].

   Note now that the applications we use do not make use of any
   javascript frameworks, but make extensive use of Mustache as a
   template engine.

   Therefore, you better learn it a little bit as if you will need to
   play with the front-end it will make the task less tedious and you
   will gain quite some speed. 
   
*** Mustache

    Mustache is a web framework  that is *logicless*.

    That is important. It means that there are no if-else statements
    nor for loops.

    Note that how the framework actually works is then in the following
    way:

    - you define a template with your ={{}}= - i.e. the mustaches
      containing your variables that you will pass to the template
      dynamically. 

    - you compile the framework.

    Note then the following schema for using the framework.

    #+begin_src plantuml :file ../../images/mustache.png :exports none :results drawer
@startuml
(*) -right-> "Create template in the form <b>MYNAME.mustache</b>"

 -right->"Create a <b>MYNAME</b> class where you save the parameters 
     you pass to the template.

     The fields must be equivalent to the ones in the mustaches."

 -right-> "Compile the mustache template"

 -down-> "Execute the compiled mustache template passing it 
           the necessary object containing the parameterized fields.

	   Flush the results to a stringwriter.   
	  "

  --> (*)
@enduml
    #+end_src

    #+RESULTS:
    :results:
    [[file:../../images/mustache.png]]
    :end:

    #+begin_export html
     <img src="../../images/mustache.png" class="center">
    #+end_export

    Note that this is just the basics but it is sufficient to get an
    idea for the moment.

    What you are missing then is the following:

    - passing a list of objects. then if setting properly tags you will
      generate a template containing all of the entries for the objects in
      the list.

      I guess it is therefore the way to do dynamic allocation etc. 

    - tags that are triggered just when you pass an empty list, a
      non-existing key of a map, a false or null.

      i.e. you trigger this generally to display info for the case of
      abnormal events.

    - tags processing lambda function. I.e you can for instance use a
      =Function<Object, Object>= and the result from it will be passed to
      to the appropriate tag.

    You can read more of the above cases [[https://www.baeldung.com/mustache][here]]. Just go there when you need.
    

** JQuery

   As per the official webpage:

   #+begin_quote
   jQuery is a fast, small, and feature-rich JavaScript library. It
   makes things like HTML document traversal and manipulation, event
   handling, animation, and Ajax much simpler with an easy-to-use API
   that works across a multitude of browsers. With a combination of
   versatility and extensibility, jQuery has changed the way that
   millions of people write JavaScript.
   #+end_quote
   

** Tricks when using DevTools on your Browser

   So essentially it is important that you do not have to redeploy
   your application all of the time. You can make modifications to
   your DOM directly in the DevTools console in your browser.

   This will increase the development speed.

   On the top of it leverage the following thing:
   
   #+begin_export html
    <img src="../../images/Screenshot 2022-08-16 173327.png" class="center">
   #+end_export

   Like this hover over the relevant pieces that your are interested
   in your front-end and you will find the relevant html section
   corresponding to it.

   With it it will be easier to navigate the DOM, test and apply the
   relevant javascript snippets that you are interested in.

   
*** When developing on localhost

    I am starting to work with multiple applications. In a
    microservices way.

    I am as well starting to tweak into the front-end of the
    applications.

    Note now that I was having issues relating to [[https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS][CORS]]. Now this was
    causing me a bit of pain. I checked at [[https://spring.io/guides/gs/rest-service-cors/][this]] in order to understand
    the CORS issue in spring and how to allow a different address but
    I was still struggling. I.e. still getting errors.

    It helped to start to inspect the precise HTTP request. There I
    could check the origin paramter, and I could see that there was no
    port bounded to it, while in my Spring application I did apply
    this as parameter. It turns out that probably this was removed due
    to [[https://developer.chrome.com/blog/referrer-policy-new-chrome-default/#:~:text=%23%20What%20does%20this%20change%20mean,the%20path%20and%20query%20string.][this.]]

    In order to do this leverage the devtools optionality. Then
    trigger your call - via a button or however the application logic
    is.

    Then go in the networking tab, you can select there the window
    where the request was sent. You can select it and inspect the
    happened communication and precise HTTP communication.

    
    #+begin_export html
     <img src="../../images/Screenshot 2022-08-19 144503.png" class="center">
    #+end_export

    See the window selected - the whiter rectangle - and the
    communication the little blue rectangle within it. 


** How to navigate the DOM

   I still have to read thoroughly how to do it in order to get an
   even greater understanding of the thing.

   In general understand that the very high level pattern and concept
   is the following:
   
   #+begin_export html
    <img src="../../images/Screenshot 2022-08-19 095656.png" class="center">
   #+end_export

   Note that the children methods as well the siblings concepts hold
   for each node level in the DOM.


* Footnotes

[fn:1] This website is interesting in general for exploring front-end
web frameworks.
