#+BEGIN_COMMENT
.. title: Python - My Projects Strucuture
.. slug: python-my-projects-strucuture
.. date: 2021-07-01 16:03:15 UTC+02:00
.. tags: Python
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT

Here are some notes about how to set up a project.

I will use this strucuture in the following projects I will have to
do.

For the last project I set up the project from scratch and I think
that I finally found my way to structure Python Projects in the right
way.

Right way - this means - a way that satisfies the following properties:

- It is modular. This is extremely important. If you manage to work in
  a modular way by clearly separating logical structures you might use
  some of these structures for further projects you will work on. 

- It is portable - by the very same argument explained above. 

- It is minimal - no double effort

- It has strong logic - i.e. it is clear what modules and sub-modules
  represent.

I will go into structure and some examples of how to reach such
components next.

Note again that this is my second larger project where starting from a
green field I could set everything up. You might want to change and
expand on this structure in following projects.

Please, do so and do not forget to expand on that.

{{{TEASER_END}}}


* General Basic Strucutre

  Starting from the very beginning the general structure for the
  project would look as follows. 

#+begin_example
.
├── libraries
├── log
├── Dockerfile
├── postman
├── src
└── test
#+end_example

  This general structure is motived by the following:

  - =libraries=: here you have the libraries you work with for your
    project in a text file. like this it will be possible for your
    peers or yourself to download all the necessary dependencies when
    creating a new virtual environment or pushing to the cloud.

  - =log=: here is a module that will hold the logged information of
    your application. this is especially important for doing properly
    devOps. Especially when pushing to the cloud you will have the
    possibility to double check at later moments important logged
    situations. You can then trigger mail alters based on the type of
    the logs etc. 

  - =postman=: here you save all of your endpoints when you test them
    together with all the typical payloads etc. It is especially
    useful when you define and expand RESTful API such that you can
    quickly share them with your team and so that they can test and
    try your endpoints. This especially when they work in the
    back-end without being exposed through web-interfaces. 

  - =src=: the actual code for the project.

  - =test=: the actual tests for the project.

  I will explore the =src= repo structure next.

* On the Structure of the Source Code
