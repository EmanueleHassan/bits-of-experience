#+BEGIN_COMMENT
.. title: Ein - Ipython Notebooks in Emacs
.. slug: ein-ipython-notebooks-in-emacs
.. date: 2020-06-21 21:15:24 UTC+02:00
.. tags: emacs
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT


I recently decided to switch from using =ob-ipython= to =ein= for
working with the ipython kernel on Emacs. I was quite satisfied with
the first but I noticed it was not maintained anymore, while there
seems to be quite a lot of activity around =ein=. I therefore decided
to stay up to date in order to benefit from the development in the
second package.

This post summarizes the major things that makes it possible and the
key workflow to operate through =EIN= properly.

{{{TEASER_END}}}


** General Instructions
:properties:
:header-args:ein-python: :session http://127.0.0.1:8888/EIN.ipynb  
:end:


 This is a nice thing. Better than ob-ipython.

 Check at [[https://www.youtube.com/watch?v=OB9vFu9Za8w][this video]] to understand the power and it works well with
 =org-mode= as possible to see in the chunck below.

 To start the jupyter kernel you can use the following command

 ~ein:jupyter-start-server~

 To stop the server you can then enter

 ~ein:jupyter-stop-server~

 You can even try to login to a remote server.

 #+NAME: 518E2BE9-7D8C-4335-A733-0F8674FDE414
 #+begin_src ein-python :session localhost :results output
 a = 14500
 print(a)
 #+end_src

 n: 14500

 Interesting if you go in your =Ibuffer= there is an EIN ipynb runtime
 that is bounded to your org mode commands. There you can enter freely
 the commands you want an experiment over there.

 The buffer is called =*ein: http://localhost:8888/.ein-python.ipynb* =

 For instance defying the variable b over there you can then call it
 over here in this org script.

 #+NAME: 860558FE-1593-41AC-9259-31E569275127
 #+begin_src ein-python :session localhost :results output
 b = 7
 print (b)
 #+end_src

 *How to run a ipython server and make it publicly accessible*

 https://ipython.org/ipython-doc/3/notebook/public_server.html


  Notice that without specifying anything ein will open a default
  notebook without virtualenvironment. To specify the virtualenvironment
  you have to follow the next steps.

  Once you did this; you can simply select the desired kernel from your
  notebooklist.

  Finally, after launching a new notebook connected to such kernel you
  can bind your ein-python chuncks specifying the correct session
  argument as below.

  Once you define the session correctly and an ipynb is started
  correctly the next time you do not have to iterate the procedure
  above. It is sufficient to run =C-c= in the babal chunck and ein will
  automatically start the correct notebook.


  #+NAME: 5C2A9600-C1B2-455F-B467-7A76832C0A11
  #+begin_src ein-python :session http://127.0.0.1:8888/EIN.ipynb :results output
  import sys
  import os
  import json
  import pandas as pd

  def read_json(file_path):
      with open(file_path) as f:
          return json.load(f)

  sys.path.append(os.path.abspath('/Users/marcohassan/Desktop/IBM_projects/SchutzRettung/module-analytics/app/src/algorithms/utils/'))
  from tokens import extract_tokens

  from nltk.metrics.scores import precision

  from fuzzywuzzy import fuzz

  def get_tokens(text):

      """
      Gets the tokenized question
      """
      return extract_tokens(text, stopwords=True, lemmatization = True,
					 stemming=False, ngrams=0)
  #+end_src


  Good now you are ready to go and switch from =ob-ipython= to =ein=.
  You have moreover many interesting commands on EIN when editing
  directly the jupyter notebooks; for instance you can there split the
  chuncks with =C-c C-s=.

  Notice however that for this the kitchin's group has also code that
  you might copy.

** Add kernel to jupyter

To check which kernel are installed on your jupyter notebook server
you can run

#+BEGIN_SRC sh
jupyter kernelspec list
#+END_SRC

#+RESULTS:
| Available  | kernels:                                              |
| treeschutz | /Users/marcohassan/Library/Jupyter/kernels/treeschutz |
| python3    | /usr/local/share/jupyter/kernels/python3              |

It is then possible to add a virtualenvironment in the following way

#+BEGIN_SRC sh
# activate virtualenvironment
source ~/Desktop/python_venv/spark/bin/activate

# download jupyter
pip3 install jupyter

# Add the virtualenvironment kernel
<virtual_env>/bin/ipython kernel install --name "spark" --user
#+END_SRC

#+BEGIN_SRC sh
jupyter kernelspec list
#+END_SRC

#+RESULTS:
| Available  | kernels:                                              |
| spark      | /Users/marcohassan/Library/Jupyter/kernels/spark      |
| treeschutz | /Users/marcohassan/Library/Jupyter/kernels/treeschutz |
| python3    | /usr/local/share/jupyter/kernels/python3              |

To remove a specific kernel you can then use

#+BEGIN_SRC sh
jupyter kernelspec uninstall <unwanted_kernel>
#+END_SRC

Notice that the kernelspec list must be of the type above with
=/usr/local/share/jupyter/kernels/python3= as path. Otherwise
something breaks and the virtualenvironment is not active for the
kernel.

** Switch your Ipython Kernel

Now that you have multiple iypthon kernels you have to be careful and
check that your ipython notebook is connected to the right kernel for
the job you want to perform.

For that one you can either first create an =ipynb= from the notebook
server selecting the correct kernel you need to use. You can then
specify such notebook as the session argument as above.

Otherwise you can directly execute a cell in org. And later on the
opened notebook use the emacs function =ein:notebook-switch-kernel=.
