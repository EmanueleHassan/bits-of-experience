#+BEGIN_COMMENT
.. title: Object Relational Mapping
.. slug: object-relational-mapping
.. date: 2022-07-05 13:54:32 UTC+02:00
.. tags: oop, dev, software-engineering, Databases
.. category: 
.. link: 
.. description: 
.. type: text

#+END_COMMENT

So basically the idea of object relational mapping is the one of
mapping relational tables to objects.

The idea is that a lot of times the application logic is in objects
while the persistency layer is in the relational schema.

That translation is annoying and time consuming. Plus it requires a
mind switch to think at the two different levels.

The idea of this technology was essentially to develop a framework to
map the relational persistency layer to the ORM paradigm. In such a
way it is possible for the developer to wire his mind into a single
setting - the one of the objects and to properly develop in a pure
object oriented mind.

In this sense this is a lot what is happening in the NoSQL space,
especially with the document store and the json communication format
for API.. the underlying driver must is the same.... avoid all of that
annoying conversions from one paradigm to the other.

So you see it always think in terms of concepts... you will anticipate
the future once you focus on the underlying driver and force instead
of on the concept itself.

In general much of these notes refer to the [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjbwuWh_eH4AhVDwQIHHW0vC9sQFnoECA8QAQ&url=https%3A%2F%2Fhoclaptrinhdanang.com%2Fdownloads%2Fpdf%2Fspring%2FJava%2520Persistence%2520with%2520Hibernate.pdf&usg=AOvVaw0524Xl7sPIrS85z5EARMyP][following book]].

{{{TEASER_END}}}


** Important Concepts leading to ORM

   So this is very important.

   It must sit in a very important way in your brain.

   Cause this topic is very hot in the team and it is at least good
   that you have an understanding of going into one direction or the
   other.

   So interesting to see is that much of the topics discussed that
   follow come from thinking in terms of objects and the respective
   shortcoming when going 

   
*** Problem of Granularity

    The idea is that in the OOP world you have lots of level of
    granularity through which you can create and shape your objects.

    These are very important as through them you can create very
    sophisticated business logic.

    Now when working with SQL the point is essentially that such
    /level of granularity is lost/.

    It is generally not a big practice to work with =user-defined data
    types= in SQL relational DBs. You generally work at two level of
    granularity - tables and columns with the SQL standard data
    types. 

    The key now is essentially the following:

    #+begin_quote
Many simple persistence mechanisms fail to recognize this mismatch and
so end up forcing the less flexible representation of SQL products on
the object-oriented model, effectively flattening it.
    #+end_quote

**** TODO the book claims for a solution to the above problem - find it and integrate it here then.
   
*** The problem of Subtypes

*** 

*** 
