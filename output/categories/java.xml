<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about java)</title><link>https://emanuelehassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://emanuelehassan.github.io/bits-of-experience/categories/java.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Tue, 13 Feb 2024 12:53:09 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>On the Java Garbage Collector</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/on-the-java-garbage-collector/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This post contains some information around Garbage Collectors.
&lt;/p&gt;

&lt;p&gt;
It is important to understand this as this has important consequences
when writing your code.
&lt;/p&gt;

&lt;p&gt;
Think for instance about the ORM and how the instances are garbage
collected in JPA.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/on-the-java-garbage-collector/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/on-the-java-garbage-collector/</guid><pubDate>Tue, 15 Nov 2022 09:47:24 GMT</pubDate></item><item><title>On the Correct Library Versioning Scheme</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/on-the-correct-library-versioning-scheme/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So basically this is a very quick post on how to properly version your
libraries.
&lt;/p&gt;

&lt;p&gt;
Essentially, you will use it in both of your python packages twine
uploads and in your gradle java libraries packages. 
&lt;/p&gt;

&lt;p&gt;
Moreover, it is important as once you appreciate the proper way of
versioning libraries you will understand why Azure DevOps prevents you
from uploading two libraries with the same version - or let's say to
overwrite the thing. 
&lt;/p&gt;

&lt;p&gt;
You will understand that this actually happens as a way to indicate
you that you should comply with standard versioning systems used
across the world.
&lt;/p&gt;

&lt;p&gt;
In general there are two different schools of working with the general
versioning schema. You should decide which school you want to comply
with. I will explore the both in this post. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/on-the-correct-library-versioning-scheme/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>Python</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/on-the-correct-library-versioning-scheme/</guid><pubDate>Mon, 26 Sep 2022 11:07:34 GMT</pubDate></item><item><title>On Multithreading</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/on-multithreading/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So apparently this is a thing that I will have to master sooner or
later.
&lt;/p&gt;

&lt;p&gt;
I am not a fun of it as I know it gets tricky to write solid programs
with mulit-threading when complexity increases.
&lt;/p&gt;

&lt;p&gt;
For a solution that I am trying to construct I will need that bit.
&lt;/p&gt;

&lt;p&gt;
This for two reasons:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;the existing solution uses it; meaning that it is beneficial for
you to read and understand it in order for understand the current
design and borrow from it.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
your new solution would either have flavours of it or use queues. I
am rather inclined for the second but I promised to provide a
solution for both and this is what I am currently working for.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Update:&lt;/i&gt; after one day I could set up a working solution with
multithreading. Was not too difficult. But it is just at conceptual
level. The gist of it is more less along &lt;a href="https://alyssaq.github.io/2014/how-do-I-return-a-http-response-to-caller-and-continue-processing/"&gt;these&lt;/a&gt; lines.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I am not an extremely low level programmer due to my background. At
least not so far. So this is the reason I do not conceptually like the
thing and would prefer to go with a much more simple queueing
solution.
&lt;/p&gt;

&lt;p&gt;
I learned in life that you should not stop in front of your conceptual
barriers. You should be aware of your gaps and taking extra care when
making a step in that direction so that you do not hurt yourself, but
by baby steps everything is possible. This is how we learn since
inception.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>Python</category><category>software-engineering</category><category>threading</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/on-multithreading/</guid><pubDate>Wed, 13 Apr 2022 14:47:16 GMT</pubDate></item><item><title>Deploying Webapps in Azure</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So starting to make a little bit of order and starting to deploy
directly to Azure.
&lt;/p&gt;

&lt;p&gt;
That is nothing fancy at all. Just basics stuff. With it you can start
to properly experiment in your Sandbox. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>azure</category><category>java</category><category>Python</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/</guid><pubDate>Mon, 21 Mar 2022 15:34:55 GMT</pubDate></item><item><title>Integration and Asynchronous Jobs</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/asynchronous-jobs/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
So new post.
&lt;/p&gt;

&lt;p&gt;
This is mainly about some integration exercise. It is not simple to
set up properly integration patterns. You can refer to &lt;a href="https://www.enterpriseintegrationpatterns.com/index.html"&gt;the following&lt;/a&gt;
for a general overview.
&lt;/p&gt;

&lt;p&gt;
So let's start to explore.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/asynchronous-jobs/"&gt;Read more…&lt;/a&gt; (17 min remaining to read)&lt;/p&gt;</description><category>Integration</category><category>IT Architecture</category><category>java</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/asynchronous-jobs/</guid><pubDate>Thu, 24 Feb 2022 14:43:59 GMT</pubDate></item><item><title>Spring</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/spring/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
So this is the next piece of the cake. As we transition to the cloud
it makes sense to have the spring-framework in your skillset.
&lt;/p&gt;

&lt;p&gt;
The notes are based on Spring in Action - 5th edition.
&lt;/p&gt;

&lt;p&gt;
I must say that is not too far from the way I used to develop in
Python. Of course you have some Java-based falvour here and
there. Sometimes with pros sometimes with cons. There are things were
I still believe that Python is clearly superior. So ultimately my goal
is to go in a direction of microservices with reactive architectures
mixing the best of breed.
&lt;/p&gt;

&lt;p&gt;
Anyways here and there I skipped some sections. Will go back to them
later when the work will require it.
&lt;/p&gt;

&lt;p&gt;
Note that as per my usual way of working I read, make notes, such that
when I work many things should be already familiar and you should have
a high-level understanding of an application written through such
framework.
&lt;/p&gt;

&lt;p&gt;
Then of course experience is the one where you fix/crystallize all of
these concepts. That comes with time nothing to add.
&lt;/p&gt;

&lt;p&gt;
Creative will then make you deviate from the general structure you
learned.
&lt;/p&gt;

&lt;p&gt;
You just have to be careful to document everything then as it should
always be possible for an external to join and take over your work.
&lt;/p&gt;

&lt;p&gt;
This is the bit I learned from my current recent experience.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/spring/"&gt;Read more…&lt;/a&gt; (66 min remaining to read)&lt;/p&gt;</description><category>java</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/spring/</guid><pubDate>Wed, 02 Feb 2022 15:46:56 GMT</pubDate></item><item><title>Java Testing</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/java-testing/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I am starting to deliver some solutions on some minor features on
some applications.
&lt;/p&gt;

&lt;p&gt;
There was quite a bit of work to be done in the last couple of
months. I mean I had to get up and running with Java, reverse engineer
some bit of application, write documentation etc. I am slowly getting
up to speed. I have still quite a few things on my mind and I guess
that to reach the point where I would like to be it will be another
6-12 months but I am moving at a &lt;i&gt;decent&lt;/i&gt; speed so that I am not
complaining too much.
&lt;/p&gt;

&lt;p&gt;
The structure and challenges of the job gets clearer everyday so that
is fine - now it is a question of adapting and working strategically
to overcome the various issues.
&lt;/p&gt;

&lt;p&gt;
The next bit that is on the list is about testing. This post deals
with it. I am ready to get up and running with it and start to write
well-covered software. In a further step you can then imagine some
further integration with tools as &lt;a href="https://en.wikipedia.org/wiki/SonarQube"&gt;sonarqube&lt;/a&gt; etc.
&lt;/p&gt;

&lt;p&gt;
Cool. Starting to test seriously. Like this we can soon set up serious
devOps pipelines.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/java-testing/"&gt;Read more…&lt;/a&gt; (37 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>testing</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/java-testing/</guid><pubDate>Thu, 27 Jan 2022 15:20:12 GMT</pubDate></item><item><title>Java 8 - Functional Programming</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/java-8-functional-programming/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
I used to keep these notes together with the general notes on the Java
language.
&lt;/p&gt;

&lt;p&gt;
As that file was growing too big and as functional programming is such
a neat and revolutionizing feature introduced with Java 8, I have
decided to separate the notes in this separate blog entry.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/java-8-functional-programming/"&gt;Read more…&lt;/a&gt; (17 min remaining to read)&lt;/p&gt;</description><category>functional-programming</category><category>java</category><category>parallelization</category><category>streaming</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/java-8-functional-programming/</guid><pubDate>Fri, 24 Dec 2021 18:36:32 GMT</pubDate></item><item><title>Microservices &amp; Java</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/microservices-java/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
Notes based on &lt;a href="https://developers.redhat.com/media-download-confirmation?tcDownloadFileName=Kubernetes-native-microservices-ebook-v3.pdf&amp;amp;tcRedirect=5000&amp;amp;tcSrcLink=https://developers.redhat.com/content-gateway/developers/Kubernetes-native-microservices-ebook-v3.pdf&amp;amp;p=Media:+Kubernetes+Native+Microservices+Ebook&amp;amp;pv=v3&amp;amp;tcDownloadURL=https://access.cdn.redhat.com/developers/Kubernetes-native-microservices-ebook-v3.pdf?_auth_=1639834492_4a7529fa776a83612c3fae41e4b878b8"&gt;kubernetes native development with quarkus and
microprofile&lt;/a&gt;. This is one of the books available on the red-hat
developer website. From my personal experience these are good and
red-hat is in fact a strong company - great products are coming out of
it and they seem to deliver quality products throughout time.
&lt;/p&gt;

&lt;p&gt;
They know that space and it is a very interesting to my mind so I am
taking a bit to make some notes and organize thoughts around it.
&lt;/p&gt;

&lt;p&gt;
Note as well &lt;a href="https://github.com/wso2/reference-architecture/blob/master/api-driven-microservice-architecture.md"&gt;this resource&lt;/a&gt; and &lt;a href="https://microservices.io/index.html"&gt;as well this&lt;/a&gt; (read there every now and
then).
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/microservices-java/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;</description><category>java</category><category>kubernetes</category><category>quarkus</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/microservices-java/</guid><pubDate>Mon, 20 Dec 2021 19:09:40 GMT</pubDate></item><item><title>Java Debugging</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/java-debugging/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
So it is time to start some serious post and exploration on Java
debugging.
&lt;/p&gt;

&lt;p&gt;
Note that I believe that having the right tooling is paramount of
performing a job well. It can save you a lot of time that is worth.
&lt;/p&gt;

&lt;p&gt;
So this post will contain all of the concepts in order to properly
work with the debugger.
&lt;/p&gt;

&lt;p&gt;
Cause yeah… we all know about breakpoints… but you better start to
properly work with conditional breakpoints, trace-points, watchpoints,
time-reversion features etc.
&lt;/p&gt;

&lt;p&gt;
As always in the IT world, lots of heads worked on a thing, so you
start to dig and you will never end. You simply open a pandora box.
&lt;/p&gt;

&lt;p&gt;
I will start easy withe the basics and then I will start to dig a
little bit deeper into more advanced stuff.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/java-debugging/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;</description><category>debugging</category><category>dev</category><category>java</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/java-debugging/</guid><pubDate>Sun, 12 Dec 2021 11:32:32 GMT</pubDate></item></channel></rss>