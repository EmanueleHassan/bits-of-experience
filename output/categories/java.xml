<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about java)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/java.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Tue, 18 Jan 2022 17:20:54 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Java 8 - Functional Programming</title><link>https://marcohassan.github.io/bits-of-experience/posts/java-8-functional-programming/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
I used to keep these notes together with the general notes on the Java
language.
&lt;/p&gt;

&lt;p&gt;
As that file was growing too big and as functional programming is such
a neat and revolutionizing feature introduced with Java 8, I have
decided to separate the notes in this separate blog entry.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/java-8-functional-programming/"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>functional-programming</category><category>java</category><category>parallelization</category><category>streaming</category><guid>https://marcohassan.github.io/bits-of-experience/posts/java-8-functional-programming/</guid><pubDate>Fri, 24 Dec 2021 18:36:32 GMT</pubDate></item><item><title>Microservices &amp; Java</title><link>https://marcohassan.github.io/bits-of-experience/posts/microservices-java/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
Notes based on &lt;a href="https://developers.redhat.com/media-download-confirmation?tcDownloadFileName=Kubernetes-native-microservices-ebook-v3.pdf&amp;amp;tcRedirect=5000&amp;amp;tcSrcLink=https%3A%2F%2Fdevelopers.redhat.com%2Fcontent-gateway%2Fdevelopers%2FKubernetes-native-microservices-ebook-v3.pdf&amp;amp;p=Media%3A+Kubernetes+Native+Microservices+Ebook&amp;amp;pv=v3&amp;amp;tcDownloadURL=https%3A%2F%2Faccess.cdn.redhat.com%2Fdevelopers%2FKubernetes-native-microservices-ebook-v3.pdf%3F_auth_%3D1639834492_4a7529fa776a83612c3fae41e4b878b8"&gt;kubernetes native development with quarkus and
microprofile&lt;/a&gt;. This is one of the books available on the red-hat
developer website. From my personal experience these are good and
red-hat is in fact a strong company - great products are coming out of
it and they seem to deliver quality products throughout time.
&lt;/p&gt;

&lt;p&gt;
They know that space and it is a very interesting to my mind so I am
taking a bit to make some notes and organize thoughts around it. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/microservices-java/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>kubernetes</category><category>quarkus</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/microservices-java/</guid><pubDate>Mon, 20 Dec 2021 19:09:40 GMT</pubDate></item><item><title>Java Debugging</title><link>https://marcohassan.github.io/bits-of-experience/posts/java-debugging/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So it is time to start some serious post and exploration on Java
debugging.
&lt;/p&gt;

&lt;p&gt;
Note that I believe that having the right tooling is paramount of
performing a job well. It can save you a lot of time that is worth.
&lt;/p&gt;

&lt;p&gt;
So this post will contain all of the concepts in order to properly
work with the debugger.
&lt;/p&gt;

&lt;p&gt;
Cause yeah… we all know about breakpoints… but you better start to
properly work with conditional breakpoints, trace-points, watchpoints,
time-reversion features etc.
&lt;/p&gt;

&lt;p&gt;
As always in the IT world, lots of heads worked on a thing, so you
start to dig and you will never end. You simply open a pandora box.
&lt;/p&gt;

&lt;p&gt;
I will start easy withe the basics and then I will start to dig a
little bit deeper into more advanced stuff.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/java-debugging/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>debugging</category><category>dev</category><category>java</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/java-debugging/</guid><pubDate>Sun, 12 Dec 2021 11:32:32 GMT</pubDate></item><item><title>Java Application Deployment - Some Vocabulary and high Level Understanding</title><link>https://marcohassan.github.io/bits-of-experience/posts/java-application-deployment-some-vocabulary-and-high-level-understanding/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Through this post you will gain a bit of vocabulary in the Java
world.
&lt;/p&gt;

&lt;p&gt;
This in the sense that you will understand better the deployment of
application. Server side operations etc. for the Java world. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/java-application-deployment-some-vocabulary-and-high-level-understanding/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/java-application-deployment-some-vocabulary-and-high-level-understanding/</guid><pubDate>Sun, 14 Nov 2021 19:25:11 GMT</pubDate></item><item><title>Spring</title><link>https://marcohassan.github.io/bits-of-experience/posts/spring/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So this is the next piece of the cake. As we transition to the cloud
it makes sense to have the spring-framework in your skillset.
&lt;/p&gt;

&lt;p&gt;
The notes are based on Spring in Action - 5th edition.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/spring/"&gt;Read more…&lt;/a&gt; (18 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/spring/</guid><pubDate>Mon, 01 Nov 2021 15:46:56 GMT</pubDate></item><item><title>Gradle</title><link>https://marcohassan.github.io/bits-of-experience/posts/gradle/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So in this post I will make some notes on Gradle.
&lt;/p&gt;

&lt;p&gt;
I could theoretically take it as a black box at work and do my work
with the current configuration.
&lt;/p&gt;

&lt;p&gt;
I prefer to invest some time to understand how it works under the
hood. This will allow me more flexibility in the future. Moreover, it
will allow me to streamline my workflow in emacs once I have a more
profund understanding of it.
&lt;/p&gt;

&lt;p&gt;
These notes are based on the book &lt;a href="https://www.amazon.com/Gradle-Action-Benjamin-Muschko/dp/1617291307"&gt;gradle in action&lt;/a&gt;. Interesting is
that this book works with Groovy, which is apparently a more flexible
Java that introduce some of the concepts of dynamic programming
languages. Look at the &lt;a href="https://www.bbvaapimarket.com/en/api-world/why-groovy-gaining-popularity-among-java-developers/"&gt;following entry&lt;/a&gt; in this sense. I must say that
I can well understand why Python is gaining so much traction over more
heavy languages as Java. It is not simply a thing about the learning
curve. I think that Java with its structured type-safe and OOP
appraoch is more solid than Python for larger system. I see the point
for using it at work. The only thing is that the developing experience
is slower. As you have to compile the entire code before running it,
you cannot develop on the fly and integrate the changes in the more
structured project as you used to do in interpreted languages.
&lt;/p&gt;

&lt;p&gt;
Anyways, back to the book. Note that the book is very exhaustive.
Through it you will manage to get a broad overview on the topic and
you will even get to the point of continous integration and continouos
deployment.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/gradle/"&gt;Read more…&lt;/a&gt; (33 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/gradle/</guid><pubDate>Wed, 20 Oct 2021 07:18:25 GMT</pubDate></item><item><title>To UML and Round-Trip-Engineering</title><link>https://marcohassan.github.io/bits-of-experience/posts/to-uml-and-round-trip-engineering/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
The more I work on this project, the more sure I get. You need a
proper way to document your code structure. To jump into the source
base is otherwise extremly hard for freshies like me. On the top of it
given the amount of packages we need to maintain and expand I highly
doubt that it is efficient to not have such documentation. The time it
costs to go back and understand the general structure of the project,
even for the lead developer of the project is simply to high.
&lt;/p&gt;

&lt;p&gt;
On the top of it, even a relative fresher into OOP as me, could find
some fundamental holes in the program logic here and there, in the
code base of a project. I must say that the developement of the
project is still ongoing, so I must check with the colleagues if they
are aware of such holes. In any case, I am pretty much sure that parts
of the fundamental holes result by a lack of high-level meta-overview
of the classes and interdependencies. Such holes may easily evolve in
such larger projects, that you touch across longer time horizons
without having the clear structure all of the time in your mind.
&lt;/p&gt;

&lt;p&gt;
If you are missing the macro at some point the micro will reign and
the micro is usually nasty. The macro should lead your way of project
understanding. The micro should be just a modular low-level
intervention dictated by the macro.
&lt;/p&gt;

&lt;p&gt;
Recall this. And work in such a way, otherwise things will come to
hunt back to you and your peace in future. 
&lt;/p&gt;

&lt;p&gt;
In this sense I started quickly to explore for a couple of hours some
UML tools and their integration with the eclipse IDE.
&lt;/p&gt;

&lt;p&gt;
Here some notes. I hope that in this sense I will have a proper
workflow in this dimension in the next couple of months.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/to-uml-and-round-trip-engineering/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>software-engineering</category><category>uml</category><guid>https://marcohassan.github.io/bits-of-experience/posts/to-uml-and-round-trip-engineering/</guid><pubDate>Thu, 14 Oct 2021 07:55:33 GMT</pubDate></item><item><title>Emacs as Java IDE via LSP</title><link>https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I will work quite a lot with Java in the next couple of years. So I
have to properly set up a strong IDE and workflow for working in it.
&lt;/p&gt;

&lt;p&gt;
I know that the majority of the people do not think much of emacs in
terms of IDE but since the language-server-protocol integrations I
believe they can be as strong as more mainstream IDEs such as Visual
Code out there. t.
&lt;/p&gt;

&lt;p&gt;
I even think that they can be better once you get into it
enough. After a bit of research I am quite sure about the fact.
&lt;/p&gt;

&lt;p&gt;
In fact this was my experience with Python and now the step is simply
to get ot that level of costumization with emacs. So here some notes
on my way of making emacs a top environment for java and improve my
productivity with it in the long-term.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/"&gt;Read more…&lt;/a&gt; (13 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/emacs-as-java-ide-via-lsp/</guid><pubDate>Wed, 29 Sep 2021 16:03:15 GMT</pubDate></item><item><title>Java Notes - History, Syntax and Tricks</title><link>https://marcohassan.github.io/bits-of-experience/posts/java-notes-history-syntax-and-tricks/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
Java should become my major programming lanaguage in the next
years. The goal is to get proficient at in a couple of months.
&lt;/p&gt;

&lt;p&gt;
I think it is a good thing cause as a programmer the fact that I was
never was exposed to Java was in fact a pity. Many of the most
interesting software of 21st century is written in Java (think of
Hadoop stack, Kafka &amp;amp; Co.). While coming from the world of data
science I see the point for python I must say that once you have
extremely wide productive systems it might very well make sense to use
a more structured language as Java. Plus you should get up to speed
the functional language possibilities of Java available from Java 8
on. I think that this might boost even more the Java lanaguage and
make it a strong candidate for python-alike workflows.
&lt;/p&gt;

&lt;p&gt;
That said let's go. Enjoy this new ride and absorb the language.
&lt;/p&gt;

&lt;p&gt;
Note that all of the notes about the general syntax of the language
come from "Java the complete reference - 7th edition (Herbert
Schildt)" publicly available on the world wide web at &lt;a href="https://gfgc.kar.nic.in/sirmv-science/GenericDocHandler/138-a2973dc6-c024-4d81-be6d-5c3344f232ce.pdf"&gt;this url&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/java-notes-history-syntax-and-tricks/"&gt;Read more…&lt;/a&gt; (110 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><guid>https://marcohassan.github.io/bits-of-experience/posts/java-notes-history-syntax-and-tricks/</guid><pubDate>Fri, 17 Sep 2021 14:38:55 GMT</pubDate></item></channel></rss>