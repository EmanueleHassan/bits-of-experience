<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about frameworks)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/frameworks.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Fri, 30 Sep 2022 07:33:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>On Programs Design</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-programs-design/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I am continuing my journeys into proper and solid software
engineering.
&lt;/p&gt;

&lt;p&gt;
Basically, I always used frameworks and in my first experience it was
out of question whether to use them. But the things were more short
term and now that the software that I am touching is very long lived
the situation is different.
&lt;/p&gt;

&lt;p&gt;
In fact, the topic around framework and which exactly to use is a hot
topic in our team. Some prefer to avoid them as much as possible. Some
are heavy proponents of them.
&lt;/p&gt;

&lt;p&gt;
As always it is ultimately a trade-off question. I am writing here
some points in order to make such trade-offs more explicit.
&lt;/p&gt;

&lt;p&gt;
In fact the way you decide to set up your software - such as trhoguh
inversion of control as when using frameworks or via simple libraries
and toolkits -, as well the task that the software is required to
complete will ultimately define the way you should set up and
program.
&lt;/p&gt;

&lt;p&gt;
This is the ultimate reason why there should be a thorough design
phase before touching any bit of code and immersing yourself into
it. What you do not design today will come to hunt you down tomorrow.
&lt;/p&gt;

&lt;p&gt;
Depending on the choice of your software set up you should as well
make strategic decisions that go hand in hand with it. This is the aim
of this post; to make this explicit. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-programs-design/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>frameworks</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-programs-design/</guid><pubDate>Fri, 26 Aug 2022 07:46:35 GMT</pubDate></item></channel></rss>