<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about emacs)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Fri, 07 Feb 2020 12:38:25 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python Virtual Environment and Ob-ipython Kernel Connession</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-virtual-environment-and-ob-ipython-kernel-connession/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This post briefly introduce the creation of a virtual environment and
the initiation of a kernel active on that virtual environment. 
&lt;/p&gt;

&lt;p&gt;
Finally it discusses how to connect to the kernel running given its
ports specifications.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-virtual-environment-and-ob-ipython-kernel-connession/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-virtual-environment-and-ob-ipython-kernel-connession/</guid><pubDate>Fri, 07 Feb 2020 10:18:48 GMT</pubDate></item><item><title>Tramp Mode</title><link>https://marcohassan.github.io/bits-of-experience/posts/tramp-mode/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;br&gt;
&lt;br&gt;

&lt;p&gt;
This is possibly not even a post. Rather a quick entry but I like my
blog with the different tags to find the material quickly.
&lt;/p&gt;

&lt;p&gt;
I started recently using tramp mode to ssh into some Raspberry devices
as I got some &lt;i&gt;TJbots&lt;/i&gt; to play with. 
&lt;/p&gt;

&lt;p&gt;
I was aware that with tramp mode you could simply ssh into a file and
edit it from your local device, no &lt;i&gt;nano&lt;/i&gt; or such horrible programs
needed. Moreover you keep your IoT device thin as you don't have to
install any special software on it.
&lt;/p&gt;

&lt;p&gt;
However, I was missing a proper shell on it. It turned out that if you
start an &lt;code&gt;eshell&lt;/code&gt; while being sshed into a file on your IoT device
via tramp mode you will have your wonderful &lt;code&gt;eshell&lt;/code&gt; written
completely in emacs and customizable according to your needs, with all
of the nice auto-completition on the top of it. 
&lt;/p&gt;

&lt;p&gt;
There seems to be some overhead, as sometimes it reacts sluggishly
however this is hardly noticeable and a great way to work on remote
devices to my mind.
&lt;/p&gt;</description><category>emacs</category><guid>https://marcohassan.github.io/bits-of-experience/posts/tramp-mode/</guid><pubDate>Wed, 29 Jan 2020 16:08:07 GMT</pubDate></item><item><title>Local Variables &amp; MobileOrg</title><link>https://marcohassan.github.io/bits-of-experience/posts/localvar/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;
During the last couple of weeks I completed an emacs integration I
desired to complete since long time. I managed to fully synchronize my
emacs calendar with an online one.
&lt;/p&gt;

&lt;p&gt;
This allows me to have an integrated look and finally work on a
consistent agenda across devices to organize myself better. It
moreover allows me to have a quick glimpse on my agenda in emacs.
&lt;/p&gt;

&lt;p&gt;
In order to do that I relied on &lt;a href="https://cestlaz.github.io/posts/using-emacs-26-gcal/"&gt;this&lt;/a&gt; nice video of &lt;i&gt;C'est la Z&lt;/i&gt;. The
basic idea is to integrate the Emacs Calendar and synchronize it with
your Google Calendar such that each time you open your agenda on Emacs
your org-agenda will be imported in the Google Calendar and conversely
the Google Calendar entries will be integrated into your org
agenda. You can find the details of the step up in the above link and
this will not be discussed in the post.
&lt;/p&gt;

&lt;p&gt;
Nonetheless, I further enriched the approach with an integration via
&lt;code&gt;mobileorg&lt;/code&gt;. This allows me to write new entries in my agenda directly
from my mobile and allows me a more emacs-focused approach and better
deletion and archiving possibilities in comparison to working on the
Google Calendar on my phone. The structure is the following.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/localvar/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>org-mode</category><guid>https://marcohassan.github.io/bits-of-experience/posts/localvar/</guid><pubDate>Tue, 14 Jan 2020 21:06:12 GMT</pubDate></item><item><title>Paredit</title><link>https://marcohassan.github.io/bits-of-experience/posts/paredit/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;
Paredit is a nice tool to quickly deal with parenthesis when
coding. Thorough simple commands it lets you easily edit content
wrapped in parenthesis, move quickly the parenthesis themselves 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/paredit/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>parenthesis</category><guid>https://marcohassan.github.io/bits-of-experience/posts/paredit/</guid><pubDate>Sat, 17 Aug 2019 16:21:43 GMT</pubDate></item><item><title>PySpark Set-Up and Integration with Emacs</title><link>https://marcohassan.github.io/bits-of-experience/posts/pyspark-set-up/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;
This post aims at providing an overview of the necessary steps
required in order to leverage Apache Spark through the Python API and
the PySpark module.
&lt;/p&gt;

&lt;p&gt;
Despite the information is vastly reported over the internet my usual
&lt;i&gt;procedere&lt;/i&gt; when I deal with new tools and software is to write a
short piece of note when learning new software that is intended as an
overview over the tool and serve as a beginner cheat sheet.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/pyspark-set-up/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Big Data</category><category>emacs</category><category>Spark</category><guid>https://marcohassan.github.io/bits-of-experience/posts/pyspark-set-up/</guid><pubDate>Mon, 05 Aug 2019 21:51:11 GMT</pubDate></item></channel></rss>