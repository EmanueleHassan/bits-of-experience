<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about dev)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/dev.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Sat, 09 Jul 2022 16:29:32 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Object Relational Mapping</title><link>https://marcohassan.github.io/bits-of-experience/posts/object-relational-mapping/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;

img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So basically the idea of object relational mapping is the one of
mapping relational tables to objects.
&lt;/p&gt;

&lt;p&gt;
The idea is that a lot of times the application logic is in objects
while the persistency layer is in the relational schema.
&lt;/p&gt;

&lt;p&gt;
That translation is annoying and time consuming. Plus it requires a
mind switch to think at the two different levels.
&lt;/p&gt;

&lt;p&gt;
The idea of this technology was essentially to develop a framework to
map the relational persistency layer to the ORM paradigm. In such a
way it is possible for the developer to wire his mind into a single
setting - the one of the objects and to properly develop in a pure
object oriented mind.
&lt;/p&gt;

&lt;p&gt;
In this sense this is a lot what is happening in the NoSQL space,
especially with the document store and the json communication format
for API.. the underlying driver must is the same…. avoid all of that
annoying conversions from one paradigm to the other.
&lt;/p&gt;

&lt;p&gt;
So you see; always think in terms of drivers… you will anticipate
the future once you focus on the underlying driver and force instead
of on the concept itself.
&lt;/p&gt;

&lt;p&gt;
In general much of these notes refer to the &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjbwuWh_eH4AhVDwQIHHW0vC9sQFnoECA8QAQ&amp;amp;url=https%3A%2F%2Fhoclaptrinhdanang.com%2Fdownloads%2Fpdf%2Fspring%2FJava%2520Persistence%2520with%2520Hibernate.pdf&amp;amp;usg=AOvVaw0524Xl7sPIrS85z5EARMyP"&gt;following book&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/object-relational-mapping/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Databases</category><category>dev</category><category>oop</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/object-relational-mapping/</guid><pubDate>Tue, 05 Jul 2022 11:54:32 GMT</pubDate></item><item><title>Java Debugging</title><link>https://marcohassan.github.io/bits-of-experience/posts/java-debugging/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So it is time to start some serious post and exploration on Java
debugging.
&lt;/p&gt;

&lt;p&gt;
Note that I believe that having the right tooling is paramount of
performing a job well. It can save you a lot of time that is worth.
&lt;/p&gt;

&lt;p&gt;
So this post will contain all of the concepts in order to properly
work with the debugger.
&lt;/p&gt;

&lt;p&gt;
Cause yeah… we all know about breakpoints… but you better start to
properly work with conditional breakpoints, trace-points, watchpoints,
time-reversion features etc.
&lt;/p&gt;

&lt;p&gt;
As always in the IT world, lots of heads worked on a thing, so you
start to dig and you will never end. You simply open a pandora box.
&lt;/p&gt;

&lt;p&gt;
I will start easy withe the basics and then I will start to dig a
little bit deeper into more advanced stuff.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/java-debugging/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>debugging</category><category>dev</category><category>java</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/java-debugging/</guid><pubDate>Sun, 12 Dec 2021 11:32:32 GMT</pubDate></item><item><title>On the Full-Cycle Development Model</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-the-full-cycle-development-model/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
This is a brief reminder - &lt;a href="https://www.infoq.com/presentations/netflix-devops/"&gt;on being a full-cycle developer&lt;/a&gt; and the its
implications. 
&lt;/p&gt;</description><category>dev</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-the-full-cycle-development-model/</guid><pubDate>Fri, 22 Oct 2021 15:46:00 GMT</pubDate></item></channel></rss>