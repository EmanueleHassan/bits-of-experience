<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about IT Architecture)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/it-architecture.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Wed, 11 May 2022 12:16:59 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>GUnicorn Deployment Options</title><link>https://marcohassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;

img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So basically this is closing the circle. With this post you should
gain the final understanding of the proper way of deploying a python
application in production, meaning it should give you a flavour of how
possible configurations settings that will affect the number of
requests that your application can handle as well your hardware
resources utilization.
&lt;/p&gt;

&lt;p&gt;
So basically this post touches upon the topic of workers, threads
etc. and the way to configure everything. It is good to understand
this in the context of &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;this post&lt;/a&gt; as well.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>Python</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/</guid><pubDate>Mon, 25 Apr 2022 09:16:23 GMT</pubDate></item><item><title>Integration and Asynchronous Jobs</title><link>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So new post.
&lt;/p&gt;

&lt;p&gt;
This is mainly about some integration exercise. It is not simple to
set up properly integration patterns. You can refer to &lt;a href="https://www.enterpriseintegrationpatterns.com/index.html"&gt;the following&lt;/a&gt;
for a general overview.
&lt;/p&gt;

&lt;p&gt;
So let's start to explore.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/"&gt;Read more…&lt;/a&gt; (17 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Integration</category><category>IT Architecture</category><category>java</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/</guid><pubDate>Thu, 24 Feb 2022 14:43:59 GMT</pubDate></item><item><title>Managing State in Cloud Native Applications</title><link>https://marcohassan.github.io/bits-of-experience/posts/managing-state-in-cloud-native-applications/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So this post deals on how to keep the state of the applicaiton in the
new microservices era.
&lt;/p&gt;

&lt;p&gt;
This is a &lt;a href="https://thenewstack.io/the-state-of-state-in-cloud-native-applications/"&gt;major question&lt;/a&gt; in the cloud-native app development
paradigma. You can summarize the issue as following:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;you want your apps to be stateless such that it is easy to scale and
heal (recover) them.&lt;/li&gt;

&lt;li&gt;you need to keep track of some states in your overall logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Note now that you have to create a suitable architecture that makes
the both objectives possible.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/managing-state-in-cloud-native-applications/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/managing-state-in-cloud-native-applications/</guid><pubDate>Wed, 23 Feb 2022 12:25:08 GMT</pubDate></item><item><title>On a Brownfield Play</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-a-brownfield-play/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So this post is about playing on brown-fields.
&lt;/p&gt;

&lt;img src="https://marcohassan.github.io/bits-of-experience/images/brownfield.gif" class="center"&gt;

&lt;p&gt;
This should become one of the most important posts that you will
develop in your professional experience.
&lt;/p&gt;

&lt;p&gt;
Why?
&lt;/p&gt;

&lt;p&gt;
I think that people that worked on serious software projects that goes
a little bit beyond the calssical chatting level or idealist
discussion will agree on that: software projects are nasty. And here
my strong claim - software projects that are long lived are the most
nasty among them all.
&lt;/p&gt;

&lt;p&gt;
Funnily enough, it is much easier - and &lt;b&gt;satisfying&lt;/b&gt; - to develop a
solution from scratch, even if a pioneering solution, than to start
dealing and &lt;b&gt;entering as an outsider&lt;/b&gt; in a long lived project.
&lt;/p&gt;

&lt;p&gt;
This is my new life. I am lucky to like challenges, cause otherwise it
would not be fun at all. But I was - by will or not - well tempered so
far in this dimension so I am happy to embrace a new challenge.
&lt;/p&gt;

&lt;p&gt;
So this post sets a little bit of context for the claim above and will
make the way for successfully dealing with these kind of projects -
the most easy to fail.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-a-brownfield-play/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>software-engineering</category><category>Time Management and Mind-Set</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-a-brownfield-play/</guid><pubDate>Fri, 26 Nov 2021 14:55:16 GMT</pubDate></item><item><title>On Classical Architectures</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-classical-architectures/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;



&lt;p&gt;
I was told a story once.
&lt;/p&gt;

&lt;p&gt;
It is about the way Da Vinci used to draw. Well I will expose it in
this post and how it is related to architectural patterns.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-classical-architectures/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-classical-architectures/</guid><pubDate>Thu, 04 Nov 2021 10:37:41 GMT</pubDate></item><item><title>On Enterprise Applications Architecture</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-enterprise-applications-architecture/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So having moved out of the field of PoC/MvP I must say that I am
starting to understand the difficulties around setting up virtuous
enterprise applications.
&lt;/p&gt;

&lt;p&gt;
You have complex processes and lots of possible solutions. You have to
be agile and nimble. This is the only way to manage the complexity and
still be able to steer your application in a smooth way, in order to
keep up with the technological progress.
&lt;/p&gt;

&lt;p&gt;
This is the ultimate challenge of the job. The complex business logic
calls for complex solutions. I.e. usually when you are under pressure
you make direct mappings of the required business logic into a
system. Without abstracting and without imposing meta-structure the
system gets heavy and looses that nimble and agile component.
&lt;/p&gt;

&lt;p&gt;
In order to deal with the issues above, I started to read &lt;a href="http://ce.sharif.edu/courses/97-98/2/ce418-1/resources/root/Books/Patterns%20of%20Enterprise%20Application%20Architecture%20-%20Martin%20Fowler.pdf"&gt;Patterns of
Enterprise Application Architecture&lt;/a&gt;, here some notes -mainly copy and
past - such that I will hopefully learn in a fast way to make the
right decisions when working on enterprise applications.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-enterprise-applications-architecture/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-enterprise-applications-architecture/</guid><pubDate>Mon, 01 Nov 2021 13:21:20 GMT</pubDate></item><item><title>Some Notes about UML and PlantUml</title><link>https://marcohassan.github.io/bits-of-experience/posts/some-notes-about-uml-and-plantuml/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
I already posted about the set-up of plantuml &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This is a very hand tool to manage complexity. In my new position
complexity is all around and over me.
&lt;/p&gt;

&lt;p&gt;
The system is big and you need to keep cold blood, strucutre and
overview. I think this will be the main challange. In this sense the
best way for me to operate will be to create good technical
documentation of the system that I can always refer to.
&lt;/p&gt;

&lt;p&gt;
Emacs is a very good friend in this sense. With all of the tags and
&lt;code&gt;TODO&lt;/code&gt;, &lt;code&gt;ISSUES&lt;/code&gt; workflow it will be possible for me to store the
general structure of the system and to keep a log and search across it
in order to manage such huge complexity.
&lt;/p&gt;

&lt;p&gt;
Such tagged documentation in combination with the possibility to
export my notes in very readable &lt;code&gt;html&lt;/code&gt; documents and the possibility
to write architectural diagrams via &lt;code&gt;plantuml&lt;/code&gt; will be my big ally in
this in new challenge.
&lt;/p&gt;

&lt;p&gt;
You can then store such &lt;code&gt;html&lt;/code&gt; in blob stores and make them available
across the team.
&lt;/p&gt;

&lt;p&gt;
Here some notes on resources you can refere to when writing your
architectural diagrams and general documentation for your projects.
&lt;/p&gt;

&lt;p&gt;
Find the official documentation &lt;a href="http://plantuml.com/en/guide"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/some-notes-about-uml-and-plantuml/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>IT Architecture</category><category>plantuml</category><category>uml</category><guid>https://marcohassan.github.io/bits-of-experience/posts/some-notes-about-uml-and-plantuml/</guid><pubDate>Fri, 01 Oct 2021 09:47:41 GMT</pubDate></item><item><title>On Scalability</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-scalability/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This post quickly examines two different laws of scalability: Amdahl's
law and Gustafson's law.
&lt;/p&gt;

&lt;p&gt;
Both laws addresses the extent to which a problem can be speed up
through scaling out. 
&lt;/p&gt;

&lt;p&gt;
The premise of setting under which the laws operate is
different. Amdahl's law assumes a &lt;b&gt;fix problem size&lt;/b&gt;, while
Gustafson's law assumes an &lt;b&gt;an expanding problem size in the number of
machines scaling out&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-scalability/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-scalability/</guid><pubDate>Fri, 17 Jul 2020 06:43:49 GMT</pubDate></item><item><title>WSGI, APACHE and NGINX</title><link>https://marcohassan.github.io/bits-of-experience/posts/wsgi-apache-and-nginx/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This posts contain a brief overview of the deployment options for
Python applications. It will give a brief overview on the different
web servers types and the necessity for utilizing a WSGI server when
deploying a Python application.
&lt;/p&gt;

&lt;p&gt;
Note that to better make sense of this you should also make sense a
little bit of the different front-end &amp;amp; back-end communication
architectures. A good overview of this is given at &lt;a href="https://build.vsupalov.com/how-backend-and-frontend-communicate/"&gt;this link&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Update 02/2022&lt;/b&gt;: so I am starting to understand the issue
better. Intersting. I switched to Java in the meantime and I must say
the exercise is different and you get a broader exposure to the entire
IT industry through it.
&lt;/p&gt;

&lt;p&gt;
Basically the core difference that is important to understand is about
how the different servers react to incoming requests. Spanning new
threads and blocking them? Or rather in a non-blocking manner?
&lt;/p&gt;

&lt;p&gt;
After all once you understand the issue it is much better to
find the right source addressing the problem.
&lt;/p&gt;

&lt;p&gt;
So now I understand the other programming paradigm. The &lt;a href="https://medium.com/@rarepopa_68087/reactive-programming-with-spring-boot-and-webflux-734086f8c8a5"&gt;reactive
one&lt;/a&gt;. For it you need that newer generation of non-blocking servers.
&lt;/p&gt;

&lt;p&gt;
You can actually understand the issue better by &lt;a href="https://stackoverflow.com/questions/56794263/spring-webflux-differrences-when-netty-vs-tomcat-is-used-under-the-hood"&gt;reading in here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Check in this sense as well &lt;a href="https://stackoverflow.com/questions/10938360/how-many-concurrent-requests-does-a-single-flask-process-receive"&gt;this resource&lt;/a&gt;. You see the same ideas
there. You will have to set up all of these things properly and make
your right guesses otherwise you will have troubles when constructing
your applications.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/wsgi-apache-and-nginx/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>servers</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/wsgi-apache-and-nginx/</guid><pubDate>Tue, 31 Mar 2020 15:51:00 GMT</pubDate></item><item><title>UML Diagrams with PlantUML</title><link>https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;
For my first bigger project I had to construct a flow diagram
describing the architecture of a back-end model analytics model I am
working on. 
&lt;/p&gt;

&lt;p&gt;
This post briefly discuss on UML and gives the set-up of &lt;code&gt;Plantuml&lt;/code&gt; on
emacs. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>IT Architecture</category><guid>https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/</guid><pubDate>Wed, 25 Mar 2020 10:14:12 GMT</pubDate></item></channel></rss>