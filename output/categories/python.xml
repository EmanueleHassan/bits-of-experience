<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about Python)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Fri, 13 May 2022 14:56:10 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python Testing</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-testing/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So you already worked with python testing frameworks.
&lt;/p&gt;

&lt;p&gt;
The set up was already in place back then.
&lt;/p&gt;

&lt;p&gt;
Now it is more than a year that I do not touch the thing and
everything is solidly gone.
&lt;/p&gt;

&lt;p&gt;
Luckily I have a repo on my Github with some structure of it.
&lt;/p&gt;

&lt;p&gt;
Will leverage that now, plus I will start to write some notes, such
that people that will have to collaborate with me can reference to
it.
&lt;/p&gt;

&lt;p&gt;
On the top of it, it will be useful for the future as well.
&lt;/p&gt;

&lt;p&gt;
Plus finally it is always nice to see the things in multiple
languages. It is always the same story. By adding pieces to the puzzle
the picture becomes systematically clearer not the opposite. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-testing/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>software-engineering</category><category>testing</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-testing/</guid><pubDate>Thu, 12 May 2022 11:35:32 GMT</pubDate></item><item><title>SQL Alchemy</title><link>https://marcohassan.github.io/bits-of-experience/posts/sql-alchemy/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So basically I am starting to leverage the correct stack in this
field.
&lt;/p&gt;

&lt;p&gt;
This will help me to properly and quickly navigate the data.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/sql-alchemy/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Databases</category><category>Python</category><category>sql</category><guid>https://marcohassan.github.io/bits-of-experience/posts/sql-alchemy/</guid><pubDate>Wed, 11 May 2022 07:57:08 GMT</pubDate></item><item><title>GUnicorn Deployment Options</title><link>https://marcohassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;

img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So basically this is closing the circle. With this post you should
gain the final understanding of the proper way of deploying a python
application in production, meaning it should give you a flavour of how
possible configurations settings that will affect the number of
requests that your application can handle as well your hardware
resources utilization.
&lt;/p&gt;

&lt;p&gt;
So basically this post touches upon the topic of workers, threads
etc. and the way to configure everything. It is good to understand
this in the context of &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;this post&lt;/a&gt; as well.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>Python</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/</guid><pubDate>Mon, 25 Apr 2022 09:16:23 GMT</pubDate></item><item><title>Asynchronous Schema in Python</title><link>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This post briefly summarizes the learnings from this &lt;a href="https://realpython.com/python-async-features/#reader-comments"&gt;other post&lt;/a&gt;. Read
it if you have time before reading this, as I intend to keep this
quite short and juicy.  
&lt;/p&gt;

&lt;p&gt;
I really liked that post, it did give me some overview of some new
methods in python I was not aware of.
&lt;/p&gt;

&lt;p&gt;
Get familiar with the terms in the article. Albeit these article are
101, the terms are pretty much in line with the wider literature.
&lt;/p&gt;

&lt;p&gt;
Note that this post sum-up is basically about asynchronous programming
via &lt;a href="https://en.wikipedia.org/wiki/Cooperative_multitasking"&gt;cooperative multitasking&lt;/a&gt;. This is in contrast to &lt;a href="https://www.techtarget.com/whatis/definition/preemptive-multitasking#:~:text=Preemptive%20multitasking%20is%20task%20in,another%20task%20is%20called%20preempting."&gt;preemptive
multitasking&lt;/a&gt; which is used by OS-level threading mechanism as done via
the &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;Threading&lt;/a&gt; module in Python.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/</guid><pubDate>Mon, 18 Apr 2022 06:58:20 GMT</pubDate></item><item><title>On Multithreading</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So apparently this is a thing that I will have to master sooner or
later.
&lt;/p&gt;

&lt;p&gt;
I am not a fun of it as I know it gets tricky to write solid programs
with mulit-threading when complexity increases.
&lt;/p&gt;

&lt;p&gt;
For a solution that I am trying to construct I will need that bit.
&lt;/p&gt;

&lt;p&gt;
This for two reasons:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;the existing solution uses it; meaning that it is beneficial for
you to read and understand it in order for understand the current
design and borrow from it.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
your new solution would either have flavours of it or use queues. I
am rather inclined for the second but I promised to provide a
solution for both and this is what I am currently working for.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Update:&lt;/i&gt; after one day I could set up a working solution with
multithreading. Was not too difficult. But it is just at conceptual
level. The gist of it is more less along &lt;a href="https://alyssaq.github.io/2014/how-do-I-return-a-http-response-to-caller-and-continue-processing/"&gt;these&lt;/a&gt; lines.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I am not an extremely low level programmer due to my background. At
least not so far. So this is the reason I do not conceptually like the
thing and would prefer to go with a much more simple queueing
solution.
&lt;/p&gt;

&lt;p&gt;
I learned in life that you should not stop in front of your conceptual
barriers. You should be aware of your gaps and taking extra care when
making a step in that direction so that you do not hurt yourself, but
by baby steps everything is possible. This is how we learn since
inception.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>Python</category><category>software-engineering</category><category>threading</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/</guid><pubDate>Wed, 13 Apr 2022 14:47:16 GMT</pubDate></item><item><title>Deploying Webapps in Azure</title><link>https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So starting to make a little bit of order and starting to deploy
directly to Azure.
&lt;/p&gt;

&lt;p&gt;
That is nothing fancy at all. Just basics stuff. With it you can start
to properly experiment in your Sandbox. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>azure</category><category>java</category><category>Python</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/</guid><pubDate>Mon, 21 Mar 2022 15:34:55 GMT</pubDate></item><item><title>Python Virtual-Env Etc. Set Up</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-virtual-env-etc-set-up/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I quickly took time to fix the Python issue. I could first download
just the portable version of it due to security issues.
&lt;/p&gt;

&lt;p&gt;
But then it was just a pain to configure pip and to get all of the
proper configuration to work with virtualenvironments.
&lt;/p&gt;

&lt;p&gt;
I also did not want to live like a moroon and not work with virtual
environments knowing that it will come to hit me back at some
point. Plus when the transition to the cloud will be completed and a
more solid microservices approach will be in place it will be
essential to have virtual environments for having all of the needed
dependencies for each project and just load these into your docker
image/container.
&lt;/p&gt;

&lt;p&gt;
The same holds for these very heavy and ugly solutions such as conda
and friends.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-virtual-env-etc-set-up/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-virtual-env-etc-set-up/</guid><pubDate>Mon, 08 Nov 2021 16:01:22 GMT</pubDate></item><item><title>On Python Structures - Understand it to understand how to properly organize your Projects</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-python-structures-understand-it-to-understand-how-to-properly-organize-your-projects/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I finally took some time to go over the documentation and make some
notes about the different naming conventions and some basics
structures you should get when building larger projects.
&lt;/p&gt;

&lt;p&gt;
I just finished a third larger python project and I am by now
conscious of the strength of well organized code. It can save you a
very big amount of time, especially when your projects start to grow
very large and it becomes difficult to keep a clean mental structure
over the code-base.
&lt;/p&gt;

&lt;p&gt;
I therefore started to write a couple of posts where I am writing and
will update my way of working and structuring projects. I will expand
on it in time once my knowledge will expand and more sophistication
will occur.
&lt;/p&gt;

&lt;p&gt;
This particular posts deals with the basics structures that you have
to understand to properly set up projects and manage to well deal with
larger code-bases. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-python-structures-understand-it-to-understand-how-to-properly-organize-your-projects/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-python-structures-understand-it-to-understand-how-to-properly-organize-your-projects/</guid><pubDate>Wed, 07 Jul 2021 08:50:22 GMT</pubDate></item><item><title>Python - My Projects Strucuture</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-my-projects-strucuture/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Here are some notes about how to set up a project.
&lt;/p&gt;

&lt;p&gt;
I will use this strucuture in the following projects I will have to
do.
&lt;/p&gt;

&lt;p&gt;
For the last project I set up the project from scratch and I think
that I finally found my way to structure Python Projects in the right
way.
&lt;/p&gt;

&lt;p&gt;
Right way - this means - a way that satisfies the following properties:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;It is modular. This is extremely important. If you manage to work in
a modular way by clearly separating logical structures you might use
some of these structures for further projects you will work on.&lt;/li&gt;

&lt;li&gt;It is portable - by the very same argument explained above.&lt;/li&gt;

&lt;li&gt;It is minimal - no double effort&lt;/li&gt;

&lt;li&gt;It has strong logic - i.e. it is clear what modules and sub-modules
represent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I will go into structure and some examples of how to reach such
components next.
&lt;/p&gt;

&lt;p&gt;
Note again that this is my second larger project where starting from a
green field I could set everything up. You might want to change and
expand on this structure in following projects.
&lt;/p&gt;

&lt;p&gt;
Please, do so and do not forget to expand on that.
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;
&lt;b&gt;Update 04/04/2022&lt;/b&gt;: so I started working on more serious projects. I
noted the importance of sticking to standards. I note that this post
does not comply to any standard. It came out of my particular way of
working. That is fine but before going big on this structure you
should probably rather make a more thorough research on existing
standards and possibly migrate this structure to it. In such a way it
will be easier for external people to understand what you are doing
without too much investigation.
&lt;/p&gt;

&lt;p&gt;
Despite of this, good to write such posts. Will help in a couple of
years your new team-mates to enter the work you have done.
&lt;/p&gt;

&lt;p&gt;
So it is a good time for starting a new post soon that will be the
synthesis of your experience that far. (As I am not doing it right now
as I have to keep the things moving, I store here some links:
&lt;a href="https://stackoverflow.com/questions/193161/what-is-the-best-project-structure-for-a-python-application"&gt;project&lt;sub&gt;structure&lt;/sub&gt;&lt;/a&gt;, &lt;a href="https://stackoverflow.com/questions/1471994/what-is-setup-py"&gt;setup&lt;sub&gt;file&lt;/sub&gt;&lt;/a&gt;). It is as well time to start writing
&lt;a href="https://earthly.dev/blog/python-makefile/"&gt;Makefiles&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Then you can simply pass this and execute this in Docker &amp;amp; Co. and
other similar operations platforms. 
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-my-projects-strucuture/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-my-projects-strucuture/</guid><pubDate>Thu, 01 Jul 2021 14:03:15 GMT</pubDate></item><item><title>Python Pipelines</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-pipelines/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;

&lt;p&gt;
Pipelines are important when working on ML projects in python. They
first appeared through the implementation of ML tasks sklearn. There
the design setting of the maintainer of the library was to design a
set of APIs through which to govern the entire ML process. The three
major class of APIs are &lt;code&gt;tranformers&lt;/code&gt;, i.e. transformations to the
feature and dependent variables, &lt;code&gt;estimators&lt;/code&gt;, i.e. the ML model that
you fit on your transformed features matrix, and finally &lt;code&gt;predictors&lt;/code&gt;,
i.e. the API method used for predicting your desired variable based on
your fitted estimator.
&lt;/p&gt;

&lt;p&gt;
The above logic became so widespread that further important
libraries - such as the spark ML modules for using ML models
leveraging the spark engine for distributed computation - decided to
keep the same design setting and keep the above API structure.
&lt;/p&gt;

&lt;p&gt;
This posts aims at keeping an overview of some important transformers,
estimators and predictors as well as to set up the general framework
to combine the three together in easy to use Pipelines. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-pipelines/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Machine Learning</category><category>Python</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-pipelines/</guid><pubDate>Thu, 02 Jul 2020 10:44:32 GMT</pubDate></item></channel></rss>