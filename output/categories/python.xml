<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about Python)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Sun, 28 Nov 2021 10:06:36 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python Virtual-Env Etc. Set Up</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-virtual-env-etc-set-up/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I quickly took time to fix the Python issue. I could first download
just the portable version of it due to security issues.
&lt;/p&gt;

&lt;p&gt;
But then it was just a pain to configure pip and to get all of the
proper configuration to work with virtualenvironments.
&lt;/p&gt;

&lt;p&gt;
I also did not want to live like a moroon and not work with virtual
environments knowing that it will come to hit me back at some
point. Plus when the transition to the cloud will be completed and a
more solid microservices approach will be in place it will be
essential to have virtual environments for having all of the needed
dependencies for each project and just load these into your docker
image/container.
&lt;/p&gt;

&lt;p&gt;
The same holds for these very heavy and ugly solutions such as conda
and friends.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-virtual-env-etc-set-up/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-virtual-env-etc-set-up/</guid><pubDate>Mon, 08 Nov 2021 16:01:22 GMT</pubDate></item><item><title>On Python Structures - Understand it to understand how to properly organize your Projects</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-python-structures-understand-it-to-understand-how-to-properly-organize-your-projects/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So I finally took some time to go over the documentation and make some
notes about the different naming conventions and some basics
structures you should get when building larger projects.
&lt;/p&gt;

&lt;p&gt;
I just finished a third larger python project and I am by now
conscious of the strength of well organized code. It can save you a
very big amount of time, especially when your projects start to grow
very large and it becomes difficult to keep a clean mental structure
over the code-base.
&lt;/p&gt;

&lt;p&gt;
I therefore started to write a couple of posts where I am writing and
will update my way of working and structuring projects. I will expand
on it in time once my knowledge will expand and more sophistication
will occur.
&lt;/p&gt;

&lt;p&gt;
This particular posts deals with the basics structures that you have
to understand to properly set up projects and manage to well deal with
larger code-bases. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-python-structures-understand-it-to-understand-how-to-properly-organize-your-projects/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-python-structures-understand-it-to-understand-how-to-properly-organize-your-projects/</guid><pubDate>Wed, 07 Jul 2021 08:50:22 GMT</pubDate></item><item><title>Python - My Projects Strucuture</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-my-projects-strucuture/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
Here are some notes about how to set up a project.
&lt;/p&gt;

&lt;p&gt;
I will use this strucuture in the following projects I will have to
do.
&lt;/p&gt;

&lt;p&gt;
For the last project I set up the project from scratch and I think
that I finally found my way to structure Python Projects in the right
way.
&lt;/p&gt;

&lt;p&gt;
Right way - this means - a way that satisfies the following properties:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;It is modular. This is extremely important. If you manage to work in
a modular way by clearly separating logical structures you might use
some of these structures for further projects you will work on.&lt;/li&gt;

&lt;li&gt;It is portable - by the very same argument explained above.&lt;/li&gt;

&lt;li&gt;It is minimal - no double effort&lt;/li&gt;

&lt;li&gt;It has strong logic - i.e. it is clear what modules and sub-modules
represent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
I will go into structure and some examples of how to reach such
components next.
&lt;/p&gt;

&lt;p&gt;
Note again that this is my second larger project where starting from a
green field I could set everything up. You might want to change and
expand on this structure in following projects.
&lt;/p&gt;

&lt;p&gt;
Please, do so and do not forget to expand on that.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-my-projects-strucuture/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-my-projects-strucuture/</guid><pubDate>Thu, 01 Jul 2021 14:03:15 GMT</pubDate></item><item><title>Python Pipelines</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-pipelines/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;br&gt;

&lt;p&gt;
Pipelines are important when working on ML projects in python. They
first appeared through the implementation of ML tasks sklearn. There
the design setting of the maintainer of the library was to design a
set of APIs through which to govern the entire ML process. The three
major class of APIs are &lt;code&gt;tranformers&lt;/code&gt;, i.e. transformations to the
feature and dependent variables, &lt;code&gt;estimators&lt;/code&gt;, i.e. the ML model that
you fit on your transformed features matrix, and finally &lt;code&gt;predictors&lt;/code&gt;,
i.e. the API method used for predicting your desired variable based on
your fitted estimator.
&lt;/p&gt;

&lt;p&gt;
The above logic became so widespread that further important
libraries - such as the spark ML modules for using ML models
leveraging the spark engine for distributed computation - decided to
keep the same design setting and keep the above API structure.
&lt;/p&gt;

&lt;p&gt;
This posts aims at keeping an overview of some important transformers,
estimators and predictors as well as to set up the general framework
to combine the three together in easy to use Pipelines. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-pipelines/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Machine Learning</category><category>Python</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-pipelines/</guid><pubDate>Thu, 02 Jul 2020 10:44:32 GMT</pubDate></item><item><title>When creating a home-made ML model</title><link>https://marcohassan.github.io/bits-of-experience/posts/when-creating-a-home_made-ml-model/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
In this post I go over some beginner mistake and set up the workflow for
further works that involve some custom-created ML model.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/when-creating-a-home_made-ml-model/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Machine Learning</category><category>Python</category><category>Sklearn</category><guid>https://marcohassan.github.io/bits-of-experience/posts/when-creating-a-home_made-ml-model/</guid><pubDate>Wed, 22 Apr 2020 13:34:50 GMT</pubDate></item><item><title>Some Handy Python Tricks </title><link>https://marcohassan.github.io/bits-of-experience/posts/handy-python-packages/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This is a general file where I keep some useful tricks when
programming in Python / new things I learn in the language that helps
me to be more productive or write better code
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/handy-python-packages/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programming</category><category>Python</category><guid>https://marcohassan.github.io/bits-of-experience/posts/handy-python-packages/</guid><pubDate>Tue, 14 Apr 2020 13:15:50 GMT</pubDate></item><item><title>Python EDA</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-eda/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-left: auto;
margin-right: auto;
}
&lt;/style&gt;

&lt;p&gt;
Here some python introduction on how to work with data in the tabular
form and visualization dummy scripts are saved.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-eda/"&gt;Read more…&lt;/a&gt; (25 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-eda/</guid><pubDate>Thu, 19 Mar 2020 12:02:40 GMT</pubDate></item></channel></rss>