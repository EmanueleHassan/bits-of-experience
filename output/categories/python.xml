<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about Python)</title><link>https://emanuelehassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://emanuelehassan.github.io/bits-of-experience/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Fri, 23 Feb 2024 11:47:43 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>On the difference between wheel and sdist</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/on-the-difference-between-wheel-and-sdist/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
So I am using the time off to properly package my python code.
&lt;/p&gt;

&lt;p&gt;
In order to do that I am writing a series of posts: &lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/packaging-python-apps/"&gt;one&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I came across poetry recently. This is a one tool for managing python
packages. 
&lt;/p&gt;

&lt;p&gt;
Before that a step back to the python internals and a brief post in
order to properly understand wheels and sdist - these are two
different builds of your python package.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/on-the-difference-between-wheel-and-sdist/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;</description><category>Python</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/on-the-difference-between-wheel-and-sdist/</guid><pubDate>Mon, 19 Feb 2024 21:03:32 GMT</pubDate></item><item><title>Python Analytics - Sklearn</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/python-analytics-sklearn/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This is a repository where I hold some notes about the major sklearn
analytics algorithm in order to perform your data science. 
&lt;/p&gt;

&lt;p&gt;
It is essentially an exercise into the &lt;a href="https://scikit-learn.org/stable/modules/classes.html"&gt;sklearn API&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
If you have it well in mind than you have well in mind the major ML
algorithms, the way to preprocess the data and the way create robust
pipelines.
&lt;/p&gt;


&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/python-analytics-sklearn/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Analytics</category><category>Python</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/python-analytics-sklearn/</guid><pubDate>Tue, 06 Jun 2023 14:38:45 GMT</pubDate></item><item><title>Python and EIN on new Laptop</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/python-and-ein-on-new-laptop/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
Nothing for the public. 
&lt;/p&gt;

&lt;p&gt;
This is a very personal post in order to understand how you work on
the new laptop. 
&lt;/p&gt;

&lt;p&gt;
I have no time to dig deeper right now and fix the workflow. Have to
go with these shortcuts. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/python-and-ein-on-new-laptop/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;</description><category>emacs</category><category>Python</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/python-and-ein-on-new-laptop/</guid><pubDate>Tue, 06 Jun 2023 13:15:45 GMT</pubDate></item><item><title>On the Correct Library Versioning Scheme</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/on-the-correct-library-versioning-scheme/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So basically this is a very quick post on how to properly version your
libraries.
&lt;/p&gt;

&lt;p&gt;
Essentially, you will use it in both of your python packages twine
uploads and in your gradle java libraries packages. 
&lt;/p&gt;

&lt;p&gt;
Moreover, it is important as once you appreciate the proper way of
versioning libraries you will understand why Azure DevOps prevents you
from uploading two libraries with the same version - or let's say to
overwrite the thing. 
&lt;/p&gt;

&lt;p&gt;
You will understand that this actually happens as a way to indicate
you that you should comply with standard versioning systems used
across the world.
&lt;/p&gt;

&lt;p&gt;
In general there are two different schools of working with the general
versioning schema. You should decide which school you want to comply
with. I will explore the both in this post. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/on-the-correct-library-versioning-scheme/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>Python</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/on-the-correct-library-versioning-scheme/</guid><pubDate>Mon, 26 Sep 2022 11:07:34 GMT</pubDate></item><item><title>Packaging Python Apps</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/packaging-python-apps/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
So this post holds some information around the packaging of python
applications.
&lt;/p&gt;

&lt;p&gt;
This will be handy to enter in the serious development world of the
language.
&lt;/p&gt;

&lt;p&gt;
This touches a lot as well the point of going in direction DevOps and
consequently it will be foundamental to go in direction MLOps.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/packaging-python-apps/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;</description><category>Python</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/packaging-python-apps/</guid><pubDate>Fri, 13 May 2022 07:49:38 GMT</pubDate></item><item><title>Python Testing</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/python-testing/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
So you already worked with python testing frameworks.
&lt;/p&gt;

&lt;p&gt;
The set up was already in place back then.
&lt;/p&gt;

&lt;p&gt;
Now it is more than a year that I do not touch the thing and
everything is solidly gone.
&lt;/p&gt;

&lt;p&gt;
Luckily I have a repo on my Github with some structure of it.
&lt;/p&gt;

&lt;p&gt;
Will leverage that now, plus I will start to write some notes, such
that people that will have to collaborate with me can reference to
it.
&lt;/p&gt;

&lt;p&gt;
On the top of it, it will be useful for the future as well.
&lt;/p&gt;

&lt;p&gt;
Plus finally it is always nice to see the things in multiple
languages. It is always the same story. By adding pieces to the puzzle
the picture becomes systematically clearer not the opposite. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/python-testing/"&gt;Read more…&lt;/a&gt; (13 min remaining to read)&lt;/p&gt;</description><category>Python</category><category>software-engineering</category><category>testing</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/python-testing/</guid><pubDate>Thu, 12 May 2022 11:35:32 GMT</pubDate></item><item><title>SQL Alchemy</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/sql-alchemy/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So basically I am starting to leverage the correct stack in this
field.
&lt;/p&gt;

&lt;p&gt;
This will help me to properly and quickly navigate the data.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/sql-alchemy/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Databases</category><category>Python</category><category>sql</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/sql-alchemy/</guid><pubDate>Wed, 11 May 2022 07:57:08 GMT</pubDate></item><item><title>GUnicorn Deployment Options</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;p&gt;
So basically this is closing the circle. With this post you should
gain the final understanding of the proper way of deploying a python
application in production, meaning it should give you a flavour of how
possible configurations settings that will affect the number of
requests that your application can handle as well your hardware
resources utilization.
&lt;/p&gt;

&lt;p&gt;
So basically this post touches upon the topic of workers, threads
etc. and the way to configure everything. It is good to understand
this in the context of &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;this post&lt;/a&gt; as well.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;</description><category>IT Architecture</category><category>Python</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/</guid><pubDate>Mon, 25 Apr 2022 09:16:23 GMT</pubDate></item><item><title>Asynchronous Schema in Python</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This post briefly summarizes the learnings from this &lt;a href="https://realpython.com/python-async-features/#reader-comments"&gt;other post&lt;/a&gt;. Read
it if you have time before reading this, as I intend to keep this
quite short and juicy.  
&lt;/p&gt;

&lt;p&gt;
I really liked that post, it did give me some overview of some new
methods in python I was not aware of.
&lt;/p&gt;

&lt;p&gt;
Get familiar with the terms in the article. Albeit these article are
101, the terms are pretty much in line with the wider literature.
&lt;/p&gt;

&lt;p&gt;
Note that this post sum-up is basically about asynchronous programming
via &lt;a href="https://en.wikipedia.org/wiki/Cooperative_multitasking"&gt;cooperative multitasking&lt;/a&gt;. This is in contrast to &lt;a href="https://www.techtarget.com/whatis/definition/preemptive-multitasking#:~:text=Preemptive%20multitasking%20is%20task%20in,another%20task%20is%20called%20preempting."&gt;preemptive
multitasking&lt;/a&gt; which is used by OS-level threading mechanism as done via
the &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;Threading&lt;/a&gt; module in Python.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>software-engineering</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/</guid><pubDate>Mon, 18 Apr 2022 06:58:20 GMT</pubDate></item><item><title>On Multithreading</title><link>https://emanuelehassan.github.io/bits-of-experience/posts/on-multithreading/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So apparently this is a thing that I will have to master sooner or
later.
&lt;/p&gt;

&lt;p&gt;
I am not a fun of it as I know it gets tricky to write solid programs
with mulit-threading when complexity increases.
&lt;/p&gt;

&lt;p&gt;
For a solution that I am trying to construct I will need that bit.
&lt;/p&gt;

&lt;p&gt;
This for two reasons:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;the existing solution uses it; meaning that it is beneficial for
you to read and understand it in order for understand the current
design and borrow from it.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
your new solution would either have flavours of it or use queues. I
am rather inclined for the second but I promised to provide a
solution for both and this is what I am currently working for.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Update:&lt;/i&gt; after one day I could set up a working solution with
multithreading. Was not too difficult. But it is just at conceptual
level. The gist of it is more less along &lt;a href="https://alyssaq.github.io/2014/how-do-I-return-a-http-response-to-caller-and-continue-processing/"&gt;these&lt;/a&gt; lines.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I am not an extremely low level programmer due to my background. At
least not so far. So this is the reason I do not conceptually like the
thing and would prefer to go with a much more simple queueing
solution.
&lt;/p&gt;

&lt;p&gt;
I learned in life that you should not stop in front of your conceptual
barriers. You should be aware of your gaps and taking extra care when
making a step in that direction so that you do not hurt yourself, but
by baby steps everything is possible. This is how we learn since
inception.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emanuelehassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>Python</category><category>software-engineering</category><category>threading</category><guid>https://emanuelehassan.github.io/bits-of-experience/posts/on-multithreading/</guid><pubDate>Wed, 13 Apr 2022 14:47:16 GMT</pubDate></item></channel></rss>