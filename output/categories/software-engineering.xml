<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about software-engineering)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/software-engineering.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Thu, 18 Aug 2022 09:32:12 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Object Relational Mapping</title><link>https://marcohassan.github.io/bits-of-experience/posts/object-relational-mapping/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;

img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So basically the idea of object relational mapping is the one of
mapping relational tables to objects.
&lt;/p&gt;

&lt;p&gt;
The idea is that a lot of times the application logic is in objects
while the persistency layer is in the relational schema.
&lt;/p&gt;

&lt;p&gt;
That translation is annoying and time consuming. Plus it requires a
mind switch to think at the two different levels.
&lt;/p&gt;

&lt;p&gt;
The idea of this technology was essentially to develop a framework to
map the relational persistency layer to the ORM paradigm. In such a
way it is possible for the developer to wire his mind into a single
setting - the one of the objects and to properly develop in a pure
object oriented mind.
&lt;/p&gt;

&lt;p&gt;
In this sense this is a lot what is happening in the NoSQL space,
especially with the document store and the json communication format
for API.. the underlying driver must is the same…. avoid all of that
annoying conversions from one paradigm to the other.
&lt;/p&gt;

&lt;p&gt;
So you see; always think in terms of drivers… you will anticipate
the future once you focus on the underlying driver and force instead
of on the concept itself.
&lt;/p&gt;

&lt;p&gt;
In general much of these notes refer to the &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjbwuWh_eH4AhVDwQIHHW0vC9sQFnoECA8QAQ&amp;amp;url=https%3A%2F%2Fhoclaptrinhdanang.com%2Fdownloads%2Fpdf%2Fspring%2FJava%2520Persistence%2520with%2520Hibernate.pdf&amp;amp;usg=AOvVaw0524Xl7sPIrS85z5EARMyP"&gt;following book&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Note as well that as always you can debate about everything and you
shuold think when ORM and Hibernate - in the specific case - is a good
candidate and when not. See &lt;a href="https://www.eversql.com/i-followed-hibernate-orm-to-hell-and-came-back-alive-to-tell-about-it/"&gt;this dude&lt;/a&gt; post in general - also check the
last section. There is interesting referenced material.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/object-relational-mapping/"&gt;Read more…&lt;/a&gt; (28 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Databases</category><category>dev</category><category>oop</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/object-relational-mapping/</guid><pubDate>Tue, 05 Jul 2022 11:54:32 GMT</pubDate></item><item><title>Python Testing</title><link>https://marcohassan.github.io/bits-of-experience/posts/python-testing/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So you already worked with python testing frameworks.
&lt;/p&gt;

&lt;p&gt;
The set up was already in place back then.
&lt;/p&gt;

&lt;p&gt;
Now it is more than a year that I do not touch the thing and
everything is solidly gone.
&lt;/p&gt;

&lt;p&gt;
Luckily I have a repo on my Github with some structure of it.
&lt;/p&gt;

&lt;p&gt;
Will leverage that now, plus I will start to write some notes, such
that people that will have to collaborate with me can reference to
it.
&lt;/p&gt;

&lt;p&gt;
On the top of it, it will be useful for the future as well.
&lt;/p&gt;

&lt;p&gt;
Plus finally it is always nice to see the things in multiple
languages. It is always the same story. By adding pieces to the puzzle
the picture becomes systematically clearer not the opposite. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/python-testing/"&gt;Read more…&lt;/a&gt; (12 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>software-engineering</category><category>testing</category><guid>https://marcohassan.github.io/bits-of-experience/posts/python-testing/</guid><pubDate>Thu, 12 May 2022 11:35:32 GMT</pubDate></item><item><title>Emacs as SQL Client</title><link>https://marcohassan.github.io/bits-of-experience/posts/emacs-as-sql-client/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So now that I have both application languages covered by emacs and
properly set up with lsp it is time to start working on the DB in my
emacs.
&lt;/p&gt;

&lt;p&gt;
This will help me to work via literate programming and have a very
well documented space where to work. On the top of it is nice cause
you can checkout everything properly in git, leverage magit,
projectile, org-mode etc… The usual emacs power so to say. 
&lt;/p&gt;

&lt;p&gt;
In this sense I could already work through jupyter notebooks through
emacs-ein.
&lt;/p&gt;

&lt;p&gt;
You have already set up your connection to the DBs in the language.
&lt;/p&gt;

&lt;p&gt;
You can start working in there in order to explore and combine the
data etc. You can then leverage as well the pandas and other
functionalities in there.
&lt;/p&gt;

&lt;p&gt;
Note that this is also interesting as a working solution. Have to
double check that with Valerio but theoretically you can then generate
ipython notebook out of it and make them run with ADF for the periodic jobs.
&lt;/p&gt;

&lt;p&gt;
Otherwise as mentioned above the other solution is to properly tangle
everything and finally insert everything in scripts to run in your
webapps or wherever you want. 
&lt;/p&gt;

&lt;p&gt;
It would essentially break
&lt;/p&gt;

&lt;p&gt;
The other option is to work via sql client. In any case continue for a
bit to use Azure Management Studio, in such a way you will see what
are the features you are interested in over there etc. and it will
help you to properly set up a client interface with all of the
features you need. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/emacs-as-sql-client/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/emacs-as-sql-client/</guid><pubDate>Wed, 11 May 2022 14:56:33 GMT</pubDate></item><item><title>GUnicorn Deployment Options</title><link>https://marcohassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;

img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So basically this is closing the circle. With this post you should
gain the final understanding of the proper way of deploying a python
application in production, meaning it should give you a flavour of how
possible configurations settings that will affect the number of
requests that your application can handle as well your hardware
resources utilization.
&lt;/p&gt;

&lt;p&gt;
So basically this post touches upon the topic of workers, threads
etc. and the way to configure everything. It is good to understand
this in the context of &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;this post&lt;/a&gt; as well.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>Python</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/gunicorn-deployment-options/</guid><pubDate>Mon, 25 Apr 2022 09:16:23 GMT</pubDate></item><item><title>Load Testing 101</title><link>https://marcohassan.github.io/bits-of-experience/posts/load-testing-101/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So basically you have your PoC concept for the solution right now.
I stress that it is a PoC. Have to take some time to fix some
architectural components that I have in mind. 
&lt;/p&gt;

&lt;p&gt;
There are still a couple of things I have to sort out at conceptual
level.
&lt;/p&gt;

&lt;p&gt;
These belong more to the SRE field but, well you know, here it's a
special breed of a team. You have to deal with everything by your own.
&lt;/p&gt;

&lt;p&gt;
So the thing is that I have now a multi-threaded PoC performing the
solution. I want to test now the threading component and to test
different gunicorn webserver settings.
&lt;/p&gt;

&lt;p&gt;
In the specific I want to stress the system and see how it performs,
meaning how many threads is a good number of threads and when the
performance starts to go bust.
&lt;/p&gt;

&lt;p&gt;
For this I am starting to dig into load testing tools.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/load-testing-101/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>load</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/load-testing-101/</guid><pubDate>Thu, 21 Apr 2022 10:12:00 GMT</pubDate></item><item><title>Asynchronous Schema in Python</title><link>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This post briefly summarizes the learnings from this &lt;a href="https://realpython.com/python-async-features/#reader-comments"&gt;other post&lt;/a&gt;. Read
it if you have time before reading this, as I intend to keep this
quite short and juicy.  
&lt;/p&gt;

&lt;p&gt;
I really liked that post, it did give me some overview of some new
methods in python I was not aware of.
&lt;/p&gt;

&lt;p&gt;
Get familiar with the terms in the article. Albeit these article are
101, the terms are pretty much in line with the wider literature.
&lt;/p&gt;

&lt;p&gt;
Note that this post sum-up is basically about asynchronous programming
via &lt;a href="https://en.wikipedia.org/wiki/Cooperative_multitasking"&gt;cooperative multitasking&lt;/a&gt;. This is in contrast to &lt;a href="https://www.techtarget.com/whatis/definition/preemptive-multitasking#:~:text=Preemptive%20multitasking%20is%20task%20in,another%20task%20is%20called%20preempting."&gt;preemptive
multitasking&lt;/a&gt; which is used by OS-level threading mechanism as done via
the &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;Threading&lt;/a&gt; module in Python.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/</guid><pubDate>Mon, 18 Apr 2022 06:58:20 GMT</pubDate></item><item><title>On Multithreading</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So apparently this is a thing that I will have to master sooner or
later.
&lt;/p&gt;

&lt;p&gt;
I am not a fun of it as I know it gets tricky to write solid programs
with mulit-threading when complexity increases.
&lt;/p&gt;

&lt;p&gt;
For a solution that I am trying to construct I will need that bit.
&lt;/p&gt;

&lt;p&gt;
This for two reasons:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;the existing solution uses it; meaning that it is beneficial for
you to read and understand it in order for understand the current
design and borrow from it.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
your new solution would either have flavours of it or use queues. I
am rather inclined for the second but I promised to provide a
solution for both and this is what I am currently working for.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Update:&lt;/i&gt; after one day I could set up a working solution with
multithreading. Was not too difficult. But it is just at conceptual
level. The gist of it is more less along &lt;a href="https://alyssaq.github.io/2014/how-do-I-return-a-http-response-to-caller-and-continue-processing/"&gt;these&lt;/a&gt; lines.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I am not an extremely low level programmer due to my background. At
least not so far. So this is the reason I do not conceptually like the
thing and would prefer to go with a much more simple queueing
solution.
&lt;/p&gt;

&lt;p&gt;
I learned in life that you should not stop in front of your conceptual
barriers. You should be aware of your gaps and taking extra care when
making a step in that direction so that you do not hurt yourself, but
by baby steps everything is possible. This is how we learn since
inception.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>Python</category><category>software-engineering</category><category>threading</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/</guid><pubDate>Wed, 13 Apr 2022 14:47:16 GMT</pubDate></item><item><title>Azure Pipelines</title><link>https://marcohassan.github.io/bits-of-experience/posts/azure-pipelines/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So write here a bit of documentation about how to create your DevOps
pipelines.
&lt;/p&gt;

&lt;p&gt;
That will be important as in such a way you can finally abstract from
the lower level stuff.
&lt;/p&gt;

&lt;p&gt;
You just deployed your first webapps on Azure. You did that through a
single gradle command through the gradle plug in.
&lt;/p&gt;

&lt;p&gt;
So in this sense it is easy now to deploy your changes via such
pipelines. You can embedd this over there as a task theoretically.
&lt;/p&gt;

&lt;p&gt;
Other people are taking the lead in this dimension and know much
better how to set up proper env integrated with Jira or similar
boards, so will not spend too much time with it.
&lt;/p&gt;

&lt;p&gt;
This is not interesting to this stage for me. It is just a small test
in order to read pipelines and understand properly what is going on
over there such that you can understand the general workflow.
&lt;/p&gt;

&lt;p&gt;
Note that obviously all of the notes under this page stems directly
from the official Microsoft documentation.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/azure-pipelines/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>azure</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/azure-pipelines/</guid><pubDate>Wed, 23 Mar 2022 12:02:43 GMT</pubDate></item><item><title>Deploying Webapps in Azure</title><link>https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So starting to make a little bit of order and starting to deploy
directly to Azure.
&lt;/p&gt;

&lt;p&gt;
That is nothing fancy at all. Just basics stuff. With it you can start
to properly experiment in your Sandbox. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>azure</category><category>java</category><category>Python</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/</guid><pubDate>Mon, 21 Mar 2022 15:34:55 GMT</pubDate></item><item><title>Integration and Asynchronous Jobs</title><link>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So new post.
&lt;/p&gt;

&lt;p&gt;
This is mainly about some integration exercise. It is not simple to
set up properly integration patterns. You can refer to &lt;a href="https://www.enterpriseintegrationpatterns.com/index.html"&gt;the following&lt;/a&gt;
for a general overview.
&lt;/p&gt;

&lt;p&gt;
So let's start to explore.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/"&gt;Read more…&lt;/a&gt; (17 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Integration</category><category>IT Architecture</category><category>java</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/</guid><pubDate>Thu, 24 Feb 2022 14:43:59 GMT</pubDate></item></channel></rss>