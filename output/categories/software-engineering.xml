<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about software-engineering)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/software-engineering.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Thu, 21 Apr 2022 15:34:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Load Testing 101</title><link>https://marcohassan.github.io/bits-of-experience/posts/load-testing-101/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So basically you have your PoC concept for the solution right now.
I stress that it is a PoC. Have to take some time to fix some
architectural components that I have in mind. 
&lt;/p&gt;

&lt;p&gt;
There are still a couple of things I have to sort out at conceptual
level.
&lt;/p&gt;

&lt;p&gt;
These belong more to the SRE field but, well you know, here it's a
special breed of a team. You have to deal with everything by your own.
&lt;/p&gt;

&lt;p&gt;
So the thing is that I have now a multi-threaded PoC performing the
solution. I want to test now the threading component and to test
different gunicorn webserver settings.
&lt;/p&gt;

&lt;p&gt;
In the specific I want to stress the system and see how it performs,
meaning how many threads is a good number of threads and when the
performance starts to go bust.
&lt;/p&gt;

&lt;p&gt;
For this I am starting to dig into load testing tools.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/load-testing-101/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>load</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/load-testing-101/</guid><pubDate>Thu, 21 Apr 2022 10:12:00 GMT</pubDate></item><item><title>Asynchronous Schema in Python</title><link>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
This post briefly summarizes the learnings from this &lt;a href="https://realpython.com/python-async-features/#reader-comments"&gt;other post&lt;/a&gt;. Read
it if you have time before reading this, as I intend to keep this
quite short and juicy.  
&lt;/p&gt;

&lt;p&gt;
I really liked that post, it did give me some overview of some new
methods in python I was not aware of.
&lt;/p&gt;

&lt;p&gt;
Get familiar with the terms in the article. Albeit these article are
101, the terms are pretty much in line with the wider literature.
&lt;/p&gt;

&lt;p&gt;
Note that this post sum-up is basically about asynchronous programming
via &lt;a href="https://en.wikipedia.org/wiki/Cooperative_multitasking"&gt;cooperative multitasking&lt;/a&gt;. This is in contrast to &lt;a href="https://www.techtarget.com/whatis/definition/preemptive-multitasking#:~:text=Preemptive%20multitasking%20is%20task%20in,another%20task%20is%20called%20preempting."&gt;preemptive
multitasking&lt;/a&gt; which is used by OS-level threading mechanism as done via
the &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;Threading&lt;/a&gt; module in Python.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-schema-in-python/</guid><pubDate>Mon, 18 Apr 2022 06:58:20 GMT</pubDate></item><item><title>On Multithreading</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So apparently this is a thing that I will have to master sooner or
later.
&lt;/p&gt;

&lt;p&gt;
I am not a fun of it as I know it gets tricky to write solid programs
with mulit-threading when complexity increases.
&lt;/p&gt;

&lt;p&gt;
For a solution that I am trying to construct I will need that bit.
&lt;/p&gt;

&lt;p&gt;
This for two reasons:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;the existing solution uses it; meaning that it is beneficial for
you to read and understand it in order for understand the current
design and borrow from it.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
your new solution would either have flavours of it or use queues. I
am rather inclined for the second but I promised to provide a
solution for both and this is what I am currently working for.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Update:&lt;/i&gt; after one day I could set up a working solution with
multithreading. Was not too difficult. But it is just at conceptual
level. The gist of it is more less along &lt;a href="https://alyssaq.github.io/2014/how-do-I-return-a-http-response-to-caller-and-continue-processing/"&gt;these&lt;/a&gt; lines.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I am not an extremely low level programmer due to my background. At
least not so far. So this is the reason I do not conceptually like the
thing and would prefer to go with a much more simple queueing
solution.
&lt;/p&gt;

&lt;p&gt;
I learned in life that you should not stop in front of your conceptual
barriers. You should be aware of your gaps and taking extra care when
making a step in that direction so that you do not hurt yourself, but
by baby steps everything is possible. This is how we learn since
inception.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>Python</category><category>software-engineering</category><category>threading</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-multithreading/</guid><pubDate>Wed, 13 Apr 2022 14:47:16 GMT</pubDate></item><item><title>Azure Pipelines</title><link>https://marcohassan.github.io/bits-of-experience/posts/azure-pipelines/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So write here a bit of documentation about how to create your DevOps
pipelines.
&lt;/p&gt;

&lt;p&gt;
That will be important as in such a way you can finally abstract from
the lower level stuff.
&lt;/p&gt;

&lt;p&gt;
You just deployed your first webapps on Azure. You did that through a
single gradle command through the gradle plug in.
&lt;/p&gt;

&lt;p&gt;
So in this sense it is easy now to deploy your changes via such
pipelines. You can embedd this over there as a task theoretically.
&lt;/p&gt;

&lt;p&gt;
Other people are taking the lead in this dimension and know much
better how to set up proper env integrated with Jira or similar
boards, so will not spend too much time with it.
&lt;/p&gt;

&lt;p&gt;
This is not interesting to this stage for me. It is just a small test
in order to read pipelines and understand properly what is going on
over there such that you can understand the general workflow.
&lt;/p&gt;

&lt;p&gt;
Note that obviously all of the notes under this page stems directly
from the official Microsoft documentation.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/azure-pipelines/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>azure</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/azure-pipelines/</guid><pubDate>Wed, 23 Mar 2022 12:02:43 GMT</pubDate></item><item><title>Deploying Webapps in Azure</title><link>https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So starting to make a little bit of order and starting to deploy
directly to Azure.
&lt;/p&gt;

&lt;p&gt;
That is nothing fancy at all. Just basics stuff. With it you can start
to properly experiment in your Sandbox. 
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>azure</category><category>java</category><category>Python</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/deploying-spring-webapps-in-azure/</guid><pubDate>Mon, 21 Mar 2022 15:34:55 GMT</pubDate></item><item><title>Integration and Asynchronous Jobs</title><link>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So new post.
&lt;/p&gt;

&lt;p&gt;
This is mainly about some integration exercise. It is not simple to
set up properly integration patterns. You can refer to &lt;a href="https://www.enterpriseintegrationpatterns.com/index.html"&gt;the following&lt;/a&gt;
for a general overview.
&lt;/p&gt;

&lt;p&gt;
So let's start to explore.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Integration</category><category>IT Architecture</category><category>java</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/asynchronous-jobs/</guid><pubDate>Thu, 24 Feb 2022 14:43:59 GMT</pubDate></item><item><title>Managing State in Cloud Native Applications</title><link>https://marcohassan.github.io/bits-of-experience/posts/managing-state-in-cloud-native-applications/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
So this post deals on how to keep the state of the applicaiton in the
new microservices era.
&lt;/p&gt;

&lt;p&gt;
This is a &lt;a href="https://thenewstack.io/the-state-of-state-in-cloud-native-applications/"&gt;major question&lt;/a&gt; in the cloud-native app development
paradigma. You can summarize the issue as following:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;you want your apps to be stateless such that it is easy to scale and
heal (recover) them.&lt;/li&gt;

&lt;li&gt;you need to keep track of some states in your overall logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Note now that you have to create a suitable architecture that makes
the both objectives possible.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/managing-state-in-cloud-native-applications/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/managing-state-in-cloud-native-applications/</guid><pubDate>Wed, 23 Feb 2022 12:25:08 GMT</pubDate></item><item><title>Microservices &amp; Java</title><link>https://marcohassan.github.io/bits-of-experience/posts/microservices-java/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
Notes based on &lt;a href="https://developers.redhat.com/media-download-confirmation?tcDownloadFileName=Kubernetes-native-microservices-ebook-v3.pdf&amp;amp;tcRedirect=5000&amp;amp;tcSrcLink=https%3A%2F%2Fdevelopers.redhat.com%2Fcontent-gateway%2Fdevelopers%2FKubernetes-native-microservices-ebook-v3.pdf&amp;amp;p=Media%3A+Kubernetes+Native+Microservices+Ebook&amp;amp;pv=v3&amp;amp;tcDownloadURL=https%3A%2F%2Faccess.cdn.redhat.com%2Fdevelopers%2FKubernetes-native-microservices-ebook-v3.pdf%3F_auth_%3D1639834492_4a7529fa776a83612c3fae41e4b878b8"&gt;kubernetes native development with quarkus and
microprofile&lt;/a&gt;. This is one of the books available on the red-hat
developer website. From my personal experience these are good and
red-hat is in fact a strong company - great products are coming out of
it and they seem to deliver quality products throughout time.
&lt;/p&gt;

&lt;p&gt;
They know that space and it is a very interesting to my mind so I am
taking a bit to make some notes and organize thoughts around it.
&lt;/p&gt;

&lt;p&gt;
Note as well &lt;a href="https://github.com/wso2/reference-architecture/blob/master/api-driven-microservice-architecture.md"&gt;this resource&lt;/a&gt; and &lt;a href="https://microservices.io/index.html"&gt;as well this&lt;/a&gt; (read there every now and
then).
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/microservices-java/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>kubernetes</category><category>quarkus</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/microservices-java/</guid><pubDate>Mon, 20 Dec 2021 19:09:40 GMT</pubDate></item><item><title>Java Debugging</title><link>https://marcohassan.github.io/bits-of-experience/posts/java-debugging/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
So it is time to start some serious post and exploration on Java
debugging.
&lt;/p&gt;

&lt;p&gt;
Note that I believe that having the right tooling is paramount of
performing a job well. It can save you a lot of time that is worth.
&lt;/p&gt;

&lt;p&gt;
So this post will contain all of the concepts in order to properly
work with the debugger.
&lt;/p&gt;

&lt;p&gt;
Cause yeah… we all know about breakpoints… but you better start to
properly work with conditional breakpoints, trace-points, watchpoints,
time-reversion features etc.
&lt;/p&gt;

&lt;p&gt;
As always in the IT world, lots of heads worked on a thing, so you
start to dig and you will never end. You simply open a pandora box.
&lt;/p&gt;

&lt;p&gt;
I will start easy withe the basics and then I will start to dig a
little bit deeper into more advanced stuff.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/java-debugging/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>debugging</category><category>dev</category><category>java</category><category>software-engineering</category><guid>https://marcohassan.github.io/bits-of-experience/posts/java-debugging/</guid><pubDate>Sun, 12 Dec 2021 11:32:32 GMT</pubDate></item><item><title>On a Brownfield Play</title><link>https://marcohassan.github.io/bits-of-experience/posts/on-a-brownfield-play/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;

&lt;p&gt;
So this post is about playing on brown-fields.
&lt;/p&gt;

&lt;img src="https://marcohassan.github.io/bits-of-experience/images/brownfield.gif" class="center"&gt;

&lt;p&gt;
This should become one of the most important posts that you will
develop in your professional experience.
&lt;/p&gt;

&lt;p&gt;
Why?
&lt;/p&gt;

&lt;p&gt;
I think that people that worked on serious software projects that goes
a little bit beyond the calssical chatting level or idealist
discussion will agree on that: software projects are nasty. And here
my strong claim - software projects that are long lived are the most
nasty among them all.
&lt;/p&gt;

&lt;p&gt;
Funnily enough, it is much easier - and &lt;b&gt;satisfying&lt;/b&gt; - to develop a
solution from scratch, even if a pioneering solution, than to start
dealing and &lt;b&gt;entering as an outsider&lt;/b&gt; in a long lived project.
&lt;/p&gt;

&lt;p&gt;
This is my new life. I am lucky to like challenges, cause otherwise it
would not be fun at all. But I was - by will or not - well tempered so
far in this dimension so I am happy to embrace a new challenge.
&lt;/p&gt;

&lt;p&gt;
So this post sets a little bit of context for the claim above and will
make the way for successfully dealing with these kind of projects -
the most easy to fail.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/on-a-brownfield-play/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>IT Architecture</category><category>software-engineering</category><category>Time Management and Mind-Set</category><guid>https://marcohassan.github.io/bits-of-experience/posts/on-a-brownfield-play/</guid><pubDate>Fri, 26 Nov 2021 14:55:16 GMT</pubDate></item></channel></rss>