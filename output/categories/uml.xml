<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bits of Experience (Posts about uml)</title><link>https://marcohassan.github.io/bits-of-experience/</link><description></description><atom:link href="https://marcohassan.github.io/bits-of-experience/categories/uml.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:marco.hassan30@gmail.com"&gt;Marco Hassan&lt;/a&gt; </copyright><lastBuildDate>Thu, 16 Jun 2022 12:57:30 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>To UML and Round-Trip-Engineering</title><link>https://marcohassan.github.io/bits-of-experience/posts/to-uml-and-round-trip-engineering/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;p&gt;
The more I work on this project, the more sure I get. You need a
proper way to document your code structure. To jump into the source
base is otherwise extremly hard for freshies like me. On the top of it
given the amount of packages we need to maintain and expand I highly
doubt that it is efficient to not have such documentation. The time it
costs to go back and understand the general structure of the project,
even for the lead developer of the project is simply to high.
&lt;/p&gt;

&lt;p&gt;
On the top of it, even a relative fresher into OOP as me, could find
some fundamental holes in the program logic here and there, in the
code base of a project. I must say that the developement of the
project is still ongoing, so I must check with the colleagues if they
are aware of such holes. In any case, I am pretty much sure that parts
of the fundamental holes result by a lack of high-level meta-overview
of the classes and interdependencies. Such holes may easily evolve in
such larger projects, that you touch across longer time horizons
without having the clear structure all of the time in your mind.
&lt;/p&gt;

&lt;p&gt;
If you are missing the macro at some point the micro will reign and
the micro is usually nasty. The macro should lead your way of project
understanding. The micro should be just a modular low-level
intervention dictated by the macro.
&lt;/p&gt;

&lt;p&gt;
Recall this. And work in such a way, otherwise things will come to
hunt back to you and your peace in future. 
&lt;/p&gt;

&lt;p&gt;
In this sense I started quickly to explore for a couple of hours some
UML tools and their integration with the eclipse IDE.
&lt;/p&gt;

&lt;p&gt;
Here some notes. I hope that in this sense I will have a proper
workflow in this dimension in the next couple of months.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/to-uml-and-round-trip-engineering/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>software-engineering</category><category>uml</category><guid>https://marcohassan.github.io/bits-of-experience/posts/to-uml-and-round-trip-engineering/</guid><pubDate>Thu, 14 Oct 2021 07:55:33 GMT</pubDate></item><item><title>Some Notes about UML and PlantUml</title><link>https://marcohassan.github.io/bits-of-experience/posts/some-notes-about-uml-and-plantuml/</link><dc:creator>Marco Hassan</dc:creator><description>&lt;div&gt;&lt;style&gt;
img {
display: block;
margin-top: 60px;
margin-bottom: 60px;
margin-left: auto;
margin-right: auto;
width: 70%;
height: 100%;
class: center;
}

.container {
  position: relative;
  left: 15%;
  margin-top: 60px;
  margin-bottom: 60px;
  width: 70%;
  overflow: hidden;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
  display:block;
  overflow-y: hidden;
}

.responsive-iframe {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  border: none;
  display:block;
  overflow-y: hidden;
}
&lt;/style&gt;


&lt;p&gt;
I already posted about the set-up of plantuml &lt;a href="https://marcohassan.github.io/bits-of-experience/posts/uml-diagrams-with-plantuml/"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This is a very hand tool to manage complexity. In my new position
complexity is all around and over me.
&lt;/p&gt;

&lt;p&gt;
The system is big and you need to keep cold blood, strucutre and
overview. I think this will be the main challange. In this sense the
best way for me to operate will be to create good technical
documentation of the system that I can always refer to.
&lt;/p&gt;

&lt;p&gt;
Emacs is a very good friend in this sense. With all of the tags and
&lt;code&gt;TODO&lt;/code&gt;, &lt;code&gt;ISSUES&lt;/code&gt; workflow it will be possible for me to store the
general structure of the system and to keep a log and search across it
in order to manage such huge complexity.
&lt;/p&gt;

&lt;p&gt;
Such tagged documentation in combination with the possibility to
export my notes in very readable &lt;code&gt;html&lt;/code&gt; documents and the possibility
to write architectural diagrams via &lt;code&gt;plantuml&lt;/code&gt; will be my big ally in
this in new challenge.
&lt;/p&gt;

&lt;p&gt;
You can then store such &lt;code&gt;html&lt;/code&gt; in blob stores and make them available
across the team.
&lt;/p&gt;

&lt;p&gt;
Here some notes on resources you can refere to when writing your
architectural diagrams and general documentation for your projects.
&lt;/p&gt;

&lt;p&gt;
Find the official documentation &lt;a href="http://plantuml.com/en/guide"&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcohassan.github.io/bits-of-experience/posts/some-notes-about-uml-and-plantuml/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>IT Architecture</category><category>plantuml</category><category>uml</category><guid>https://marcohassan.github.io/bits-of-experience/posts/some-notes-about-uml-and-plantuml/</guid><pubDate>Fri, 01 Oct 2021 09:47:41 GMT</pubDate></item></channel></rss>